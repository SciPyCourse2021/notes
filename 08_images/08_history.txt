
mspacek@Godel:~/SciPyCourse2021/notes/homework4$ ls
distributions.png  homework4.pdf           student_solutions
homework4.md       homework4_samples.py    t_absd.npz
homework4.npz      homework4_solutions.py  time_series.png
mspacek@Godel:~/SciPyCourse2021/notes/homework4$ ipython
Python 3.6.9 (default, Jan 26 2021, 15:33:00)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.10.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: ls
distributions.png  homework4.pdf           student_solutions/
homework4.md       homework4_samples.py    t_absd.npz
homework4.npz      homework4_solutions.py  time_series.png

In [2]: d = np.load('homework4.npz')

In [3]: d
Out[3]: <numpy.lib.npyio.NpzFile at 0x7f8ff9a51128>

In [4]: list(d)
Out[4]: ['t', 'x', 'y']

In [5]: d.files
Out[5]: ['t', 'x', 'y']

In [6]: d['t']
Out[6]:
array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ,
        1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ,  2.1,
        2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9,  3. ,  3.1,  3.2,
        3.3,  3.4,  3.5,  3.6,  3.7,  3.8,  3.9,  4. ,  4.1,  4.2,  4.3,
        4.4,  4.5,  4.6,  4.7,  4.8,  4.9,  5. ,  5.1,  5.2,  5.3,  5.4,
        5.5,  5.6,  5.7,  5.8,  5.9,  6. ,  6.1,  6.2,  6.3,  6.4,  6.5,
        6.6,  6.7,  6.8,  6.9,  7. ,  7.1,  7.2,  7.3,  7.4,  7.5,  7.6,
        7.7,  7.8,  7.9,  8. ,  8.1,  8.2,  8.3,  8.4,  8.5,  8.6,  8.7,
        8.8,  8.9,  9. ,  9.1,  9.2,  9.3,  9.4,  9.5,  9.6,  9.7,  9.8,
        9.9, 10. , 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9,
       11. , 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12. ,
       12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13. , 13.1,
       13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14. , 14.1, 14.2,
       14.3, 14.4, 14.5, 14.6, 14.7, 14.8, 14.9, 15. , 15.1, 15.2, 15.3,
       15.4, 15.5, 15.6, 15.7, 15.8, 15.9, 16. , 16.1, 16.2, 16.3, 16.4,
       16.5, 16.6, 16.7, 16.8, 16.9, 17. , 17.1, 17.2, 17.3, 17.4, 17.5,
       17.6, 17.7, 17.8, 17.9, 18. , 18.1, 18.2, 18.3, 18.4, 18.5, 18.6,
       18.7, 18.8, 18.9, 19. , 19.1, 19.2, 19.3, 19.4, 19.5, 19.6, 19.7,
       19.8, 19.9, 20. , 20.1, 20.2, 20.3, 20.4, 20.5, 20.6, 20.7, 20.8,
       20.9, 21. , 21.1, 21.2, 21.3, 21.4, 21.5, 21.6, 21.7, 21.8, 21.9,
       22. , 22.1, 22.2, 22.3, 22.4, 22.5, 22.6, 22.7, 22.8, 22.9, 23. ,
       23.1, 23.2, 23.3, 23.4, 23.5, 23.6, 23.7, 23.8, 23.9, 24. , 24.1,
       24.2, 24.3, 24.4, 24.5, 24.6, 24.7, 24.8, 24.9, 25. , 25.1, 25.2,
       25.3, 25.4, 25.5, 25.6, 25.7, 25.8, 25.9, 26. , 26.1, 26.2, 26.3,
       26.4, 26.5, 26.6, 26.7, 26.8, 26.9, 27. , 27.1, 27.2, 27.3, 27.4,
       27.5, 27.6, 27.7, 27.8, 27.9, 28. , 28.1, 28.2, 28.3, 28.4, 28.5,
       28.6, 28.7, 28.8, 28.9, 29. , 29.1, 29.2, 29.3, 29.4, 29.5, 29.6,
       29.7, 29.8, 29.9, 30. , 30.1, 30.2, 30.3, 30.4, 30.5, 30.6, 30.7,
       30.8, 30.9, 31. , 31.1, 31.2, 31.3, 31.4, 31.5, 31.6, 31.7, 31.8,
       31.9, 32. , 32.1, 32.2, 32.3, 32.4, 32.5, 32.6, 32.7, 32.8, 32.9,
       33. , 33.1, 33.2, 33.3, 33.4, 33.5, 33.6, 33.7, 33.8, 33.9, 34. ,
       34.1, 34.2, 34.3, 34.4, 34.5, 34.6, 34.7, 34.8, 34.9, 35. , 35.1,
       35.2, 35.3, 35.4, 35.5, 35.6, 35.7, 35.8, 35.9, 36. , 36.1, 36.2,
       36.3, 36.4, 36.5, 36.6, 36.7, 36.8, 36.9, 37. , 37.1, 37.2, 37.3,
       37.4, 37.5, 37.6, 37.7, 37.8, 37.9, 38. , 38.1, 38.2, 38.3, 38.4,
       38.5, 38.6, 38.7, 38.8, 38.9, 39. , 39.1, 39.2, 39.3, 39.4, 39.5,
       39.6, 39.7, 39.8, 39.9, 40. , 40.1, 40.2, 40.3, 40.4, 40.5, 40.6,
       40.7, 40.8, 40.9, 41. , 41.1, 41.2, 41.3, 41.4, 41.5, 41.6, 41.7,
       41.8, 41.9, 42. , 42.1, 42.2, 42.3, 42.4, 42.5, 42.6, 42.7, 42.8,
       42.9, 43. , 43.1, 43.2, 43.3, 43.4, 43.5, 43.6, 43.7, 43.8, 43.9,
       44. , 44.1, 44.2, 44.3, 44.4, 44.5, 44.6, 44.7, 44.8, 44.9, 45. ,
       45.1, 45.2, 45.3, 45.4, 45.5, 45.6, 45.7, 45.8, 45.9, 46. , 46.1,
       46.2, 46.3, 46.4, 46.5, 46.6, 46.7, 46.8, 46.9, 47. , 47.1, 47.2,
       47.3, 47.4, 47.5, 47.6, 47.7, 47.8, 47.9, 48. , 48.1, 48.2, 48.3,
       48.4, 48.5, 48.6, 48.7, 48.8, 48.9, 49. , 49.1, 49.2, 49.3, 49.4,
       49.5, 49.6, 49.7, 49.8, 49.9, 50. , 50.1, 50.2, 50.3, 50.4, 50.5,
       50.6, 50.7, 50.8, 50.9, 51. , 51.1, 51.2, 51.3, 51.4, 51.5, 51.6,
       51.7, 51.8, 51.9, 52. , 52.1, 52.2, 52.3, 52.4, 52.5, 52.6, 52.7,
       52.8, 52.9, 53. , 53.1, 53.2, 53.3, 53.4, 53.5, 53.6, 53.7, 53.8,
       53.9, 54. , 54.1, 54.2, 54.3, 54.4, 54.5, 54.6, 54.7, 54.8, 54.9,
       55. , 55.1, 55.2, 55.3, 55.4, 55.5, 55.6, 55.7, 55.8, 55.9, 56. ,
       56.1, 56.2, 56.3, 56.4, 56.5, 56.6, 56.7, 56.8, 56.9, 57. , 57.1,
       57.2, 57.3, 57.4, 57.5, 57.6, 57.7, 57.8, 57.9, 58. , 58.1, 58.2,
       58.3, 58.4, 58.5, 58.6, 58.7, 58.8, 58.9, 59. , 59.1, 59.2, 59.3,
       59.4, 59.5, 59.6, 59.7, 59.8, 59.9, 60. , 60.1, 60.2, 60.3, 60.4,
       60.5, 60.6, 60.7, 60.8, 60.9, 61. , 61.1, 61.2, 61.3, 61.4, 61.5,
       61.6, 61.7, 61.8, 61.9, 62. , 62.1, 62.2, 62.3, 62.4, 62.5, 62.6,
       62.7, 62.8, 62.9, 63. , 63.1, 63.2, 63.3, 63.4, 63.5, 63.6, 63.7,
       63.8, 63.9, 64. , 64.1, 64.2, 64.3, 64.4, 64.5, 64.6, 64.7, 64.8,
       64.9, 65. , 65.1, 65.2, 65.3, 65.4, 65.5, 65.6, 65.7, 65.8, 65.9,
       66. , 66.1, 66.2, 66.3, 66.4, 66.5, 66.6, 66.7, 66.8, 66.9, 67. ,
       67.1, 67.2, 67.3, 67.4, 67.5, 67.6, 67.7, 67.8, 67.9, 68. , 68.1,
       68.2, 68.3, 68.4, 68.5, 68.6, 68.7, 68.8, 68.9, 69. , 69.1, 69.2,
       69.3, 69.4, 69.5, 69.6, 69.7, 69.8, 69.9, 70. , 70.1, 70.2, 70.3,
       70.4, 70.5, 70.6, 70.7, 70.8, 70.9, 71. , 71.1, 71.2, 71.3, 71.4,
       71.5, 71.6, 71.7, 71.8, 71.9, 72. , 72.1, 72.2, 72.3, 72.4, 72.5,
       72.6, 72.7, 72.8, 72.9, 73. , 73.1, 73.2, 73.3, 73.4, 73.5, 73.6,
       73.7, 73.8, 73.9, 74. , 74.1, 74.2, 74.3, 74.4, 74.5, 74.6, 74.7,
       74.8, 74.9, 75. , 75.1, 75.2, 75.3, 75.4, 75.5, 75.6, 75.7, 75.8,
       75.9, 76. , 76.1, 76.2, 76.3, 76.4, 76.5, 76.6, 76.7, 76.8, 76.9,
       77. , 77.1, 77.2, 77.3, 77.4, 77.5, 77.6, 77.7, 77.8, 77.9, 78. ,
       78.1, 78.2, 78.3, 78.4, 78.5, 78.6, 78.7, 78.8, 78.9, 79. , 79.1,
       79.2, 79.3, 79.4, 79.5, 79.6, 79.7, 79.8, 79.9, 80. , 80.1, 80.2,
       80.3, 80.4, 80.5, 80.6, 80.7, 80.8, 80.9, 81. , 81.1, 81.2, 81.3,
       81.4, 81.5, 81.6, 81.7, 81.8, 81.9, 82. , 82.1, 82.2, 82.3, 82.4,
       82.5, 82.6, 82.7, 82.8, 82.9, 83. , 83.1, 83.2, 83.3, 83.4, 83.5,
       83.6, 83.7, 83.8, 83.9, 84. , 84.1, 84.2, 84.3, 84.4, 84.5, 84.6,
       84.7, 84.8, 84.9, 85. , 85.1, 85.2, 85.3, 85.4, 85.5, 85.6, 85.7,
       85.8, 85.9, 86. , 86.1, 86.2, 86.3, 86.4, 86.5, 86.6, 86.7, 86.8,
       86.9, 87. , 87.1, 87.2, 87.3, 87.4, 87.5, 87.6, 87.7, 87.8, 87.9,
       88. , 88.1, 88.2, 88.3, 88.4, 88.5, 88.6, 88.7, 88.8, 88.9, 89. ,
       89.1, 89.2, 89.3, 89.4, 89.5, 89.6, 89.7, 89.8, 89.9, 90. , 90.1,
       90.2, 90.3, 90.4, 90.5, 90.6, 90.7, 90.8, 90.9, 91. , 91.1, 91.2,
       91.3, 91.4, 91.5, 91.6, 91.7, 91.8, 91.9, 92. , 92.1, 92.2, 92.3,
       92.4, 92.5, 92.6, 92.7, 92.8, 92.9, 93. , 93.1, 93.2, 93.3, 93.4,
       93.5, 93.6, 93.7, 93.8, 93.9, 94. , 94.1, 94.2, 94.3, 94.4, 94.5,
       94.6, 94.7, 94.8, 94.9, 95. , 95.1, 95.2, 95.3, 95.4, 95.5, 95.6,
       95.7, 95.8, 95.9, 96. , 96.1, 96.2, 96.3, 96.4, 96.5, 96.6, 96.7,
       96.8, 96.9, 97. , 97.1, 97.2, 97.3, 97.4, 97.5, 97.6, 97.7, 97.8,
       97.9, 98. , 98.1, 98.2, 98.3, 98.4, 98.5, 98.6, 98.7, 98.8, 98.9,
       99. , 99.1, 99.2, 99.3, 99.4, 99.5, 99.6, 99.7, 99.8, 99.9])

In [7]: d['t']
Out[7]:
array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ,
        1.1,  1.2,  1.3,  1.4,  1.5,  1.6,  1.7,  1.8,  1.9,  2. ,  2.1,
        2.2,  2.3,  2.4,  2.5,  2.6,  2.7,  2.8,  2.9,  3. ,  3.1,  3.2,
        3.3,  3.4,  3.5,  3.6,  3.7,  3.8,  3.9,  4. ,  4.1,  4.2,  4.3,
        4.4,  4.5,  4.6,  4.7,  4.8,  4.9,  5. ,  5.1,  5.2,  5.3,  5.4,
        5.5,  5.6,  5.7,  5.8,  5.9,  6. ,  6.1,  6.2,  6.3,  6.4,  6.5,
        6.6,  6.7,  6.8,  6.9,  7. ,  7.1,  7.2,  7.3,  7.4,  7.5,  7.6,
        7.7,  7.8,  7.9,  8. ,  8.1,  8.2,  8.3,  8.4,  8.5,  8.6,  8.7,
        8.8,  8.9,  9. ,  9.1,  9.2,  9.3,  9.4,  9.5,  9.6,  9.7,  9.8,
        9.9, 10. , 10.1, 10.2, 10.3, 10.4, 10.5, 10.6, 10.7, 10.8, 10.9,
       11. , 11.1, 11.2, 11.3, 11.4, 11.5, 11.6, 11.7, 11.8, 11.9, 12. ,
       12.1, 12.2, 12.3, 12.4, 12.5, 12.6, 12.7, 12.8, 12.9, 13. , 13.1,
       13.2, 13.3, 13.4, 13.5, 13.6, 13.7, 13.8, 13.9, 14. , 14.1, 14.2,
       14.3, 14.4, 14.5, 14.6, 14.7, 14.8, 14.9, 15. , 15.1, 15.2, 15.3,
       15.4, 15.5, 15.6, 15.7, 15.8, 15.9, 16. , 16.1, 16.2, 16.3, 16.4,
       16.5, 16.6, 16.7, 16.8, 16.9, 17. , 17.1, 17.2, 17.3, 17.4, 17.5,
       17.6, 17.7, 17.8, 17.9, 18. , 18.1, 18.2, 18.3, 18.4, 18.5, 18.6,
       18.7, 18.8, 18.9, 19. , 19.1, 19.2, 19.3, 19.4, 19.5, 19.6, 19.7,
       19.8, 19.9, 20. , 20.1, 20.2, 20.3, 20.4, 20.5, 20.6, 20.7, 20.8,
       20.9, 21. , 21.1, 21.2, 21.3, 21.4, 21.5, 21.6, 21.7, 21.8, 21.9,
       22. , 22.1, 22.2, 22.3, 22.4, 22.5, 22.6, 22.7, 22.8, 22.9, 23. ,
       23.1, 23.2, 23.3, 23.4, 23.5, 23.6, 23.7, 23.8, 23.9, 24. , 24.1,
       24.2, 24.3, 24.4, 24.5, 24.6, 24.7, 24.8, 24.9, 25. , 25.1, 25.2,
       25.3, 25.4, 25.5, 25.6, 25.7, 25.8, 25.9, 26. , 26.1, 26.2, 26.3,
       26.4, 26.5, 26.6, 26.7, 26.8, 26.9, 27. , 27.1, 27.2, 27.3, 27.4,
       27.5, 27.6, 27.7, 27.8, 27.9, 28. , 28.1, 28.2, 28.3, 28.4, 28.5,
       28.6, 28.7, 28.8, 28.9, 29. , 29.1, 29.2, 29.3, 29.4, 29.5, 29.6,
       29.7, 29.8, 29.9, 30. , 30.1, 30.2, 30.3, 30.4, 30.5, 30.6, 30.7,
       30.8, 30.9, 31. , 31.1, 31.2, 31.3, 31.4, 31.5, 31.6, 31.7, 31.8,
       31.9, 32. , 32.1, 32.2, 32.3, 32.4, 32.5, 32.6, 32.7, 32.8, 32.9,
       33. , 33.1, 33.2, 33.3, 33.4, 33.5, 33.6, 33.7, 33.8, 33.9, 34. ,
       34.1, 34.2, 34.3, 34.4, 34.5, 34.6, 34.7, 34.8, 34.9, 35. , 35.1,
       35.2, 35.3, 35.4, 35.5, 35.6, 35.7, 35.8, 35.9, 36. , 36.1, 36.2,
       36.3, 36.4, 36.5, 36.6, 36.7, 36.8, 36.9, 37. , 37.1, 37.2, 37.3,
       37.4, 37.5, 37.6, 37.7, 37.8, 37.9, 38. , 38.1, 38.2, 38.3, 38.4,
       38.5, 38.6, 38.7, 38.8, 38.9, 39. , 39.1, 39.2, 39.3, 39.4, 39.5,
       39.6, 39.7, 39.8, 39.9, 40. , 40.1, 40.2, 40.3, 40.4, 40.5, 40.6,
       40.7, 40.8, 40.9, 41. , 41.1, 41.2, 41.3, 41.4, 41.5, 41.6, 41.7,
       41.8, 41.9, 42. , 42.1, 42.2, 42.3, 42.4, 42.5, 42.6, 42.7, 42.8,
       42.9, 43. , 43.1, 43.2, 43.3, 43.4, 43.5, 43.6, 43.7, 43.8, 43.9,
       44. , 44.1, 44.2, 44.3, 44.4, 44.5, 44.6, 44.7, 44.8, 44.9, 45. ,
       45.1, 45.2, 45.3, 45.4, 45.5, 45.6, 45.7, 45.8, 45.9, 46. , 46.1,
       46.2, 46.3, 46.4, 46.5, 46.6, 46.7, 46.8, 46.9, 47. , 47.1, 47.2,
       47.3, 47.4, 47.5, 47.6, 47.7, 47.8, 47.9, 48. , 48.1, 48.2, 48.3,
       48.4, 48.5, 48.6, 48.7, 48.8, 48.9, 49. , 49.1, 49.2, 49.3, 49.4,
       49.5, 49.6, 49.7, 49.8, 49.9, 50. , 50.1, 50.2, 50.3, 50.4, 50.5,
       50.6, 50.7, 50.8, 50.9, 51. , 51.1, 51.2, 51.3, 51.4, 51.5, 51.6,
       51.7, 51.8, 51.9, 52. , 52.1, 52.2, 52.3, 52.4, 52.5, 52.6, 52.7,
       52.8, 52.9, 53. , 53.1, 53.2, 53.3, 53.4, 53.5, 53.6, 53.7, 53.8,
       53.9, 54. , 54.1, 54.2, 54.3, 54.4, 54.5, 54.6, 54.7, 54.8, 54.9,
       55. , 55.1, 55.2, 55.3, 55.4, 55.5, 55.6, 55.7, 55.8, 55.9, 56. ,
       56.1, 56.2, 56.3, 56.4, 56.5, 56.6, 56.7, 56.8, 56.9, 57. , 57.1,
       57.2, 57.3, 57.4, 57.5, 57.6, 57.7, 57.8, 57.9, 58. , 58.1, 58.2,
       58.3, 58.4, 58.5, 58.6, 58.7, 58.8, 58.9, 59. , 59.1, 59.2, 59.3,
       59.4, 59.5, 59.6, 59.7, 59.8, 59.9, 60. , 60.1, 60.2, 60.3, 60.4,
       60.5, 60.6, 60.7, 60.8, 60.9, 61. , 61.1, 61.2, 61.3, 61.4, 61.5,
       61.6, 61.7, 61.8, 61.9, 62. , 62.1, 62.2, 62.3, 62.4, 62.5, 62.6,
       62.7, 62.8, 62.9, 63. , 63.1, 63.2, 63.3, 63.4, 63.5, 63.6, 63.7,
       63.8, 63.9, 64. , 64.1, 64.2, 64.3, 64.4, 64.5, 64.6, 64.7, 64.8,
       64.9, 65. , 65.1, 65.2, 65.3, 65.4, 65.5, 65.6, 65.7, 65.8, 65.9,
       66. , 66.1, 66.2, 66.3, 66.4, 66.5, 66.6, 66.7, 66.8, 66.9, 67. ,
       67.1, 67.2, 67.3, 67.4, 67.5, 67.6, 67.7, 67.8, 67.9, 68. , 68.1,
       68.2, 68.3, 68.4, 68.5, 68.6, 68.7, 68.8, 68.9, 69. , 69.1, 69.2,
       69.3, 69.4, 69.5, 69.6, 69.7, 69.8, 69.9, 70. , 70.1, 70.2, 70.3,
       70.4, 70.5, 70.6, 70.7, 70.8, 70.9, 71. , 71.1, 71.2, 71.3, 71.4,
       71.5, 71.6, 71.7, 71.8, 71.9, 72. , 72.1, 72.2, 72.3, 72.4, 72.5,
       72.6, 72.7, 72.8, 72.9, 73. , 73.1, 73.2, 73.3, 73.4, 73.5, 73.6,
       73.7, 73.8, 73.9, 74. , 74.1, 74.2, 74.3, 74.4, 74.5, 74.6, 74.7,
       74.8, 74.9, 75. , 75.1, 75.2, 75.3, 75.4, 75.5, 75.6, 75.7, 75.8,
       75.9, 76. , 76.1, 76.2, 76.3, 76.4, 76.5, 76.6, 76.7, 76.8, 76.9,
       77. , 77.1, 77.2, 77.3, 77.4, 77.5, 77.6, 77.7, 77.8, 77.9, 78. ,
       78.1, 78.2, 78.3, 78.4, 78.5, 78.6, 78.7, 78.8, 78.9, 79. , 79.1,
       79.2, 79.3, 79.4, 79.5, 79.6, 79.7, 79.8, 79.9, 80. , 80.1, 80.2,
       80.3, 80.4, 80.5, 80.6, 80.7, 80.8, 80.9, 81. , 81.1, 81.2, 81.3,
       81.4, 81.5, 81.6, 81.7, 81.8, 81.9, 82. , 82.1, 82.2, 82.3, 82.4,
       82.5, 82.6, 82.7, 82.8, 82.9, 83. , 83.1, 83.2, 83.3, 83.4, 83.5,
       83.6, 83.7, 83.8, 83.9, 84. , 84.1, 84.2, 84.3, 84.4, 84.5, 84.6,
       84.7, 84.8, 84.9, 85. , 85.1, 85.2, 85.3, 85.4, 85.5, 85.6, 85.7,
       85.8, 85.9, 86. , 86.1, 86.2, 86.3, 86.4, 86.5, 86.6, 86.7, 86.8,
       86.9, 87. , 87.1, 87.2, 87.3, 87.4, 87.5, 87.6, 87.7, 87.8, 87.9,
       88. , 88.1, 88.2, 88.3, 88.4, 88.5, 88.6, 88.7, 88.8, 88.9, 89. ,
       89.1, 89.2, 89.3, 89.4, 89.5, 89.6, 89.7, 89.8, 89.9, 90. , 90.1,
       90.2, 90.3, 90.4, 90.5, 90.6, 90.7, 90.8, 90.9, 91. , 91.1, 91.2,
       91.3, 91.4, 91.5, 91.6, 91.7, 91.8, 91.9, 92. , 92.1, 92.2, 92.3,
       92.4, 92.5, 92.6, 92.7, 92.8, 92.9, 93. , 93.1, 93.2, 93.3, 93.4,
       93.5, 93.6, 93.7, 93.8, 93.9, 94. , 94.1, 94.2, 94.3, 94.4, 94.5,
       94.6, 94.7, 94.8, 94.9, 95. , 95.1, 95.2, 95.3, 95.4, 95.5, 95.6,
       95.7, 95.8, 95.9, 96. , 96.1, 96.2, 96.3, 96.4, 96.5, 96.6, 96.7,
       96.8, 96.9, 97. , 97.1, 97.2, 97.3, 97.4, 97.5, 97.6, 97.7, 97.8,
       97.9, 98. , 98.1, 98.2, 98.3, 98.4, 98.5, 98.6, 98.7, 98.8, 98.9,
       99. , 99.1, 99.2, 99.3, 99.4, 99.5, 99.6, 99.7, 99.8, 99.9])

In [8]: d['x']
Out[8]:
array([3.94362515, 5.84270326, 4.39117254, 6.36281471, 4.43228374,
       5.19457018, 5.72034936, 4.48991012, 5.10128753, 5.20099049,
       4.49841193, 5.15507246, 4.97334956, 5.26699879, 4.96555672,
       3.98252022, 4.69769095, 4.37998003, 5.13845914, 4.53654422,
       4.84336492, 5.16246475, 4.50880392, 5.44545474, 4.95058598,
       4.82060759, 5.70213801, 5.28980271, 3.98647678, 5.18971978,
       5.61143873, 5.46621862, 5.64418488, 5.12864545, 5.03199724,
       5.94397537, 6.40592249, 3.99240585, 4.69402129, 5.36111546,
       3.98068776, 4.89870199, 6.09930295, 5.71565584, 4.64882499,
       5.15286902, 4.71283166, 4.83795223, 5.33250879, 4.70438035,
       5.01797295, 5.19152469, 4.57310913, 5.11466552, 4.71154115,
       5.45720107, 6.08173871, 5.30042187, 5.22156077, 5.03066689,
       5.24498377, 4.82584673, 4.45493402, 4.67832714, 5.30073525,
       5.56287596, 4.78488495, 4.88632057, 5.13968134, 4.18200933,
       4.64942982, 4.46964969, 4.50363255, 5.25241004, 4.88727249,
       5.43617882, 4.68962941, 4.55205796, 4.49949837, 4.78762876,
       4.28334801, 5.08803021, 6.60432568, 4.95076621, 5.31678524,
       5.40856389, 4.56404146, 4.79481296, 4.17684079, 5.1754849 ,
       5.1676418 , 5.14756073, 4.99876595, 4.57579204, 5.25198508,
       4.57664479, 5.35911258, 6.22048184, 5.52917855, 4.58737483,
       6.0142675 , 5.01333075, 5.11586013, 4.76126642, 4.87932225,
       5.40332485, 3.70118223, 4.70298855, 4.29297674, 5.19592348,
       5.08917862, 5.08408223, 5.01371058, 4.48044009, 5.44141677,
       4.61220338, 5.09745016, 4.92064047, 5.51251385, 5.09450629,
       5.09764733, 5.12431364, 4.78900687, 5.62027024, 4.02159551,
       4.88172135, 5.21797417, 4.32224082, 5.51523339, 5.17134941,
       4.98802411, 5.47550015, 4.97158703, 4.61889115, 4.69495149,
       5.88416412, 5.01922996, 4.73354903, 4.82656679, 4.59158268,
       5.41062856, 4.45940292, 5.13643227, 5.32547237, 4.4823475 ,
       5.2193246 , 5.36185282, 4.54567937, 5.80863714, 5.42667535,
       5.74639846, 5.43211416, 4.39681192, 3.83120576, 5.3399107 ,
       5.21551691, 4.93402994, 4.20531599, 5.28036269, 4.80315226,
       4.45514166, 5.61902614, 4.44331044, 5.31005977, 5.18022879,
       4.18698026, 4.60592684, 5.12291594, 5.08437401, 5.55255601,
       5.17782104, 5.18026777, 4.69844275, 4.72957241, 5.3828204 ,
       5.4175657 , 4.36353939, 4.18508118, 4.37314714, 5.18076789,
       5.49828201, 6.0016327 , 5.08421157, 4.91380324, 5.49356864,
       4.94349285, 5.47759848, 4.33465881, 4.41171635, 5.42218464,
       5.06655191, 4.65929396, 5.21117058, 5.2019459 , 5.12905705,
       5.26721247, 5.37255761, 5.89890677, 5.3060179 , 4.74197265,
       5.76399253, 4.9672227 , 5.2929389 , 5.33714109, 5.33844602,
       4.46117205, 5.42141766, 4.59012013, 6.09229624, 5.64967531,
       4.92252491, 4.94759729, 4.48691948, 4.78324976, 3.98814798,
       5.18496857, 5.31003189, 5.26999639, 4.78161809, 5.0641812 ,
       4.57358783, 5.42601538, 4.35476094, 6.38389529, 4.93023542,
       4.39032824, 5.33181397, 4.96904223, 5.26538937, 4.60628859,
       5.39535406, 5.90306639, 4.74626529, 4.78374643, 5.236542  ,
       5.35463095, 5.66814374, 5.20639639, 6.11090388, 4.5911035 ,
       5.38356021, 5.0605228 , 4.99665157, 5.099586  , 4.25974301,
       4.43946377, 5.67671567, 4.80703441, 4.78779606, 5.37459431,
       5.73684212, 5.21668144, 5.12035102, 4.82406126, 5.36783777,
       5.17994878, 4.4401385 , 4.85179917, 4.97080291, 4.78309373,
       4.54008709, 5.03265066, 4.56144977, 5.97196097, 4.80160242,
       4.55790268, 4.84667674, 5.59966363, 4.53858314, 5.06951168,
       4.86858987, 4.42473159, 5.10716012, 4.73031685, 5.67786395,
       5.29321056, 5.87557418, 4.45820073, 5.090329  , 5.25989171,
       4.45268061, 5.08471337, 5.02813016, 5.84312431, 4.98332373,
       5.16519361, 5.11346491, 5.23506368, 4.69716038, 4.69416608,
       4.51259405, 4.81302547, 4.39583958, 4.94413316, 4.83013787,
       5.03655979, 6.06103536, 5.25576594, 5.26191524, 4.73906414,
       4.65202123, 5.25427782, 6.07771474, 5.16834787, 4.15868057,
       5.19212989, 4.8412646 , 5.19783474, 5.53482994, 3.93410184,
       5.08196015, 4.25976847, 4.0184751 , 4.26267962, 5.11400812,
       4.92542568, 4.8575669 , 4.801142  , 4.21721347, 5.63768892,
       5.2245216 , 5.22254775, 5.16096984, 4.9270214 , 4.81731344,
       4.25434093, 5.36219732, 5.19459525, 5.91531242, 4.93163815,
       4.74231086, 4.56186243, 5.06275426, 4.89911285, 4.99624158,
       4.96228505, 5.21754138, 4.42726653, 4.67462999, 6.06266993,
       5.60560314, 4.9230828 , 5.74805296, 4.62541185, 5.37472389,
       5.83562145, 4.36298968, 5.35202859, 4.51538136, 5.33632228,
       4.55546476, 3.81523436, 4.79838206, 4.37869435, 5.75924754,
       5.23706028, 5.53497625, 4.65019703, 4.44782032, 5.10365246,
       4.74397836, 4.4699703 , 6.78431008, 4.51265365, 4.31235813,
       5.40154652, 5.82411583, 5.28512316, 5.05774686, 4.98621602,
       5.24048975, 4.96121261, 4.50418624, 5.23735486, 5.28466709,
       4.88689666, 5.66904368, 4.94910352, 5.408734  , 5.66362146,
       4.97857506, 5.17899277, 5.35733453, 4.99507591, 5.17387281,
       5.24852132, 4.06311898, 4.62830661, 3.95387299, 5.95423291,
       5.77548093, 5.08547608, 4.73613712, 4.85720639, 4.81744332,
       5.11380579, 4.50055092, 6.01231144, 5.54697581, 5.10792768,
       4.78134039, 5.99501558, 5.09394206, 4.77998604, 4.16427094,
       5.15947353, 5.0662201 , 4.34509179, 5.67573429, 5.16266905,
       4.26379377, 5.47277004, 5.32436267, 5.30950086, 5.59809234,
       5.62302684, 4.03981251, 4.27881312, 5.01522192, 4.2875247 ,
       4.1651158 , 5.00012702, 5.48834387, 5.36140462, 4.59143336,
       5.58008719, 4.88330715, 5.0627665 , 5.38512791, 4.82681215,
       4.12700795, 4.10366361, 5.44239236, 3.63002705, 5.75803198,
       4.19083132, 5.3848751 , 5.19496974, 3.83679582, 6.01302813,
       6.18872624, 5.60304424, 5.51053888, 5.37929421, 5.46810483,
       5.27316045, 5.22101134, 5.55493215, 4.96951381, 4.10556265,
       4.95039939, 4.89764044, 5.83113509, 4.93552723, 5.43451587,
       5.71614449, 4.88054165, 5.74342045, 4.96260234, 5.57516125,
       4.58066629, 4.99234758, 4.66875194, 5.690924  , 5.46250105,
       4.94972605, 5.68767006, 4.0110491 , 5.0802095 , 4.55299581,
       4.94324368, 5.26171036, 4.30677446, 6.25015748, 5.78968722,
       5.02305961, 5.02050261, 5.3655072 , 5.42107064, 4.54602073,
       4.83718447, 4.90134745, 4.97678272, 5.13071786, 5.02447241,
       4.61292523, 4.49932124, 5.33886197, 4.74141796, 4.80620149,
       5.00864244, 5.52795411, 4.40809666, 5.51791752, 3.85989117,
       4.8589279 , 5.22800222, 4.1016432 , 4.81368358, 4.65651759,
       4.7604872 , 4.78071869, 6.34073849, 3.7524372 , 4.09064303,
       4.51124039, 4.13626989, 5.11689642, 6.02068715, 5.49998432,
       4.63434824, 5.13238209, 5.14994977, 4.68215563, 4.64213491,
       5.8538603 , 4.57573302, 4.71446537, 5.70849337, 4.97776708,
       4.84610823, 3.99224636, 5.59016701, 5.18678854, 6.21336856,
       5.22585461, 5.34230541, 4.52269823, 4.92485913, 4.57412073,
       5.07335507, 4.79097669, 5.57867974, 4.75978273, 5.63912413,
       4.66627157, 4.31086396, 5.581597  , 4.72828269, 5.06667122,
       4.96443297, 5.26512979, 4.53435223, 4.30122529, 5.0873754 ,
       4.95471186, 5.56162539, 4.82439673, 5.00386121, 3.973295  ,
       5.20121632, 5.50438905, 5.09129658, 4.53136194, 4.76068645,
       5.17127831, 4.91152468, 4.19989582, 5.5326502 , 5.23520901,
       4.66470328, 4.83546059, 3.97205024, 5.03899444, 5.80668704,
       4.64162606, 4.7821459 , 4.62456115, 4.06033933, 5.28458196,
       5.81498651, 4.47620989, 5.83752227, 5.16245499, 5.35181048,
       4.86546537, 5.506145  , 4.97372324, 4.398827  , 4.10463414,
       4.97290095, 5.10535413, 4.75723612, 5.33904061, 5.22772529,
       4.45404169, 4.99819478, 4.70181734, 5.17210417, 4.54090079,
       4.8210946 , 5.22834129, 4.79789231, 4.60090967, 5.85772776,
       5.04203781, 5.1349851 , 5.16873439, 5.52224413, 5.17270398,
       3.99548854, 5.19599272, 5.338351  , 4.84091101, 4.95083565,
       4.40964076, 4.25143098, 5.4804796 , 4.88183124, 4.78120287,
       4.33054297, 4.87375477, 5.14709502, 4.34864803, 5.76808272,
       5.24889069, 4.73660891, 5.74559119, 5.42997593, 5.04841296,
       6.22628012, 4.13699928, 5.6068744 , 4.60684989, 4.88788189,
       5.68252945, 5.31630472, 5.33038333, 4.84283935, 4.44603416,
       4.85592771, 5.90001934, 4.3390404 , 5.29138064, 4.69324575,
       4.42534914, 5.95606462, 4.7713408 , 4.78370064, 5.64424506,
       5.36304169, 4.46478704, 4.56199341, 5.05062785, 4.82057642,
       5.19164465, 5.39251826, 5.14742075, 5.88958942, 5.46192376,
       4.55810785, 5.24155093, 5.94098348, 4.64689101, 4.90941553,
       4.91369797, 5.09755826, 4.83274193, 5.53480046, 4.50102863,
       5.04511026, 4.27096346, 4.6887259 , 4.98485888, 5.08537298,
       4.89160406, 5.5805236 , 5.52250611, 4.55838049, 5.7883481 ,
       5.51756987, 5.21540518, 5.68442634, 4.89646841, 5.71336146,
       4.84029886, 5.16726375, 5.0316261 , 5.8031815 , 5.64674355,
       5.45057577, 4.96479865, 5.0665772 , 4.99829929, 5.60376252,
       5.26574986, 5.27205221, 5.0069914 , 4.87661817, 5.54219499,
       4.43255153, 5.32819959, 5.06429457, 5.35527764, 5.29050597,
       4.92116327, 5.30787907, 6.10788248, 5.11541771, 5.19100021,
       4.63972112, 4.73808802, 5.28977224, 5.21018512, 4.76925812,
       5.01461238, 5.10813825, 4.29264705, 5.50694348, 3.89502523,
       5.07921256, 5.1845846 , 5.57937645, 5.06845135, 4.98286986,
       4.83954042, 4.79523924, 4.29158098, 4.63732717, 5.23377747,
       5.01762978, 4.93993978, 5.44747211, 5.99425111, 4.17561767,
       5.58463949, 4.73773497, 5.04106624, 4.3233228 , 5.33477164,
       5.28482969, 4.43671149, 5.09149377, 4.74785714, 3.56746994,
       5.27452956, 5.39886671, 4.57076929, 4.94015759, 4.25617561,
       5.62499957, 4.27048685, 4.86320396, 5.53491169, 4.40911076,
       4.7959821 , 5.17455733, 4.81276844, 4.3835465 , 4.81275085,
       5.67655191, 5.38820707, 5.53827833, 4.9506082 , 5.01254902,
       5.28351921, 4.65567695, 5.3993048 , 5.58246532, 6.41784546,
       5.1802625 , 5.00241193, 4.89461017, 4.79517793, 5.64215621,
       5.22548989, 4.26374868, 5.35035952, 4.61169576, 5.2205033 ,
       4.74488352, 5.4273602 , 5.48704968, 5.02730464, 4.56640329,
       5.61231581, 4.91248441, 4.57996479, 5.98700229, 4.90131563,
       5.67193599, 5.96782917, 5.18143398, 5.68538516, 4.68292989,
       6.0881636 , 4.93517229, 4.44833957, 4.63611423, 5.21372572,
       4.10178262, 4.99091043, 4.92669371, 5.32321666, 4.58518005,
       4.92495015, 5.32475977, 4.97695667, 4.25245211, 5.5155031 ,
       4.7209057 , 5.0631944 , 5.61618246, 5.57138538, 5.58267108,
       4.82786341, 4.22059685, 4.66379276, 5.53660406, 4.44399767,
       4.63749024, 5.27933388, 6.02775279, 5.23506533, 5.16154097,
       5.23831996, 4.75520757, 4.13500054, 6.06947761, 5.07885766,
       4.49684407, 5.30934277, 5.06736093, 4.52069484, 6.21671777,
       5.0331226 , 5.32091712, 4.55768861, 4.09549472, 4.18489068,
       4.9229003 , 5.06552487, 4.586464  , 4.78097107, 4.42272792,
       4.37610186, 4.84072967, 4.69477141, 4.69125814, 4.19340918,
       4.66411492, 4.95771322, 4.70802287, 4.74197822, 4.99146413,
       4.99637502, 4.78708724, 4.74892874, 5.49762922, 5.54949687,
       4.77145774, 5.70870421, 5.271475  , 5.22474362, 5.03121609,
       4.96591635, 4.12196524, 5.28129791, 4.75374805, 4.19807342,
       4.52809791, 5.59072372, 5.68652718, 4.55219623, 4.81791432,
       5.66878384, 5.73289496, 4.70417519, 4.93695075, 4.88962685,
       4.67318965, 5.25535516, 4.63748524, 5.50812399, 5.30402403,
       5.71423394, 4.87466121, 4.75911084, 4.82466163, 5.11656808,
       4.78780568, 5.10425699, 4.79469661, 4.99657925, 4.11830018,
       4.34396731, 4.96147284, 4.94483929, 5.40147814, 5.31721902,
       4.76017557, 5.11257858, 4.3149258 , 4.64610932, 4.14142094,
       4.01638332, 4.52541764, 4.29136539, 5.12153432, 4.69057771,
       4.25895958, 5.80867925, 4.87863919, 4.4675869 , 5.01438089,
       4.19774728, 5.73747024, 5.342518  , 5.37586834, 4.65416032,
       5.17756608, 4.24042941, 5.34575416, 4.87365353, 4.4029035 ,
       5.70269014, 5.38329032, 4.9921666 , 5.09451472, 5.33084898,
       6.00655912, 5.2302687 , 5.11415558, 4.98474317, 5.87895691,
       5.77270398, 4.62129877, 4.22430755, 4.75541828, 5.15818916,
       5.01251663, 5.80170626, 5.10106346, 5.75647048, 4.93756154,
       5.41909101, 5.31450897, 4.55434894, 4.67278419, 3.84433985,
       4.8353421 , 6.08614751, 5.1637876 , 5.24431937, 4.59969845,
       3.76655681, 4.70774083, 5.70314476, 6.02084871, 5.40529957,
       4.65220932, 4.70319144, 3.85352732, 6.0860378 , 5.20469938,
       5.23844578, 5.71478686, 4.77695858, 5.18565028, 5.48596598,
       5.86019749, 4.63482437, 5.32217265, 5.71425648, 4.99788538,
       4.66188428, 4.83964427, 5.184458  , 5.67025949, 5.01604086,
       5.34165328, 4.84499766, 4.81175556, 4.27041652, 4.91956795,
       5.25383902, 4.37771892, 4.46257654, 5.18344231, 5.06122352,
       5.42854794, 4.40423119, 4.3339435 , 5.29247646, 4.33504359,
       5.32115795, 5.76856021, 5.86929767, 4.94765288, 4.08317601,
       5.40244088, 4.20772796, 4.83320461, 4.9367992 , 5.19457174,
       5.45562918, 5.3891692 , 5.03290804, 6.27288839, 4.94909501])

In [9]: d['y']
Out[9]:
array([2.97463895, 3.16328139, 3.06897269, 3.569142  , 2.90253517,
       2.94783463, 3.23048849, 3.11396979, 2.9538954 , 2.84995787,
       2.52635376, 3.02811655, 2.74124298, 3.1472435 , 3.00618091,
       3.03563486, 3.21666478, 2.88505754, 3.09229205, 2.97459015,
       2.82318258, 3.34196367, 2.97134095, 2.97325066, 2.62259226,
       3.30096821, 2.77533325, 3.05211358, 2.80248565, 2.77264216,
       2.67739569, 3.35450934, 3.32898292, 2.96500413, 2.51673335,
       3.19504084, 2.92668089, 3.41376252, 2.78277613, 3.165507  ,
       2.91113235, 2.56387755, 2.75246463, 2.79777981, 3.16697759,
       3.17768186, 3.01298036, 3.16478643, 3.04165045, 2.66220589,
       3.28452478, 3.04116477, 3.10002505, 3.37827518, 3.18819865,
       3.22706597, 3.02450525, 3.02072445, 2.89978443, 2.96429433,
       3.06017072, 2.75257943, 2.96504634, 3.14525339, 3.23386261,
       2.41641517, 2.82597278, 3.08480586, 3.03779433, 2.91380072,
       3.11806525, 3.30465826, 3.06207867, 3.39215228, 2.89270012,
       2.95923302, 2.89372305, 2.4928091 , 3.00626545, 3.66714986,
       3.01272312, 2.95488135, 3.10020632, 2.99191685, 3.00440869,
       2.94638859, 3.01250401, 3.14026308, 2.50130385, 2.68800642,
       2.69445214, 3.21936418, 3.1163849 , 3.35934884, 3.0519206 ,
       3.12924437, 3.54037583, 3.39008654, 3.38687908, 2.90723723,
       3.08398215, 3.30527264, 3.08465851, 3.18396817, 2.97814047,
       3.00256871, 2.6076818 , 2.59915329, 3.37669723, 3.12855357,
       2.93556261, 2.55563304, 2.76871739, 2.93547504, 3.068072  ,
       3.08509639, 3.22098278, 3.15125031, 3.08643304, 2.95785558,
       2.92229625, 2.87070167, 3.18281251, 2.86064676, 2.81649495,
       2.73133261, 3.16755102, 2.75593486, 2.90624337, 2.81975694,
       2.75408983, 2.74824808, 2.66598457, 2.99170794, 3.11107816,
       3.25649899, 2.65982324, 2.89120867, 2.99764247, 3.00332404,
       3.021997  , 3.4599064 , 2.7821346 , 2.74089607, 3.15857423,
       3.3560093 , 3.32659738, 2.9977623 , 2.58980507, 2.8534064 ,
       3.21876097, 2.96153928, 2.92042387, 3.03222068, 3.12306003,
       2.96271976, 2.96432718, 2.83051305, 3.16168664, 3.10807604,
       3.11259538, 2.97322547, 3.04449003, 2.92335157, 2.9258331 ,
       2.80028611, 2.98928343, 2.89574123, 3.22245459, 3.4241544 ,
       2.85003212, 2.55246059, 2.68466779, 3.36314392, 2.23316   ,
       2.91913582, 2.8905192 , 3.11648372, 3.2434438 , 3.09542046,
       2.81272123, 2.6297644 , 2.75082508, 2.85029269, 2.51083719,
       3.20803552, 2.7425953 , 2.89064495, 2.77402822, 2.7146714 ,
       2.75087   , 2.86354384, 2.90220741, 3.18403228, 2.62276341,
       3.19831899, 3.40511691, 2.6519319 , 3.04948722, 2.74202748,
       3.35124545, 2.72076938, 2.98455355, 3.09880705, 2.94854237,
       2.82436403, 2.74967294, 2.64309812, 2.86284671, 2.80549412,
       2.46095019, 2.86265985, 2.72929995, 2.85709942, 2.92743272,
       3.21410484, 2.98204299, 2.53198975, 2.89936987, 2.70698369,
       3.3088734 , 2.55633195, 3.17694139, 3.27136814, 3.31311304,
       3.25421467, 2.96493388, 2.62991244, 3.11741802, 2.8596006 ,
       3.30730946, 2.76964334, 3.07830302, 2.72665749, 3.05338081,
       3.2554517 , 2.98101741, 3.25096641, 3.06958374, 2.64758465,
       3.40956582, 2.94590446, 2.84273531, 2.91659974, 2.85715755,
       2.90409979, 3.46421824, 3.23795763, 2.78439708, 3.29340251,
       3.41367071, 3.24366278, 2.6763042 , 2.64701281, 3.2218103 ,
       3.08906866, 2.71975826, 3.43672594, 3.25656004, 3.0447019 ,
       3.14037629, 3.21722667, 2.96683946, 3.19266429, 3.23844245,
       2.98808461, 2.6739543 , 3.73152815, 3.63291743, 2.69601175,
       3.07235688, 2.85378233, 3.19813354, 3.13844378, 2.8318121 ,
       3.12504274, 3.1931631 , 3.17794485, 2.73398618, 3.13361258,
       2.96456131, 3.42947856, 3.63873149, 2.84829169, 2.66533393,
       2.90513703, 3.49189276, 3.04969579, 3.14114686, 2.93763252,
       3.06817368, 3.22061986, 3.22570129, 2.96503309, 3.01412294,
       3.14125255, 3.01642208, 3.05945586, 2.94214856, 2.88914799,
       2.38113234, 2.8961694 , 2.68659001, 2.84267938, 2.77595526,
       2.94969402, 2.76222634, 2.88143274, 2.83599705, 3.21077958,
       2.90385333, 3.22114489, 3.25016891, 3.20683804, 2.95822484,
       3.05385029, 3.04997351, 2.74321561, 3.06518787, 2.9842132 ,
       2.74532354, 3.52928687, 2.64593742, 2.7161072 , 3.22581759,
       3.0515084 , 3.070855  , 3.50431725, 3.38242469, 3.37912869,
       2.90166393, 3.20601199, 2.78876889, 2.69179213, 2.8918518 ,
       2.83913759, 2.9226792 , 2.83125068, 2.72755972, 2.94743691,
       3.38191191, 2.96644657, 3.39501631, 2.77107236, 3.40820174,
       3.06753013, 3.14875878, 2.65301742, 3.05823384, 3.18248841,
       3.13789704, 2.43663148, 2.74498539, 3.11920699, 3.07599545,
       3.04489223, 2.83774206, 3.3725755 , 3.27013874, 2.59953853,
       3.12708338, 3.38616578, 2.6853391 , 3.00118706, 2.85836705,
       2.27137895, 3.46515951, 2.91781876, 2.80166696, 2.91931552,
       2.89369897, 3.37451991, 2.95952725, 2.72913111, 3.15436315,
       2.57788155, 2.71730549, 2.72761958, 2.70547843, 3.37113771,
       3.05145725, 3.22954845, 2.87499229, 2.88584796, 2.8314238 ,
       2.85778609, 3.13441815, 3.53289354, 3.22587856, 2.59103955,
       2.7080576 , 3.04402465, 3.66092005, 3.23885462, 2.79041682,
       3.1517194 , 2.89971554, 2.83080581, 3.0527091 , 2.40357665,
       2.83358545, 2.58272758, 2.83831001, 2.70208715, 3.06351853,
       3.32163958, 2.84696979, 3.10602451, 2.94090396, 2.92891614,
       2.95056864, 2.99843327, 3.22355881, 2.83487834, 2.733122  ,
       2.89676118, 2.812167  , 3.2739427 , 3.32950421, 3.39085323,
       3.07436733, 2.79301521, 2.99230632, 2.78285212, 2.78520598,
       3.01668062, 2.85786696, 2.76508272, 2.5376603 , 3.31414146,
       2.84569284, 3.01666341, 3.61715198, 3.15123691, 2.90589157,
       2.84364693, 2.80254264, 2.86202007, 2.56154752, 2.9949491 ,
       2.94124894, 3.12530756, 2.38361017, 2.89979063, 3.33322714,
       2.97832607, 2.7626117 , 3.27671013, 3.0713013 , 2.49744958,
       2.90358981, 2.6789977 , 2.49704213, 3.03471487, 2.98883874,
       2.94306139, 3.11380105, 2.88259257, 2.81001173, 3.11184672,
       3.43889607, 2.79054467, 3.23675874, 3.11297286, 3.21244125,
       3.47548518, 3.25926699, 2.75492937, 3.06070526, 2.78272207,
       3.17096881, 2.87272577, 3.27122061, 2.85079963, 3.15693283,
       3.10259975, 2.97155211, 3.50296532, 3.01184747, 2.55331451,
       3.36938773, 3.00486776, 3.60040852, 3.17518878, 3.29547148,
       2.69829701, 3.02452993, 3.23977149, 2.70871432, 3.25965355,
       3.01363519, 3.18681054, 3.16662393, 3.08352843, 2.67491894,
       3.10538201, 3.29231406, 2.81554629, 3.04076283, 3.10882601,
       2.8925528 , 2.80939968, 3.01420148, 2.96410342, 3.11499892,
       2.83203844, 3.04244595, 2.69183383, 2.73081185, 2.80124189,
       3.26944694, 3.09982518, 2.96751561, 3.23145285, 3.40719553,
       2.50143953, 2.86703179, 3.14495026, 2.83248766, 2.63148609,
       2.61753276, 3.11742702, 3.12584123, 2.53510153, 2.67607453,
       3.39398863, 2.83222913, 2.98004982, 3.28847279, 2.97251165,
       2.72874676, 3.04002945, 3.0461813 , 3.21554322, 3.15029376,
       3.2638308 , 3.20105903, 2.67894515, 3.09408345, 3.02414741,
       3.13530447, 2.98581329, 3.26438383, 2.88366008, 3.83439474,
       3.36605073, 3.21074526, 2.8256318 , 3.26894295, 2.85575077,
       2.70485254, 3.27719209, 3.03352832, 3.3568232 , 3.1258126 ,
       2.88848149, 2.78817145, 3.03215214, 3.10731906, 3.54205737,
       2.84916815, 3.05435897, 3.34521563, 2.98055463, 3.15157973,
       2.9440232 , 2.71502256, 3.33602871, 2.34789901, 2.67876174,
       3.28476225, 2.9002967 , 2.91680991, 2.68597844, 3.21285796,
       2.85709918, 2.99903103, 3.21842825, 3.2141382 , 3.01977013,
       3.11720697, 3.12817586, 2.69503812, 2.71482527, 2.84658961,
       3.30990382, 2.67401489, 2.31462262, 3.31172128, 3.08757133,
       2.82934853, 2.92814736, 3.2218311 , 3.4703933 , 2.77762584,
       3.39107502, 2.75812716, 2.57051412, 2.97802615, 2.58139375,
       2.79095728, 3.08693219, 2.94924256, 3.27099655, 3.23861914,
       3.21343337, 3.02257719, 2.93165753, 3.17249684, 3.50909145,
       2.77910855, 3.32446927, 2.76062899, 3.06607021, 3.08957409,
       3.25374553, 3.10564569, 3.01828167, 3.42178077, 3.23159573,
       2.99966322, 2.80215657, 2.88893643, 3.26795692, 2.45131096,
       2.96601183, 3.04474033, 2.74184875, 3.05320447, 3.23537959,
       2.70375127, 3.19396894, 3.19149644, 3.18711809, 3.07079899,
       3.28535993, 3.30171733, 3.50422202, 2.76593925, 2.857604  ,
       2.59627637, 2.65570861, 2.61071359, 2.99194654, 3.17412972,
       3.07316052, 3.01441565, 3.42318017, 3.58839609, 3.16096651,
       2.81385583, 2.92998466, 3.1044718 , 2.7970122 , 3.16057803,
       2.94410783, 3.08681135, 2.66741122, 2.92350058, 2.78775591,
       2.85739263, 3.148506  , 2.77610874, 2.36236352, 2.9745117 ,
       3.00034836, 3.06374717, 3.22416359, 2.99552638, 3.29480582,
       2.709285  , 2.51686452, 3.22938491, 2.81819201, 3.03887517,
       3.13422992, 2.85002953, 3.33632577, 2.89991745, 3.1150582 ,
       3.10321073, 3.01575359, 3.26436819, 3.31290387, 3.08389452,
       3.08121194, 2.98830708, 2.85783689, 3.3717972 , 2.82833443,
       3.10454403, 3.05631959, 3.05967011, 2.99390612, 3.01193726,
       2.9668189 , 2.94852007, 2.93681164, 3.13008549, 2.72762713,
       3.09684181, 2.85157515, 3.10199893, 3.34430852, 3.13299993,
       2.93193192, 3.30281083, 3.39030577, 2.90200634, 2.87596713,
       2.93631848, 2.88645754, 2.74302459, 2.78075999, 3.29378013,
       3.00150333, 3.14779875, 2.9089023 , 3.10945503, 3.09455722,
       2.717203  , 3.28703678, 3.17338304, 3.05159536, 2.74645187,
       3.00225835, 3.19483975, 2.59316298, 2.81345525, 2.3940734 ,
       2.88363325, 2.16872108, 3.28696135, 3.03952786, 3.16723229,
       3.27648352, 2.71712824, 2.94673324, 3.30702914, 2.79110062,
       2.73253866, 3.05425943, 2.91437525, 2.96944159, 2.88383578,
       3.25679227, 2.520673  , 2.98684965, 3.52515142, 3.23606327,
       2.89788678, 3.14922971, 3.3135897 , 2.94409305, 2.63302226,
       3.00137584, 3.1038504 , 3.43675569, 3.24987021, 2.69756249,
       3.36222834, 3.10442203, 3.16471978, 3.26582044, 3.10048312,
       3.08015866, 3.06974254, 3.62337575, 3.33426805, 2.46754017,
       3.045747  , 3.12202946, 3.06952193, 2.69825727, 2.91181749,
       3.11654859, 3.45859088, 3.055339  , 3.08296058, 3.25484291,
       2.77186327, 3.54755934, 3.39427035, 3.25357183, 3.01067753,
       3.03067121, 3.1667178 , 3.12818846, 2.21036283, 2.67109504,
       2.85213799, 2.8554368 , 2.86373043, 3.20084497, 3.37966024,
       3.21450907, 2.94142255, 2.89929518, 3.12766209, 3.05580836,
       3.08277153, 3.09866204, 2.41075748, 2.93095655, 3.0422572 ,
       2.96733239, 3.12389481, 2.95181592, 2.65976987, 2.85476948,
       3.03437221, 3.23787195, 2.77292727, 2.66604846, 3.08117573,
       3.38549454, 2.79634841, 3.5010018 , 2.76487399, 3.58441114,
       2.98658614, 3.00389602, 2.6941158 , 2.83286653, 2.39369012,
       3.12060913, 3.39634738, 2.66265467, 2.6719343 , 3.41001716,
       2.68892867, 2.81609858, 2.81653151, 2.96938717, 3.09441086,
       2.85031866, 2.96344336, 2.89381541, 3.07394737, 2.82977904,
       3.05430164, 3.04465625, 2.8573066 , 2.75436161, 2.6250042 ,
       2.60524796, 2.62038247, 3.01593328, 2.718343  , 3.18557624,
       2.80966555, 2.73385598, 2.57231984, 2.88190873, 3.21857325,
       2.50047387, 2.84091346, 2.77226956, 2.78325125, 2.47945664,
       2.74389612, 2.60415467, 2.45750239, 3.06586865, 3.03774996,
       2.79196011, 3.24516478, 2.95243248, 2.66828924, 3.12443701,
       3.32144857, 2.79585287, 2.90878774, 2.16102652, 2.50410165,
       2.89064938, 2.69275647, 3.29010084, 2.98439699, 3.28696239,
       3.20504491, 3.28650539, 2.88828578, 2.40960545, 2.95114531,
       2.57062948, 2.87988421, 3.08207536, 2.88236176, 2.81997908,
       2.79268595, 2.94962502, 2.45431907, 3.05956819, 2.75293134,
       3.12985444, 3.45846135, 2.63480718, 3.0003143 , 3.19545261,
       2.6078326 , 3.32808353, 2.88769158, 2.94527037, 3.06884055,
       2.72303547, 3.26373505, 2.86553493, 3.02431363, 3.26883649,
       2.60901501, 3.17523886, 3.55790014, 2.81430908, 3.17056118,
       3.10539784, 3.21617758, 2.94280434, 2.92201248, 3.05857396,
       2.76921039, 3.07071327, 3.22960697, 3.29947905, 3.10787276,
       2.91519744, 3.11561696, 3.08056127, 3.24774268, 2.64089144,
       2.95925347, 2.85124409, 3.1207341 , 3.51627016, 3.06245824,
       3.08066758, 3.07954311, 2.61994733, 3.16764199, 3.02016765,
       3.28217152, 3.14544754, 2.73652197, 3.05586369, 3.0675403 ,
       3.01875769, 2.89478897, 3.3775542 , 2.68307153, 3.07170606,
       3.11575673, 2.85742874, 2.8842995 , 2.90233429, 3.29042847,
       3.2307794 , 2.75218432, 2.48451398, 3.35813859, 2.87442884,
       2.82360049, 2.98930169, 3.19570637, 3.24296515, 3.20050203,
       2.92521662, 2.90682194, 3.34646286, 2.92677424, 2.98467072,
       2.92533118, 2.84240541, 2.77435132, 2.77996124, 2.72930558,
       2.7494357 , 3.25586925, 2.89901121, 3.24759431, 3.12760598,
       2.97224597, 3.20717795, 3.27216971, 3.34887515, 2.95084293,
       3.17610216, 2.75051332, 3.11152373, 3.18825319, 3.1018485 ,
       2.58612446, 3.25673937, 2.64319436, 3.02387556, 3.12077227,
       2.75856891, 3.15146408, 3.30468879, 3.11267899, 3.07376392])

In [10]: t, x, y = d['t'], d['x'], d['y']

In [11]: [1,2,3] - [4,5,6]
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-11-0b697c66ddc1> in <module>
----> 1 [1,2,3] - [4,5,6]

TypeError: unsupported operand type(s) for -: 'list' and 'list'
> <ipython-input-11-0b697c66ddc1>(1)<module>()
----> 1 [1,2,3] - [4,5,6]

ipdb> c

In [12]: absd = absdiff(x, y)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-12-5b678a777fc1> in <module>
----> 1 absd = absdiff(x, y)

NameError: name 'absdiff' is not defined
> <ipython-input-12-5b678a777fc1>(1)<module>()
----> 1 absd = absdiff(x, y)

ipdb> c

In [13]: def absdiff(a, b):
    ...:     """Return the absolute difference between a and b"""
    ...:     a = np.asarray(a)
    ...:     b = np.asarray(b)
    ...:     return abs(a - b)
    ...:

In [14]: absd = absdiff(x, y)

In [15]: x.shape
Out[15]: (1000,)

In [16]: y.shape
Out[16]: (1000,)

In [17]: absd.shape
Out[17]: (1000,)

In [18]: absdiff(x, np.arange(10))
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-18-bd0acb27bf7d> in <module>
----> 1 absdiff(x, np.arange(10))

<ipython-input-13-2590cd12b5a6> in absdiff(a, b)
      3     a = np.asarray(a)
      4     b = np.asarray(b)
----> 5     return abs(a - b)
      6

ValueError: operands could not be broadcast together with shapes (1000,) (10,)
> <ipython-input-13-2590cd12b5a6>(5)absdiff()
      2     """Return the absolute difference between a and b"""
      3     a = np.asarray(a)
      4     b = np.asarray(b)
----> 5     return abs(a - b)
      6

ipdb> c

In [19]: absd = absdiff(x, y)

In [20]: f, ax = plt.subplots()

In [21]: ax.plot(t, x, marker='', label='x')
Out[21]: [<matplotlib.lines.Line2D at 0x7f8ff8300748>]

In [22]: ax.plot(t, y, marker='', label='y')
Out[22]: [<matplotlib.lines.Line2D at 0x7f8ff8324fd0>]

In [23]: ax.plot(t, absd, marker='', label='absd')
Out[23]: [<matplotlib.lines.Line2D at 0x7f9021356da0>]

In [24]: ax.set_xlabel('Time (s)')
    ...: ax.set_ylabel('Position (cm)')
    ...: ax.set_title('Time series')
Out[24]: Text(0.5, 1, 'Time series')

In [25]: ax.legend()
Out[25]: <matplotlib.legend.Legend at 0x7f8ff83247f0>

In [26]: f.savefig('time_series.png')

In [27]: f.show()

In [28]: f2, ax2 = plt.subplots()
    ...:

In [29]: bins = np.arange(0, 7.5, 0.1)

In [30]: bins
Out[30]:
array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.2,
       1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. , 2.1, 2.2, 2.3, 2.4, 2.5,
       2.6, 2.7, 2.8, 2.9, 3. , 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8,
       3.9, 4. , 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5. , 5.1,
       5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6. , 6.1, 6.2, 6.3, 6.4,
       6.5, 6.6, 6.7, 6.8, 6.9, 7. , 7.1, 7.2, 7.3, 7.4])

In [31]: bins = np.arange(0, 7.5+0.1, 0.1)

In [32]: bins
Out[32]:
array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.2,
       1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. , 2.1, 2.2, 2.3, 2.4, 2.5,
       2.6, 2.7, 2.8, 2.9, 3. , 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8,
       3.9, 4. , 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5. , 5.1,
       5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6. , 6.1, 6.2, 6.3, 6.4,
       6.5, 6.6, 6.7, 6.8, 6.9, 7. , 7.1, 7.2, 7.3, 7.4, 7.5])

In [33]: ax2.hist(x, bins=bins, label='x')
    ...:
Out[33]:
(array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  1.,  3.,  7.,
        12., 10., 26., 26., 29., 41., 52., 56., 68., 70., 83., 75., 83.,
        75., 67., 43., 42., 34., 29., 21., 12., 18.,  3.,  6.,  3.,  2.,
         0.,  1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]),
 array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.2,
        1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. , 2.1, 2.2, 2.3, 2.4, 2.5,
        2.6, 2.7, 2.8, 2.9, 3. , 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8,
        3.9, 4. , 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5. , 5.1,
        5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6. , 6.1, 6.2, 6.3, 6.4,
        6.5, 6.6, 6.7, 6.8, 6.9, 7. , 7.1, 7.2, 7.3, 7.4, 7.5]),
 <a list of 75 Patch objects>)

In [34]: ax2.hist(y, bins=bins, label='y')
Out[34]:
(array([  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   2.,
          3.,   7.,  15.,  31.,  63., 105., 133., 140., 150., 131., 109.,
         64.,  22.,  16.,   7.,   1.,   1.,   0.,   0.,   0.,   0.,   0.,
          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.]),
 array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.2,
        1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. , 2.1, 2.2, 2.3, 2.4, 2.5,
        2.6, 2.7, 2.8, 2.9, 3. , 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8,
        3.9, 4. , 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5. , 5.1,
        5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6. , 6.1, 6.2, 6.3, 6.4,
        6.5, 6.6, 6.7, 6.8, 6.9, 7. , 7.1, 7.2, 7.3, 7.4, 7.5]),
 <a list of 75 Patch objects>)

In [35]: ax2.hist(absd, bins=bins, label='absd')
Out[35]:
(array([ 0.,  0.,  0.,  0.,  2.,  1.,  2.,  7.,  5., 11., 20., 29., 33.,
        28., 36., 67., 54., 55., 65., 69., 64., 71., 64., 75., 57., 39.,
        33., 28., 18., 19.,  9., 11., 10., 11.,  2.,  2.,  0.,  1.,  1.,
         0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,
         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]),
 array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.2,
        1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2. , 2.1, 2.2, 2.3, 2.4, 2.5,
        2.6, 2.7, 2.8, 2.9, 3. , 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8,
        3.9, 4. , 4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8, 4.9, 5. , 5.1,
        5.2, 5.3, 5.4, 5.5, 5.6, 5.7, 5.8, 5.9, 6. , 6.1, 6.2, 6.3, 6.4,
        6.5, 6.6, 6.7, 6.8, 6.9, 7. , 7.1, 7.2, 7.3, 7.4, 7.5]),
 <a list of 75 Patch objects>)

In [36]: ax2.set_xlabel('Position (cm)')
    ...: ax2.set_title('Distributions')
    ...: ax2.legend()
    ...:
Out[36]: <matplotlib.legend.Legend at 0x7f8ff8361278>

In [37]: ax2.hist?

In [38]: f2.savefig('distributions.png')

In [39]: np.savez('t_absd.npz', t=t, absd=absd)

In [40]: ls
distributions.png  homework4.pdf           student_solutions/
homework4.md       homework4_samples.py    t_absd.npz
homework4.npz      homework4_solutions.py  time_series.png

In [41]: a
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-41-3f786850e387> in <module>
----> 1 a

NameError: name 'a' is not defined
> <ipython-input-41-3f786850e387>(1)<module>()
----> 1 a

ipdb> c

In [42]: x
Out[42]:
array([3.94362515, 5.84270326, 4.39117254, 6.36281471, 4.43228374,
       5.19457018, 5.72034936, 4.48991012, 5.10128753, 5.20099049,
       4.49841193, 5.15507246, 4.97334956, 5.26699879, 4.96555672,
       3.98252022, 4.69769095, 4.37998003, 5.13845914, 4.53654422,
       4.84336492, 5.16246475, 4.50880392, 5.44545474, 4.95058598,
       4.82060759, 5.70213801, 5.28980271, 3.98647678, 5.18971978,
       5.61143873, 5.46621862, 5.64418488, 5.12864545, 5.03199724,
       5.94397537, 6.40592249, 3.99240585, 4.69402129, 5.36111546,
       3.98068776, 4.89870199, 6.09930295, 5.71565584, 4.64882499,
       5.15286902, 4.71283166, 4.83795223, 5.33250879, 4.70438035,
       5.01797295, 5.19152469, 4.57310913, 5.11466552, 4.71154115,
       5.45720107, 6.08173871, 5.30042187, 5.22156077, 5.03066689,
       5.24498377, 4.82584673, 4.45493402, 4.67832714, 5.30073525,
       5.56287596, 4.78488495, 4.88632057, 5.13968134, 4.18200933,
       4.64942982, 4.46964969, 4.50363255, 5.25241004, 4.88727249,
       5.43617882, 4.68962941, 4.55205796, 4.49949837, 4.78762876,
       4.28334801, 5.08803021, 6.60432568, 4.95076621, 5.31678524,
       5.40856389, 4.56404146, 4.79481296, 4.17684079, 5.1754849 ,
       5.1676418 , 5.14756073, 4.99876595, 4.57579204, 5.25198508,
       4.57664479, 5.35911258, 6.22048184, 5.52917855, 4.58737483,
       6.0142675 , 5.01333075, 5.11586013, 4.76126642, 4.87932225,
       5.40332485, 3.70118223, 4.70298855, 4.29297674, 5.19592348,
       5.08917862, 5.08408223, 5.01371058, 4.48044009, 5.44141677,
       4.61220338, 5.09745016, 4.92064047, 5.51251385, 5.09450629,
       5.09764733, 5.12431364, 4.78900687, 5.62027024, 4.02159551,
       4.88172135, 5.21797417, 4.32224082, 5.51523339, 5.17134941,
       4.98802411, 5.47550015, 4.97158703, 4.61889115, 4.69495149,
       5.88416412, 5.01922996, 4.73354903, 4.82656679, 4.59158268,
       5.41062856, 4.45940292, 5.13643227, 5.32547237, 4.4823475 ,
       5.2193246 , 5.36185282, 4.54567937, 5.80863714, 5.42667535,
       5.74639846, 5.43211416, 4.39681192, 3.83120576, 5.3399107 ,
       5.21551691, 4.93402994, 4.20531599, 5.28036269, 4.80315226,
       4.45514166, 5.61902614, 4.44331044, 5.31005977, 5.18022879,
       4.18698026, 4.60592684, 5.12291594, 5.08437401, 5.55255601,
       5.17782104, 5.18026777, 4.69844275, 4.72957241, 5.3828204 ,
       5.4175657 , 4.36353939, 4.18508118, 4.37314714, 5.18076789,
       5.49828201, 6.0016327 , 5.08421157, 4.91380324, 5.49356864,
       4.94349285, 5.47759848, 4.33465881, 4.41171635, 5.42218464,
       5.06655191, 4.65929396, 5.21117058, 5.2019459 , 5.12905705,
       5.26721247, 5.37255761, 5.89890677, 5.3060179 , 4.74197265,
       5.76399253, 4.9672227 , 5.2929389 , 5.33714109, 5.33844602,
       4.46117205, 5.42141766, 4.59012013, 6.09229624, 5.64967531,
       4.92252491, 4.94759729, 4.48691948, 4.78324976, 3.98814798,
       5.18496857, 5.31003189, 5.26999639, 4.78161809, 5.0641812 ,
       4.57358783, 5.42601538, 4.35476094, 6.38389529, 4.93023542,
       4.39032824, 5.33181397, 4.96904223, 5.26538937, 4.60628859,
       5.39535406, 5.90306639, 4.74626529, 4.78374643, 5.236542  ,
       5.35463095, 5.66814374, 5.20639639, 6.11090388, 4.5911035 ,
       5.38356021, 5.0605228 , 4.99665157, 5.099586  , 4.25974301,
       4.43946377, 5.67671567, 4.80703441, 4.78779606, 5.37459431,
       5.73684212, 5.21668144, 5.12035102, 4.82406126, 5.36783777,
       5.17994878, 4.4401385 , 4.85179917, 4.97080291, 4.78309373,
       4.54008709, 5.03265066, 4.56144977, 5.97196097, 4.80160242,
       4.55790268, 4.84667674, 5.59966363, 4.53858314, 5.06951168,
       4.86858987, 4.42473159, 5.10716012, 4.73031685, 5.67786395,
       5.29321056, 5.87557418, 4.45820073, 5.090329  , 5.25989171,
       4.45268061, 5.08471337, 5.02813016, 5.84312431, 4.98332373,
       5.16519361, 5.11346491, 5.23506368, 4.69716038, 4.69416608,
       4.51259405, 4.81302547, 4.39583958, 4.94413316, 4.83013787,
       5.03655979, 6.06103536, 5.25576594, 5.26191524, 4.73906414,
       4.65202123, 5.25427782, 6.07771474, 5.16834787, 4.15868057,
       5.19212989, 4.8412646 , 5.19783474, 5.53482994, 3.93410184,
       5.08196015, 4.25976847, 4.0184751 , 4.26267962, 5.11400812,
       4.92542568, 4.8575669 , 4.801142  , 4.21721347, 5.63768892,
       5.2245216 , 5.22254775, 5.16096984, 4.9270214 , 4.81731344,
       4.25434093, 5.36219732, 5.19459525, 5.91531242, 4.93163815,
       4.74231086, 4.56186243, 5.06275426, 4.89911285, 4.99624158,
       4.96228505, 5.21754138, 4.42726653, 4.67462999, 6.06266993,
       5.60560314, 4.9230828 , 5.74805296, 4.62541185, 5.37472389,
       5.83562145, 4.36298968, 5.35202859, 4.51538136, 5.33632228,
       4.55546476, 3.81523436, 4.79838206, 4.37869435, 5.75924754,
       5.23706028, 5.53497625, 4.65019703, 4.44782032, 5.10365246,
       4.74397836, 4.4699703 , 6.78431008, 4.51265365, 4.31235813,
       5.40154652, 5.82411583, 5.28512316, 5.05774686, 4.98621602,
       5.24048975, 4.96121261, 4.50418624, 5.23735486, 5.28466709,
       4.88689666, 5.66904368, 4.94910352, 5.408734  , 5.66362146,
       4.97857506, 5.17899277, 5.35733453, 4.99507591, 5.17387281,
       5.24852132, 4.06311898, 4.62830661, 3.95387299, 5.95423291,
       5.77548093, 5.08547608, 4.73613712, 4.85720639, 4.81744332,
       5.11380579, 4.50055092, 6.01231144, 5.54697581, 5.10792768,
       4.78134039, 5.99501558, 5.09394206, 4.77998604, 4.16427094,
       5.15947353, 5.0662201 , 4.34509179, 5.67573429, 5.16266905,
       4.26379377, 5.47277004, 5.32436267, 5.30950086, 5.59809234,
       5.62302684, 4.03981251, 4.27881312, 5.01522192, 4.2875247 ,
       4.1651158 , 5.00012702, 5.48834387, 5.36140462, 4.59143336,
       5.58008719, 4.88330715, 5.0627665 , 5.38512791, 4.82681215,
       4.12700795, 4.10366361, 5.44239236, 3.63002705, 5.75803198,
       4.19083132, 5.3848751 , 5.19496974, 3.83679582, 6.01302813,
       6.18872624, 5.60304424, 5.51053888, 5.37929421, 5.46810483,
       5.27316045, 5.22101134, 5.55493215, 4.96951381, 4.10556265,
       4.95039939, 4.89764044, 5.83113509, 4.93552723, 5.43451587,
       5.71614449, 4.88054165, 5.74342045, 4.96260234, 5.57516125,
       4.58066629, 4.99234758, 4.66875194, 5.690924  , 5.46250105,
       4.94972605, 5.68767006, 4.0110491 , 5.0802095 , 4.55299581,
       4.94324368, 5.26171036, 4.30677446, 6.25015748, 5.78968722,
       5.02305961, 5.02050261, 5.3655072 , 5.42107064, 4.54602073,
       4.83718447, 4.90134745, 4.97678272, 5.13071786, 5.02447241,
       4.61292523, 4.49932124, 5.33886197, 4.74141796, 4.80620149,
       5.00864244, 5.52795411, 4.40809666, 5.51791752, 3.85989117,
       4.8589279 , 5.22800222, 4.1016432 , 4.81368358, 4.65651759,
       4.7604872 , 4.78071869, 6.34073849, 3.7524372 , 4.09064303,
       4.51124039, 4.13626989, 5.11689642, 6.02068715, 5.49998432,
       4.63434824, 5.13238209, 5.14994977, 4.68215563, 4.64213491,
       5.8538603 , 4.57573302, 4.71446537, 5.70849337, 4.97776708,
       4.84610823, 3.99224636, 5.59016701, 5.18678854, 6.21336856,
       5.22585461, 5.34230541, 4.52269823, 4.92485913, 4.57412073,
       5.07335507, 4.79097669, 5.57867974, 4.75978273, 5.63912413,
       4.66627157, 4.31086396, 5.581597  , 4.72828269, 5.06667122,
       4.96443297, 5.26512979, 4.53435223, 4.30122529, 5.0873754 ,
       4.95471186, 5.56162539, 4.82439673, 5.00386121, 3.973295  ,
       5.20121632, 5.50438905, 5.09129658, 4.53136194, 4.76068645,
       5.17127831, 4.91152468, 4.19989582, 5.5326502 , 5.23520901,
       4.66470328, 4.83546059, 3.97205024, 5.03899444, 5.80668704,
       4.64162606, 4.7821459 , 4.62456115, 4.06033933, 5.28458196,
       5.81498651, 4.47620989, 5.83752227, 5.16245499, 5.35181048,
       4.86546537, 5.506145  , 4.97372324, 4.398827  , 4.10463414,
       4.97290095, 5.10535413, 4.75723612, 5.33904061, 5.22772529,
       4.45404169, 4.99819478, 4.70181734, 5.17210417, 4.54090079,
       4.8210946 , 5.22834129, 4.79789231, 4.60090967, 5.85772776,
       5.04203781, 5.1349851 , 5.16873439, 5.52224413, 5.17270398,
       3.99548854, 5.19599272, 5.338351  , 4.84091101, 4.95083565,
       4.40964076, 4.25143098, 5.4804796 , 4.88183124, 4.78120287,
       4.33054297, 4.87375477, 5.14709502, 4.34864803, 5.76808272,
       5.24889069, 4.73660891, 5.74559119, 5.42997593, 5.04841296,
       6.22628012, 4.13699928, 5.6068744 , 4.60684989, 4.88788189,
       5.68252945, 5.31630472, 5.33038333, 4.84283935, 4.44603416,
       4.85592771, 5.90001934, 4.3390404 , 5.29138064, 4.69324575,
       4.42534914, 5.95606462, 4.7713408 , 4.78370064, 5.64424506,
       5.36304169, 4.46478704, 4.56199341, 5.05062785, 4.82057642,
       5.19164465, 5.39251826, 5.14742075, 5.88958942, 5.46192376,
       4.55810785, 5.24155093, 5.94098348, 4.64689101, 4.90941553,
       4.91369797, 5.09755826, 4.83274193, 5.53480046, 4.50102863,
       5.04511026, 4.27096346, 4.6887259 , 4.98485888, 5.08537298,
       4.89160406, 5.5805236 , 5.52250611, 4.55838049, 5.7883481 ,
       5.51756987, 5.21540518, 5.68442634, 4.89646841, 5.71336146,
       4.84029886, 5.16726375, 5.0316261 , 5.8031815 , 5.64674355,
       5.45057577, 4.96479865, 5.0665772 , 4.99829929, 5.60376252,
       5.26574986, 5.27205221, 5.0069914 , 4.87661817, 5.54219499,
       4.43255153, 5.32819959, 5.06429457, 5.35527764, 5.29050597,
       4.92116327, 5.30787907, 6.10788248, 5.11541771, 5.19100021,
       4.63972112, 4.73808802, 5.28977224, 5.21018512, 4.76925812,
       5.01461238, 5.10813825, 4.29264705, 5.50694348, 3.89502523,
       5.07921256, 5.1845846 , 5.57937645, 5.06845135, 4.98286986,
       4.83954042, 4.79523924, 4.29158098, 4.63732717, 5.23377747,
       5.01762978, 4.93993978, 5.44747211, 5.99425111, 4.17561767,
       5.58463949, 4.73773497, 5.04106624, 4.3233228 , 5.33477164,
       5.28482969, 4.43671149, 5.09149377, 4.74785714, 3.56746994,
       5.27452956, 5.39886671, 4.57076929, 4.94015759, 4.25617561,
       5.62499957, 4.27048685, 4.86320396, 5.53491169, 4.40911076,
       4.7959821 , 5.17455733, 4.81276844, 4.3835465 , 4.81275085,
       5.67655191, 5.38820707, 5.53827833, 4.9506082 , 5.01254902,
       5.28351921, 4.65567695, 5.3993048 , 5.58246532, 6.41784546,
       5.1802625 , 5.00241193, 4.89461017, 4.79517793, 5.64215621,
       5.22548989, 4.26374868, 5.35035952, 4.61169576, 5.2205033 ,
       4.74488352, 5.4273602 , 5.48704968, 5.02730464, 4.56640329,
       5.61231581, 4.91248441, 4.57996479, 5.98700229, 4.90131563,
       5.67193599, 5.96782917, 5.18143398, 5.68538516, 4.68292989,
       6.0881636 , 4.93517229, 4.44833957, 4.63611423, 5.21372572,
       4.10178262, 4.99091043, 4.92669371, 5.32321666, 4.58518005,
       4.92495015, 5.32475977, 4.97695667, 4.25245211, 5.5155031 ,
       4.7209057 , 5.0631944 , 5.61618246, 5.57138538, 5.58267108,
       4.82786341, 4.22059685, 4.66379276, 5.53660406, 4.44399767,
       4.63749024, 5.27933388, 6.02775279, 5.23506533, 5.16154097,
       5.23831996, 4.75520757, 4.13500054, 6.06947761, 5.07885766,
       4.49684407, 5.30934277, 5.06736093, 4.52069484, 6.21671777,
       5.0331226 , 5.32091712, 4.55768861, 4.09549472, 4.18489068,
       4.9229003 , 5.06552487, 4.586464  , 4.78097107, 4.42272792,
       4.37610186, 4.84072967, 4.69477141, 4.69125814, 4.19340918,
       4.66411492, 4.95771322, 4.70802287, 4.74197822, 4.99146413,
       4.99637502, 4.78708724, 4.74892874, 5.49762922, 5.54949687,
       4.77145774, 5.70870421, 5.271475  , 5.22474362, 5.03121609,
       4.96591635, 4.12196524, 5.28129791, 4.75374805, 4.19807342,
       4.52809791, 5.59072372, 5.68652718, 4.55219623, 4.81791432,
       5.66878384, 5.73289496, 4.70417519, 4.93695075, 4.88962685,
       4.67318965, 5.25535516, 4.63748524, 5.50812399, 5.30402403,
       5.71423394, 4.87466121, 4.75911084, 4.82466163, 5.11656808,
       4.78780568, 5.10425699, 4.79469661, 4.99657925, 4.11830018,
       4.34396731, 4.96147284, 4.94483929, 5.40147814, 5.31721902,
       4.76017557, 5.11257858, 4.3149258 , 4.64610932, 4.14142094,
       4.01638332, 4.52541764, 4.29136539, 5.12153432, 4.69057771,
       4.25895958, 5.80867925, 4.87863919, 4.4675869 , 5.01438089,
       4.19774728, 5.73747024, 5.342518  , 5.37586834, 4.65416032,
       5.17756608, 4.24042941, 5.34575416, 4.87365353, 4.4029035 ,
       5.70269014, 5.38329032, 4.9921666 , 5.09451472, 5.33084898,
       6.00655912, 5.2302687 , 5.11415558, 4.98474317, 5.87895691,
       5.77270398, 4.62129877, 4.22430755, 4.75541828, 5.15818916,
       5.01251663, 5.80170626, 5.10106346, 5.75647048, 4.93756154,
       5.41909101, 5.31450897, 4.55434894, 4.67278419, 3.84433985,
       4.8353421 , 6.08614751, 5.1637876 , 5.24431937, 4.59969845,
       3.76655681, 4.70774083, 5.70314476, 6.02084871, 5.40529957,
       4.65220932, 4.70319144, 3.85352732, 6.0860378 , 5.20469938,
       5.23844578, 5.71478686, 4.77695858, 5.18565028, 5.48596598,
       5.86019749, 4.63482437, 5.32217265, 5.71425648, 4.99788538,
       4.66188428, 4.83964427, 5.184458  , 5.67025949, 5.01604086,
       5.34165328, 4.84499766, 4.81175556, 4.27041652, 4.91956795,
       5.25383902, 4.37771892, 4.46257654, 5.18344231, 5.06122352,
       5.42854794, 4.40423119, 4.3339435 , 5.29247646, 4.33504359,
       5.32115795, 5.76856021, 5.86929767, 4.94765288, 4.08317601,
       5.40244088, 4.20772796, 4.83320461, 4.9367992 , 5.19457174,
       5.45562918, 5.3891692 , 5.03290804, 6.27288839, 4.94909501])

In [43]: x.shape
Out[43]: (1000,)

In [44]: x.ndim
Out[44]: 1

In [45]: [x]
Out[45]:
[array([3.94362515, 5.84270326, 4.39117254, 6.36281471, 4.43228374,
        5.19457018, 5.72034936, 4.48991012, 5.10128753, 5.20099049,
        4.49841193, 5.15507246, 4.97334956, 5.26699879, 4.96555672,
        3.98252022, 4.69769095, 4.37998003, 5.13845914, 4.53654422,
        4.84336492, 5.16246475, 4.50880392, 5.44545474, 4.95058598,
        4.82060759, 5.70213801, 5.28980271, 3.98647678, 5.18971978,
        5.61143873, 5.46621862, 5.64418488, 5.12864545, 5.03199724,
        5.94397537, 6.40592249, 3.99240585, 4.69402129, 5.36111546,
        3.98068776, 4.89870199, 6.09930295, 5.71565584, 4.64882499,
        5.15286902, 4.71283166, 4.83795223, 5.33250879, 4.70438035,
        5.01797295, 5.19152469, 4.57310913, 5.11466552, 4.71154115,
        5.45720107, 6.08173871, 5.30042187, 5.22156077, 5.03066689,
        5.24498377, 4.82584673, 4.45493402, 4.67832714, 5.30073525,
        5.56287596, 4.78488495, 4.88632057, 5.13968134, 4.18200933,
        4.64942982, 4.46964969, 4.50363255, 5.25241004, 4.88727249,
        5.43617882, 4.68962941, 4.55205796, 4.49949837, 4.78762876,
        4.28334801, 5.08803021, 6.60432568, 4.95076621, 5.31678524,
        5.40856389, 4.56404146, 4.79481296, 4.17684079, 5.1754849 ,
        5.1676418 , 5.14756073, 4.99876595, 4.57579204, 5.25198508,
        4.57664479, 5.35911258, 6.22048184, 5.52917855, 4.58737483,
        6.0142675 , 5.01333075, 5.11586013, 4.76126642, 4.87932225,
        5.40332485, 3.70118223, 4.70298855, 4.29297674, 5.19592348,
        5.08917862, 5.08408223, 5.01371058, 4.48044009, 5.44141677,
        4.61220338, 5.09745016, 4.92064047, 5.51251385, 5.09450629,
        5.09764733, 5.12431364, 4.78900687, 5.62027024, 4.02159551,
        4.88172135, 5.21797417, 4.32224082, 5.51523339, 5.17134941,
        4.98802411, 5.47550015, 4.97158703, 4.61889115, 4.69495149,
        5.88416412, 5.01922996, 4.73354903, 4.82656679, 4.59158268,
        5.41062856, 4.45940292, 5.13643227, 5.32547237, 4.4823475 ,
        5.2193246 , 5.36185282, 4.54567937, 5.80863714, 5.42667535,
        5.74639846, 5.43211416, 4.39681192, 3.83120576, 5.3399107 ,
        5.21551691, 4.93402994, 4.20531599, 5.28036269, 4.80315226,
        4.45514166, 5.61902614, 4.44331044, 5.31005977, 5.18022879,
        4.18698026, 4.60592684, 5.12291594, 5.08437401, 5.55255601,
        5.17782104, 5.18026777, 4.69844275, 4.72957241, 5.3828204 ,
        5.4175657 , 4.36353939, 4.18508118, 4.37314714, 5.18076789,
        5.49828201, 6.0016327 , 5.08421157, 4.91380324, 5.49356864,
        4.94349285, 5.47759848, 4.33465881, 4.41171635, 5.42218464,
        5.06655191, 4.65929396, 5.21117058, 5.2019459 , 5.12905705,
        5.26721247, 5.37255761, 5.89890677, 5.3060179 , 4.74197265,
        5.76399253, 4.9672227 , 5.2929389 , 5.33714109, 5.33844602,
        4.46117205, 5.42141766, 4.59012013, 6.09229624, 5.64967531,
        4.92252491, 4.94759729, 4.48691948, 4.78324976, 3.98814798,
        5.18496857, 5.31003189, 5.26999639, 4.78161809, 5.0641812 ,
        4.57358783, 5.42601538, 4.35476094, 6.38389529, 4.93023542,
        4.39032824, 5.33181397, 4.96904223, 5.26538937, 4.60628859,
        5.39535406, 5.90306639, 4.74626529, 4.78374643, 5.236542  ,
        5.35463095, 5.66814374, 5.20639639, 6.11090388, 4.5911035 ,
        5.38356021, 5.0605228 , 4.99665157, 5.099586  , 4.25974301,
        4.43946377, 5.67671567, 4.80703441, 4.78779606, 5.37459431,
        5.73684212, 5.21668144, 5.12035102, 4.82406126, 5.36783777,
        5.17994878, 4.4401385 , 4.85179917, 4.97080291, 4.78309373,
        4.54008709, 5.03265066, 4.56144977, 5.97196097, 4.80160242,
        4.55790268, 4.84667674, 5.59966363, 4.53858314, 5.06951168,
        4.86858987, 4.42473159, 5.10716012, 4.73031685, 5.67786395,
        5.29321056, 5.87557418, 4.45820073, 5.090329  , 5.25989171,
        4.45268061, 5.08471337, 5.02813016, 5.84312431, 4.98332373,
        5.16519361, 5.11346491, 5.23506368, 4.69716038, 4.69416608,
        4.51259405, 4.81302547, 4.39583958, 4.94413316, 4.83013787,
        5.03655979, 6.06103536, 5.25576594, 5.26191524, 4.73906414,
        4.65202123, 5.25427782, 6.07771474, 5.16834787, 4.15868057,
        5.19212989, 4.8412646 , 5.19783474, 5.53482994, 3.93410184,
        5.08196015, 4.25976847, 4.0184751 , 4.26267962, 5.11400812,
        4.92542568, 4.8575669 , 4.801142  , 4.21721347, 5.63768892,
        5.2245216 , 5.22254775, 5.16096984, 4.9270214 , 4.81731344,
        4.25434093, 5.36219732, 5.19459525, 5.91531242, 4.93163815,
        4.74231086, 4.56186243, 5.06275426, 4.89911285, 4.99624158,
        4.96228505, 5.21754138, 4.42726653, 4.67462999, 6.06266993,
        5.60560314, 4.9230828 , 5.74805296, 4.62541185, 5.37472389,
        5.83562145, 4.36298968, 5.35202859, 4.51538136, 5.33632228,
        4.55546476, 3.81523436, 4.79838206, 4.37869435, 5.75924754,
        5.23706028, 5.53497625, 4.65019703, 4.44782032, 5.10365246,
        4.74397836, 4.4699703 , 6.78431008, 4.51265365, 4.31235813,
        5.40154652, 5.82411583, 5.28512316, 5.05774686, 4.98621602,
        5.24048975, 4.96121261, 4.50418624, 5.23735486, 5.28466709,
        4.88689666, 5.66904368, 4.94910352, 5.408734  , 5.66362146,
        4.97857506, 5.17899277, 5.35733453, 4.99507591, 5.17387281,
        5.24852132, 4.06311898, 4.62830661, 3.95387299, 5.95423291,
        5.77548093, 5.08547608, 4.73613712, 4.85720639, 4.81744332,
        5.11380579, 4.50055092, 6.01231144, 5.54697581, 5.10792768,
        4.78134039, 5.99501558, 5.09394206, 4.77998604, 4.16427094,
        5.15947353, 5.0662201 , 4.34509179, 5.67573429, 5.16266905,
        4.26379377, 5.47277004, 5.32436267, 5.30950086, 5.59809234,
        5.62302684, 4.03981251, 4.27881312, 5.01522192, 4.2875247 ,
        4.1651158 , 5.00012702, 5.48834387, 5.36140462, 4.59143336,
        5.58008719, 4.88330715, 5.0627665 , 5.38512791, 4.82681215,
        4.12700795, 4.10366361, 5.44239236, 3.63002705, 5.75803198,
        4.19083132, 5.3848751 , 5.19496974, 3.83679582, 6.01302813,
        6.18872624, 5.60304424, 5.51053888, 5.37929421, 5.46810483,
        5.27316045, 5.22101134, 5.55493215, 4.96951381, 4.10556265,
        4.95039939, 4.89764044, 5.83113509, 4.93552723, 5.43451587,
        5.71614449, 4.88054165, 5.74342045, 4.96260234, 5.57516125,
        4.58066629, 4.99234758, 4.66875194, 5.690924  , 5.46250105,
        4.94972605, 5.68767006, 4.0110491 , 5.0802095 , 4.55299581,
        4.94324368, 5.26171036, 4.30677446, 6.25015748, 5.78968722,
        5.02305961, 5.02050261, 5.3655072 , 5.42107064, 4.54602073,
        4.83718447, 4.90134745, 4.97678272, 5.13071786, 5.02447241,
        4.61292523, 4.49932124, 5.33886197, 4.74141796, 4.80620149,
        5.00864244, 5.52795411, 4.40809666, 5.51791752, 3.85989117,
        4.8589279 , 5.22800222, 4.1016432 , 4.81368358, 4.65651759,
        4.7604872 , 4.78071869, 6.34073849, 3.7524372 , 4.09064303,
        4.51124039, 4.13626989, 5.11689642, 6.02068715, 5.49998432,
        4.63434824, 5.13238209, 5.14994977, 4.68215563, 4.64213491,
        5.8538603 , 4.57573302, 4.71446537, 5.70849337, 4.97776708,
        4.84610823, 3.99224636, 5.59016701, 5.18678854, 6.21336856,
        5.22585461, 5.34230541, 4.52269823, 4.92485913, 4.57412073,
        5.07335507, 4.79097669, 5.57867974, 4.75978273, 5.63912413,
        4.66627157, 4.31086396, 5.581597  , 4.72828269, 5.06667122,
        4.96443297, 5.26512979, 4.53435223, 4.30122529, 5.0873754 ,
        4.95471186, 5.56162539, 4.82439673, 5.00386121, 3.973295  ,
        5.20121632, 5.50438905, 5.09129658, 4.53136194, 4.76068645,
        5.17127831, 4.91152468, 4.19989582, 5.5326502 , 5.23520901,
        4.66470328, 4.83546059, 3.97205024, 5.03899444, 5.80668704,
        4.64162606, 4.7821459 , 4.62456115, 4.06033933, 5.28458196,
        5.81498651, 4.47620989, 5.83752227, 5.16245499, 5.35181048,
        4.86546537, 5.506145  , 4.97372324, 4.398827  , 4.10463414,
        4.97290095, 5.10535413, 4.75723612, 5.33904061, 5.22772529,
        4.45404169, 4.99819478, 4.70181734, 5.17210417, 4.54090079,
        4.8210946 , 5.22834129, 4.79789231, 4.60090967, 5.85772776,
        5.04203781, 5.1349851 , 5.16873439, 5.52224413, 5.17270398,
        3.99548854, 5.19599272, 5.338351  , 4.84091101, 4.95083565,
        4.40964076, 4.25143098, 5.4804796 , 4.88183124, 4.78120287,
        4.33054297, 4.87375477, 5.14709502, 4.34864803, 5.76808272,
        5.24889069, 4.73660891, 5.74559119, 5.42997593, 5.04841296,
        6.22628012, 4.13699928, 5.6068744 , 4.60684989, 4.88788189,
        5.68252945, 5.31630472, 5.33038333, 4.84283935, 4.44603416,
        4.85592771, 5.90001934, 4.3390404 , 5.29138064, 4.69324575,
        4.42534914, 5.95606462, 4.7713408 , 4.78370064, 5.64424506,
        5.36304169, 4.46478704, 4.56199341, 5.05062785, 4.82057642,
        5.19164465, 5.39251826, 5.14742075, 5.88958942, 5.46192376,
        4.55810785, 5.24155093, 5.94098348, 4.64689101, 4.90941553,
        4.91369797, 5.09755826, 4.83274193, 5.53480046, 4.50102863,
        5.04511026, 4.27096346, 4.6887259 , 4.98485888, 5.08537298,
        4.89160406, 5.5805236 , 5.52250611, 4.55838049, 5.7883481 ,
        5.51756987, 5.21540518, 5.68442634, 4.89646841, 5.71336146,
        4.84029886, 5.16726375, 5.0316261 , 5.8031815 , 5.64674355,
        5.45057577, 4.96479865, 5.0665772 , 4.99829929, 5.60376252,
        5.26574986, 5.27205221, 5.0069914 , 4.87661817, 5.54219499,
        4.43255153, 5.32819959, 5.06429457, 5.35527764, 5.29050597,
        4.92116327, 5.30787907, 6.10788248, 5.11541771, 5.19100021,
        4.63972112, 4.73808802, 5.28977224, 5.21018512, 4.76925812,
        5.01461238, 5.10813825, 4.29264705, 5.50694348, 3.89502523,
        5.07921256, 5.1845846 , 5.57937645, 5.06845135, 4.98286986,
        4.83954042, 4.79523924, 4.29158098, 4.63732717, 5.23377747,
        5.01762978, 4.93993978, 5.44747211, 5.99425111, 4.17561767,
        5.58463949, 4.73773497, 5.04106624, 4.3233228 , 5.33477164,
        5.28482969, 4.43671149, 5.09149377, 4.74785714, 3.56746994,
        5.27452956, 5.39886671, 4.57076929, 4.94015759, 4.25617561,
        5.62499957, 4.27048685, 4.86320396, 5.53491169, 4.40911076,
        4.7959821 , 5.17455733, 4.81276844, 4.3835465 , 4.81275085,
        5.67655191, 5.38820707, 5.53827833, 4.9506082 , 5.01254902,
        5.28351921, 4.65567695, 5.3993048 , 5.58246532, 6.41784546,
        5.1802625 , 5.00241193, 4.89461017, 4.79517793, 5.64215621,
        5.22548989, 4.26374868, 5.35035952, 4.61169576, 5.2205033 ,
        4.74488352, 5.4273602 , 5.48704968, 5.02730464, 4.56640329,
        5.61231581, 4.91248441, 4.57996479, 5.98700229, 4.90131563,
        5.67193599, 5.96782917, 5.18143398, 5.68538516, 4.68292989,
        6.0881636 , 4.93517229, 4.44833957, 4.63611423, 5.21372572,
        4.10178262, 4.99091043, 4.92669371, 5.32321666, 4.58518005,
        4.92495015, 5.32475977, 4.97695667, 4.25245211, 5.5155031 ,
        4.7209057 , 5.0631944 , 5.61618246, 5.57138538, 5.58267108,
        4.82786341, 4.22059685, 4.66379276, 5.53660406, 4.44399767,
        4.63749024, 5.27933388, 6.02775279, 5.23506533, 5.16154097,
        5.23831996, 4.75520757, 4.13500054, 6.06947761, 5.07885766,
        4.49684407, 5.30934277, 5.06736093, 4.52069484, 6.21671777,
        5.0331226 , 5.32091712, 4.55768861, 4.09549472, 4.18489068,
        4.9229003 , 5.06552487, 4.586464  , 4.78097107, 4.42272792,
        4.37610186, 4.84072967, 4.69477141, 4.69125814, 4.19340918,
        4.66411492, 4.95771322, 4.70802287, 4.74197822, 4.99146413,
        4.99637502, 4.78708724, 4.74892874, 5.49762922, 5.54949687,
        4.77145774, 5.70870421, 5.271475  , 5.22474362, 5.03121609,
        4.96591635, 4.12196524, 5.28129791, 4.75374805, 4.19807342,
        4.52809791, 5.59072372, 5.68652718, 4.55219623, 4.81791432,
        5.66878384, 5.73289496, 4.70417519, 4.93695075, 4.88962685,
        4.67318965, 5.25535516, 4.63748524, 5.50812399, 5.30402403,
        5.71423394, 4.87466121, 4.75911084, 4.82466163, 5.11656808,
        4.78780568, 5.10425699, 4.79469661, 4.99657925, 4.11830018,
        4.34396731, 4.96147284, 4.94483929, 5.40147814, 5.31721902,
        4.76017557, 5.11257858, 4.3149258 , 4.64610932, 4.14142094,
        4.01638332, 4.52541764, 4.29136539, 5.12153432, 4.69057771,
        4.25895958, 5.80867925, 4.87863919, 4.4675869 , 5.01438089,
        4.19774728, 5.73747024, 5.342518  , 5.37586834, 4.65416032,
        5.17756608, 4.24042941, 5.34575416, 4.87365353, 4.4029035 ,
        5.70269014, 5.38329032, 4.9921666 , 5.09451472, 5.33084898,
        6.00655912, 5.2302687 , 5.11415558, 4.98474317, 5.87895691,
        5.77270398, 4.62129877, 4.22430755, 4.75541828, 5.15818916,
        5.01251663, 5.80170626, 5.10106346, 5.75647048, 4.93756154,
        5.41909101, 5.31450897, 4.55434894, 4.67278419, 3.84433985,
        4.8353421 , 6.08614751, 5.1637876 , 5.24431937, 4.59969845,
        3.76655681, 4.70774083, 5.70314476, 6.02084871, 5.40529957,
        4.65220932, 4.70319144, 3.85352732, 6.0860378 , 5.20469938,
        5.23844578, 5.71478686, 4.77695858, 5.18565028, 5.48596598,
        5.86019749, 4.63482437, 5.32217265, 5.71425648, 4.99788538,
        4.66188428, 4.83964427, 5.184458  , 5.67025949, 5.01604086,
        5.34165328, 4.84499766, 4.81175556, 4.27041652, 4.91956795,
        5.25383902, 4.37771892, 4.46257654, 5.18344231, 5.06122352,
        5.42854794, 4.40423119, 4.3339435 , 5.29247646, 4.33504359,
        5.32115795, 5.76856021, 5.86929767, 4.94765288, 4.08317601,
        5.40244088, 4.20772796, 4.83320461, 4.9367992 , 5.19457174,
        5.45562918, 5.3891692 , 5.03290804, 6.27288839, 4.94909501])]

In [46]: type([x])
Out[46]: list

In [47]: thing = np.array([x])

In [48]: thing.shape
Out[48]: (1, 1000)

In [49]: thing.ndim
Out[49]: 2

In [50]: np.savez('t_absd.npz', t, absd)

In [51]: d = np.load('t_absd.npz')

In [52]: list(d)
Out[52]: ['arr_0', 'arr_1']

In [53]: plt.close('all')

In [54]: "scikit image"
Out[54]: 'scikit image'

In [55]: import skimage

In [56]: skimage
Out[56]: <module 'skimage' from '/usr/local/lib/python3.6/dist-packages/skimage/__init__.py'>

In [57]: scipy
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-57-ec7b2156b50e> in <module>
----> 1 scipy

NameError: name 'scipy' is not defined
> <ipython-input-57-ec7b2156b50e>(1)<module>()
----> 1 scipy

ipdb> c

In [58]: import scipy

In [59]: scipy
Out[59]: <module 'scipy' from '/usr/local/lib/python3.6/dist-packages/scipy/__init__.py'>

In [60]: import scipy.ndimage

In [61]: scipy.ndimage?

In [62]: scipy.ndimage?

In [63]: import cv
---------------------------------------------------------------------------
ModuleNotFoundError                       Traceback (most recent call last)
<ipython-input-63-91a2ffa00be2> in <module>
----> 1 import cv

ModuleNotFoundError: No module named 'cv'
> <ipython-input-63-91a2ffa00be2>(1)<module>()
----> 1 import cv

ipdb> c

In [64]: import opencv
---------------------------------------------------------------------------
ModuleNotFoundError                       Traceback (most recent call last)
<ipython-input-64-140d3f9c9adb> in <module>
----> 1 import opencv

ModuleNotFoundError: No module named 'opencv'
> <ipython-input-64-140d3f9c9adb>(1)<module>()
----> 1 import opencv

ipdb> c

In [65]: import numpy as np

In [66]: import matplotlib.pyplot as plt

In [67]: from skimage import io

In [68]: io.load?
Object `io.load` not found.

In [69]: io.imread?
Signature: io.imread(fname, as_gray=False, plugin=None, **plugin_args)
Docstring:
Load an image from file.

Parameters
----------
fname : string
    Image file name, e.g. ``test.jpg`` or URL.
as_gray : bool, optional
    If True, convert color images to gray-scale (64-bit floats).
    Images that are already in gray-scale format are not converted.
plugin : str, optional
    Name of plugin to use.  By default, the different plugins are
    tried (starting with imageio) until a suitable
    candidate is found.  If not given and fname is a tiff file, the
    tifffile plugin will be used.

Other Parameters
----------------
plugin_args : keywords
    Passed to the given plugin.

Returns
-------
img_array : ndarray
    The different color bands/channels are stored in the
    third dimension, such that a gray-image is MxN, an
    RGB-image MxNx3 and an RGBA-image MxNx4.
File:      /usr/local/lib/python3.6/dist-packages/skimage/io/_io.py
Type:      function

In [70]: ls
distributions.png  homework4.pdf           student_solutions/
homework4.md       homework4_samples.py    t_absd.npz
homework4.npz      homework4_solutions.py  time_series.png

In [71]: cd ..
/home/mspacek/SciPyCourse2021/notes

In [72]: cd 08_images/
/home/mspacek/SciPyCourse2021/notes/08_images

In [73]: ls
08_images.md   face45.png      face_gray.png  movie.avi
08_images.pdf  face_alpha.png  face.png       ohki2005.png

In [74]: faceg = io.imread('face_gray.png')

In [75]: type(faceg)
Out[75]: numpy.ndarray

In [76]: faceg.shape
Out[76]: (782, 782)

In [77]: f, ax = plt.subplots()

In [78]: im = ax.imshow(faceg)

In [79]: faceg
Out[79]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [80]: faceg.shape
Out[80]: (782, 782)

In [81]: faceg.min()
Out[81]: 0

In [82]: faceg.max()
Out[82]: 255

In [83]: ax.imshow?

In [84]: im.get_cmap().name
Out[84]: 'viridis'

In [85]: im = ax.imshow(faceg, cmap='gray')

In [86]: f.colorbar()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-86-9ab260b4cefa> in <module>
----> 1 f.colorbar()

TypeError: colorbar() missing 1 required positional argument: 'mappable'
> <ipython-input-86-9ab260b4cefa>(1)<module>()
----> 1 f.colorbar()

ipdb> c

In [87]: f.colorbar(im)
Out[87]: <matplotlib.colorbar.Colorbar at 0x7f8fa38e3518>

In [88]: faceg[:100]
Out[88]:
array([[255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [89]: faceg[:100, :100] = 0

In [90]: im = ax.imshow(faceg, cmap='gray')

In [91]: faceg[:, ::-1]
Out[91]:
array([[255, 255, 255, ...,   0,   0,   0],
       [255, 255, 255, ...,   0,   0,   0],
       [255, 255, 255, ...,   0,   0,   0],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [92]: faceg
Out[92]:
array([[  0,   0,   0, ..., 255, 255, 255],
       [  0,   0,   0, ..., 255, 255, 255],
       [  0,   0,   0, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [93]: faceg[:, ::-1]
Out[93]:
array([[255, 255, 255, ...,   0,   0,   0],
       [255, 255, 255, ...,   0,   0,   0],
       [255, 255, 255, ...,   0,   0,   0],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [94]: im = ax.imshow(faceg[:, ::-1], cmap='gray')

In [95]: im = ax.imshow(faceg, cmap='gray')

In [96]: im = ax.imshow(faceg[::-1], cmap='gray')

In [97]: np.flipud?

In [98]: np.fliplr?

In [99]: im = ax.imshow(faceg, cmap='gray')

In [100]: im = ax.imshow(np.rot90(faceg), cmap='gray')

In [101]: ndimag
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-101-beefc0c47676> in <module>
----> 1 ndimag

NameError: name 'ndimag' is not defined
> <ipython-input-101-beefc0c47676>(1)<module>()
----> 1 ndimag

ipdb> c

In [102]: ndimage
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-102-04f219d51328> in <module>
----> 1 ndimage

NameError: name 'ndimage' is not defined
> <ipython-input-102-04f219d51328>(1)<module>()
----> 1 ndimage

ipdb> c

In [103]: from scipy import ndimage

In [104]: ndimage.rotate?

In [105]: im = ax.imshow(faceg, cmap='gray')

In [106]: im = ax.imshow(ndimage.rotate(faceg, 45), cmap='gray')

In [107]: face45 = ndimage.rotate(faceg, 45)

In [108]: face45.shape
Out[108]: (1106, 1106)

In [109]: faceg.shape
Out[109]: (782, 782)

In [110]: io.imsave('face45.png', face45)

In [111]: f, ax = plt.subplots()

In [112]: faceg
Out[112]:
array([[  0,   0,   0, ..., 255, 255, 255],
       [  0,   0,   0, ..., 255, 255, 255],
       [  0,   0,   0, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [113]: faceg.shape
Out[113]: (782, 782)

In [114]: faceg[::10, ::10]
Out[114]:
array([[  0,   0,   0, ..., 255, 255, 255],
       [  0,   0,   0, ..., 255, 255, 255],
       [  0,   0,   0, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [115]: faceg[::10, ::10].shape
Out[115]: (79, 79)

In [116]: lowres = faceg[::10, ::10].shape

In [117]: ax.imshow(lowres, cmap='gray')
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-117-f7a3cc172673> in <module>
----> 1 ax.imshow(lowres, cmap='gray')

/usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py in inner(ax, data, *args, **kwargs)
   1599     def inner(ax, *args, data=None, **kwargs):
   1600         if data is None:
-> 1601             return func(ax, *map(sanitize_sequence, args), **kwargs)
   1602
   1603         bound = new_sig.bind(ax, *args, **kwargs)

/usr/local/lib/python3.6/dist-packages/matplotlib/cbook/deprecation.py in wrapper(*args, **kwargs)
    367                 f"%(removal)s.  If any parameter follows {name!r}, they "
    368                 f"should be pass as keyword, not positionally.")
--> 369         return func(*args, **kwargs)
    370
    371     return wrapper

/usr/local/lib/python3.6/dist-packages/matplotlib/cbook/deprecation.py in wrapper(*args, **kwargs)
    367                 f"%(removal)s.  If any parameter follows {name!r}, they "
    368                 f"should be pass as keyword, not positionally.")
--> 369         return func(*args, **kwargs)
    370
    371     return wrapper

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py in imshow(self, X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, shape, filternorm, filterrad, imlim, resample, url, **kwargs)
   5669                               resample=resample, **kwargs)
   5670
-> 5671         im.set_data(X)
   5672         im.set_alpha(alpha)
   5673         if im.get_clip_path() is None:

/usr/local/lib/python3.6/dist-packages/matplotlib/image.py in set_data(self, A)
    688                 or self._A.ndim == 3 and self._A.shape[-1] in [3, 4]):
    689             raise TypeError("Invalid shape {} for image data"
--> 690                             .format(self._A.shape))
    691
    692         if self._A.ndim == 3:

TypeError: Invalid shape (2,) for image data
> /usr/local/lib/python3.6/dist-packages/matplotlib/image.py(690)set_data()
    688                 or self._A.ndim == 3 and self._A.shape[-1] in [3, 4]):
    689             raise TypeError("Invalid shape {} for image data"
--> 690                             .format(self._A.shape))
    691
    692         if self._A.ndim == 3:

ipdb> c

In [118]: lowres
Out[118]: (79, 79)

In [119]: ax
Out[119]: <matplotlib.axes._subplots.AxesSubplot at 0x7f8f83648f60>

In [120]: ax.imshow(lowres, cmap='gray')
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-120-f7a3cc172673> in <module>
----> 1 ax.imshow(lowres, cmap='gray')

/usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py in inner(ax, data, *args, **kwargs)
   1599     def inner(ax, *args, data=None, **kwargs):
   1600         if data is None:
-> 1601             return func(ax, *map(sanitize_sequence, args), **kwargs)
   1602
   1603         bound = new_sig.bind(ax, *args, **kwargs)

/usr/local/lib/python3.6/dist-packages/matplotlib/cbook/deprecation.py in wrapper(*args, **kwargs)
    367                 f"%(removal)s.  If any parameter follows {name!r}, they "
    368                 f"should be pass as keyword, not positionally.")
--> 369         return func(*args, **kwargs)
    370
    371     return wrapper

/usr/local/lib/python3.6/dist-packages/matplotlib/cbook/deprecation.py in wrapper(*args, **kwargs)
    367                 f"%(removal)s.  If any parameter follows {name!r}, they "
    368                 f"should be pass as keyword, not positionally.")
--> 369         return func(*args, **kwargs)
    370
    371     return wrapper

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py in imshow(self, X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, shape, filternorm, filterrad, imlim, resample, url, **kwargs)
   5669                               resample=resample, **kwargs)
   5670
-> 5671         im.set_data(X)
   5672         im.set_alpha(alpha)
   5673         if im.get_clip_path() is None:

/usr/local/lib/python3.6/dist-packages/matplotlib/image.py in set_data(self, A)
    688                 or self._A.ndim == 3 and self._A.shape[-1] in [3, 4]):
    689             raise TypeError("Invalid shape {} for image data"
--> 690                             .format(self._A.shape))
    691
    692         if self._A.ndim == 3:

TypeError: Invalid shape (2,) for image data
> /usr/local/lib/python3.6/dist-packages/matplotlib/image.py(690)set_data()
    688                 or self._A.ndim == 3 and self._A.shape[-1] in [3, 4]):
    689             raise TypeError("Invalid shape {} for image data"
--> 690                             .format(self._A.shape))
    691
    692         if self._A.ndim == 3:

ipdb> c

In [121]: lowres = faceg[::10, ::10]

In [122]: ax.imshow(lowres, cmap='gray')
Out[122]: <matplotlib.image.AxesImage at 0x7f8f833adba8>

In [123]: ax.imshow(lowres, cmap='gray', interpolation='guassian')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-123-adf7c1515a4f> in <module>
----> 1 ax.imshow(lowres, cmap='gray', interpolation='guassian')

/usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py in inner(ax, data, *args, **kwargs)
   1599     def inner(ax, *args, data=None, **kwargs):
   1600         if data is None:
-> 1601             return func(ax, *map(sanitize_sequence, args), **kwargs)
   1602
   1603         bound = new_sig.bind(ax, *args, **kwargs)

/usr/local/lib/python3.6/dist-packages/matplotlib/cbook/deprecation.py in wrapper(*args, **kwargs)
    367                 f"%(removal)s.  If any parameter follows {name!r}, they "
    368                 f"should be pass as keyword, not positionally.")
--> 369         return func(*args, **kwargs)
    370
    371     return wrapper

/usr/local/lib/python3.6/dist-packages/matplotlib/cbook/deprecation.py in wrapper(*args, **kwargs)
    367                 f"%(removal)s.  If any parameter follows {name!r}, they "
    368                 f"should be pass as keyword, not positionally.")
--> 369         return func(*args, **kwargs)
    370
    371     return wrapper

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py in imshow(self, X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, shape, filternorm, filterrad, imlim, resample, url, **kwargs)
   5667         im = mimage.AxesImage(self, cmap, norm, interpolation, origin, extent,
   5668                               filternorm=filternorm, filterrad=filterrad,
-> 5669                               resample=resample, **kwargs)
   5670
   5671         im.set_data(X)

/usr/local/lib/python3.6/dist-packages/matplotlib/image.py in __init__(self, ax, cmap, norm, interpolation, origin, extent, filternorm, filterrad, resample, **kwargs)
    862             filterrad=filterrad,
    863             resample=resample,
--> 864             **kwargs
    865         )
    866

/usr/local/lib/python3.6/dist-packages/matplotlib/image.py in __init__(self, ax, cmap, norm, interpolation, origin, filternorm, filterrad, resample, **kwargs)
    212         self.set_filternorm(filternorm)
    213         self.set_filterrad(filterrad)
--> 214         self.set_interpolation(interpolation)
    215         self.set_resample(resample)
    216         self.axes = ax

/usr/local/lib/python3.6/dist-packages/matplotlib/image.py in set_interpolation(self, s)
    754         s = s.lower()
    755         if s not in _interpd_:
--> 756             raise ValueError('Illegal interpolation string')
    757         self._interpolation = s
    758         self.stale = True

ValueError: Illegal interpolation string
> /usr/local/lib/python3.6/dist-packages/matplotlib/image.py(756)set_interpolation()
    754         s = s.lower()
    755         if s not in _interpd_:
--> 756             raise ValueError('Illegal interpolation string')
    757         self._interpolation = s
    758         self.stale = True

ipdb> c

In [124]: ax.imshow(lowres, cmap='gray', interpolation='guass')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-124-669b42c00802> in <module>
----> 1 ax.imshow(lowres, cmap='gray', interpolation='guass')

/usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py in inner(ax, data, *args, **kwargs)
   1599     def inner(ax, *args, data=None, **kwargs):
   1600         if data is None:
-> 1601             return func(ax, *map(sanitize_sequence, args), **kwargs)
   1602
   1603         bound = new_sig.bind(ax, *args, **kwargs)

/usr/local/lib/python3.6/dist-packages/matplotlib/cbook/deprecation.py in wrapper(*args, **kwargs)
    367                 f"%(removal)s.  If any parameter follows {name!r}, they "
    368                 f"should be pass as keyword, not positionally.")
--> 369         return func(*args, **kwargs)
    370
    371     return wrapper

/usr/local/lib/python3.6/dist-packages/matplotlib/cbook/deprecation.py in wrapper(*args, **kwargs)
    367                 f"%(removal)s.  If any parameter follows {name!r}, they "
    368                 f"should be pass as keyword, not positionally.")
--> 369         return func(*args, **kwargs)
    370
    371     return wrapper

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py in imshow(self, X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, shape, filternorm, filterrad, imlim, resample, url, **kwargs)
   5667         im = mimage.AxesImage(self, cmap, norm, interpolation, origin, extent,
   5668                               filternorm=filternorm, filterrad=filterrad,
-> 5669                               resample=resample, **kwargs)
   5670
   5671         im.set_data(X)

/usr/local/lib/python3.6/dist-packages/matplotlib/image.py in __init__(self, ax, cmap, norm, interpolation, origin, extent, filternorm, filterrad, resample, **kwargs)
    862             filterrad=filterrad,
    863             resample=resample,
--> 864             **kwargs
    865         )
    866

/usr/local/lib/python3.6/dist-packages/matplotlib/image.py in __init__(self, ax, cmap, norm, interpolation, origin, filternorm, filterrad, resample, **kwargs)
    212         self.set_filternorm(filternorm)
    213         self.set_filterrad(filterrad)
--> 214         self.set_interpolation(interpolation)
    215         self.set_resample(resample)
    216         self.axes = ax

/usr/local/lib/python3.6/dist-packages/matplotlib/image.py in set_interpolation(self, s)
    754         s = s.lower()
    755         if s not in _interpd_:
--> 756             raise ValueError('Illegal interpolation string')
    757         self._interpolation = s
    758         self.stale = True

ValueError: Illegal interpolation string
> /usr/local/lib/python3.6/dist-packages/matplotlib/image.py(756)set_interpolation()
    754         s = s.lower()
    755         if s not in _interpd_:
--> 756             raise ValueError('Illegal interpolation string')
    757         self._interpolation = s
    758         self.stale = True

ipdb> c

In [125]: ax.imshow(lowres, cmap='gray', interpolation='guassian')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-125-adf7c1515a4f> in <module>
----> 1 ax.imshow(lowres, cmap='gray', interpolation='guassian')

/usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py in inner(ax, data, *args, **kwargs)
   1599     def inner(ax, *args, data=None, **kwargs):
   1600         if data is None:
-> 1601             return func(ax, *map(sanitize_sequence, args), **kwargs)
   1602
   1603         bound = new_sig.bind(ax, *args, **kwargs)

/usr/local/lib/python3.6/dist-packages/matplotlib/cbook/deprecation.py in wrapper(*args, **kwargs)
    367                 f"%(removal)s.  If any parameter follows {name!r}, they "
    368                 f"should be pass as keyword, not positionally.")
--> 369         return func(*args, **kwargs)
    370
    371     return wrapper

/usr/local/lib/python3.6/dist-packages/matplotlib/cbook/deprecation.py in wrapper(*args, **kwargs)
    367                 f"%(removal)s.  If any parameter follows {name!r}, they "
    368                 f"should be pass as keyword, not positionally.")
--> 369         return func(*args, **kwargs)
    370
    371     return wrapper

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py in imshow(self, X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, shape, filternorm, filterrad, imlim, resample, url, **kwargs)
   5667         im = mimage.AxesImage(self, cmap, norm, interpolation, origin, extent,
   5668                               filternorm=filternorm, filterrad=filterrad,
-> 5669                               resample=resample, **kwargs)
   5670
   5671         im.set_data(X)

/usr/local/lib/python3.6/dist-packages/matplotlib/image.py in __init__(self, ax, cmap, norm, interpolation, origin, extent, filternorm, filterrad, resample, **kwargs)
    862             filterrad=filterrad,
    863             resample=resample,
--> 864             **kwargs
    865         )
    866

/usr/local/lib/python3.6/dist-packages/matplotlib/image.py in __init__(self, ax, cmap, norm, interpolation, origin, filternorm, filterrad, resample, **kwargs)
    212         self.set_filternorm(filternorm)
    213         self.set_filterrad(filterrad)
--> 214         self.set_interpolation(interpolation)
    215         self.set_resample(resample)
    216         self.axes = ax

/usr/local/lib/python3.6/dist-packages/matplotlib/image.py in set_interpolation(self, s)
    754         s = s.lower()
    755         if s not in _interpd_:
--> 756             raise ValueError('Illegal interpolation string')
    757         self._interpolation = s
    758         self.stale = True

ValueError: Illegal interpolation string
> /usr/local/lib/python3.6/dist-packages/matplotlib/image.py(756)set_interpolation()
    754         s = s.lower()
    755         if s not in _interpd_:
--> 756             raise ValueError('Illegal interpolation string')
    757         self._interpolation = s
    758         self.stale = True

ipdb> c

In [126]: ax.imshow(lowres, cmap='gray', interpolation='Guassian')
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-126-4f589afab4aa> in <module>
----> 1 ax.imshow(lowres, cmap='gray', interpolation='Guassian')

/usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py in inner(ax, data, *args, **kwargs)
   1599     def inner(ax, *args, data=None, **kwargs):
   1600         if data is None:
-> 1601             return func(ax, *map(sanitize_sequence, args), **kwargs)
   1602
   1603         bound = new_sig.bind(ax, *args, **kwargs)

/usr/local/lib/python3.6/dist-packages/matplotlib/cbook/deprecation.py in wrapper(*args, **kwargs)
    367                 f"%(removal)s.  If any parameter follows {name!r}, they "
    368                 f"should be pass as keyword, not positionally.")
--> 369         return func(*args, **kwargs)
    370
    371     return wrapper

/usr/local/lib/python3.6/dist-packages/matplotlib/cbook/deprecation.py in wrapper(*args, **kwargs)
    367                 f"%(removal)s.  If any parameter follows {name!r}, they "
    368                 f"should be pass as keyword, not positionally.")
--> 369         return func(*args, **kwargs)
    370
    371     return wrapper

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py in imshow(self, X, cmap, norm, aspect, interpolation, alpha, vmin, vmax, origin, extent, shape, filternorm, filterrad, imlim, resample, url, **kwargs)
   5667         im = mimage.AxesImage(self, cmap, norm, interpolation, origin, extent,
   5668                               filternorm=filternorm, filterrad=filterrad,
-> 5669                               resample=resample, **kwargs)
   5670
   5671         im.set_data(X)

/usr/local/lib/python3.6/dist-packages/matplotlib/image.py in __init__(self, ax, cmap, norm, interpolation, origin, extent, filternorm, filterrad, resample, **kwargs)
    862             filterrad=filterrad,
    863             resample=resample,
--> 864             **kwargs
    865         )
    866

/usr/local/lib/python3.6/dist-packages/matplotlib/image.py in __init__(self, ax, cmap, norm, interpolation, origin, filternorm, filterrad, resample, **kwargs)
    212         self.set_filternorm(filternorm)
    213         self.set_filterrad(filterrad)
--> 214         self.set_interpolation(interpolation)
    215         self.set_resample(resample)
    216         self.axes = ax

/usr/local/lib/python3.6/dist-packages/matplotlib/image.py in set_interpolation(self, s)
    754         s = s.lower()
    755         if s not in _interpd_:
--> 756             raise ValueError('Illegal interpolation string')
    757         self._interpolation = s
    758         self.stale = True

ValueError: Illegal interpolation string
> /usr/local/lib/python3.6/dist-packages/matplotlib/image.py(756)set_interpolation()
    754         s = s.lower()
    755         if s not in _interpd_:
--> 756             raise ValueError('Illegal interpolation string')
    757         self._interpolation = s
    758         self.stale = True

ipdb> c

In [127]: ax.imshow(lowres, cmap='gray', interpolation='gaussian')
Out[127]: <matplotlib.image.AxesImage at 0x7f8fa3cd0f28>

In [128]: lowres
Out[128]:
array([[  0,   0,   0, ..., 255, 255, 255],
       [  0,   0,   0, ..., 255, 255, 255],
       [  0,   0,   0, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [129]: from skimage import filters

In [130]: filters.gaussian?

In [131]: lowresgauss = filters.gaussian(lowres, sigma=2)

In [132]: lowresgauss.shape
Out[132]: (79, 79)

In [133]: lowres
Out[133]:
array([[  0,   0,   0, ..., 255, 255, 255],
       [  0,   0,   0, ..., 255, 255, 255],
       [  0,   0,   0, ..., 255, 255, 255],
       ...,
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255],
       [255, 255, 255, ..., 255, 255, 255]], dtype=uint8)

In [134]: lowres.shape
Out[134]: (79, 79)

In [135]: f, ax = plt.subplots()

In [136]: ax.imshow(lowresgauss, cmap='gray')
Out[136]: <matplotlib.image.AxesImage at 0x7f8f66110cc0>

In [137]: ndimage.zoom?

In [138]: biglowresgauss = ndimage.zoom(lowresgauss, 10)

In [139]: biglowresgauss.shape
Out[139]: (790, 790)

In [140]: faceg.shape
Out[140]: (782, 782)

In [141]: f, ax = plt.subplots()

In [142]: ax.imshow(biglowresgauss, cmap='gray')
Out[142]: <matplotlib.image.AxesImage at 0x7f8f660a5390>

In [143]: from skimage import data

In [144]: moon = data.moon()

In [145]: f, ax = plt.subplots(1, 2)

In [146]: moon.min()
Out[146]: 0

In [147]: max()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-147-f870ea12a3fc> in <module>
----> 1 max()

TypeError: max expected 1 arguments, got 0
> <ipython-input-147-f870ea12a3fc>(1)<module>()
----> 1 max()

ipdb> c

In [148]: moon.max()
Out[148]: 255

In [149]: ax[0].imshow(moon, cmap='gray')
Out[149]: <matplotlib.image.AxesImage at 0x7f8fa3064978>

In [150]: ax[1].hist(moon.ravel(), bins=np.arange(0, 256+1))
Out[150]:
(array([2.4000e+02, 0.0000e+00, 6.0000e+01, 3.6000e+01, 0.0000e+00,
        6.0000e+01, 5.2000e+01, 0.0000e+00, 5.2000e+01, 0.0000e+00,
        6.0000e+01, 8.0000e+01, 0.0000e+00, 4.0000e+00, 4.4000e+01,
        0.0000e+00, 5.6000e+01, 0.0000e+00, 8.8000e+01, 7.2000e+01,
        0.0000e+00, 8.0000e+01, 7.6000e+01, 0.0000e+00, 5.2000e+01,
        6.8000e+01, 0.0000e+00, 6.4000e+01, 0.0000e+00, 8.8000e+01,
        8.0000e+01, 0.0000e+00, 7.2000e+01, 4.0000e+01, 0.0000e+00,
        7.2000e+01, 3.6000e+01, 0.0000e+00, 4.8000e+01, 6.4000e+01,
        0.0000e+00, 6.4000e+01, 4.8000e+01, 0.0000e+00, 2.8000e+01,
        7.6000e+01, 0.0000e+00, 8.4000e+01, 7.6000e+01, 8.8000e+01,
        0.0000e+00, 8.0000e+01, 1.0800e+02, 0.0000e+00, 5.2000e+01,
        7.6000e+01, 9.2000e+01, 0.0000e+00, 8.8000e+01, 1.0000e+02,
        1.0000e+02, 0.0000e+00, 1.0400e+02, 0.0000e+00, 1.3200e+02,
        1.0800e+02, 0.0000e+00, 1.4800e+02, 1.2400e+02, 1.6800e+02,
        1.6000e+02, 1.6000e+02, 0.0000e+00, 2.1200e+02, 2.0800e+02,
        1.8000e+02, 2.0000e+02, 2.6400e+02, 2.1600e+02, 2.2000e+02,
        3.1200e+02, 2.2400e+02, 2.7200e+02, 2.9600e+02, 2.8400e+02,
        3.1600e+02, 2.5200e+02, 5.3600e+02, 3.6800e+02, 4.0800e+02,
        3.7200e+02, 8.2400e+02, 3.5200e+02, 5.9600e+02, 4.5600e+02,
        8.6000e+02, 9.1600e+02, 4.0000e+02, 8.8000e+02, 9.0800e+02,
        5.8000e+02, 1.8600e+03, 1.4160e+03, 2.5640e+03, 2.0360e+03,
        3.3920e+03, 5.9280e+03, 5.7240e+03, 1.1964e+04, 1.1436e+04,
        1.6256e+04, 1.7772e+04, 2.0324e+04, 2.1444e+04, 1.7484e+04,
        2.3296e+04, 1.6144e+04, 1.2096e+04, 1.1748e+04, 9.4080e+03,
        9.0200e+03, 5.0800e+03, 5.3160e+03, 2.7760e+03, 1.3640e+03,
        2.0560e+03, 8.7200e+02, 1.2600e+03, 8.6800e+02, 3.7600e+02,
        5.5200e+02, 1.7600e+02, 4.3200e+02, 1.9200e+02, 1.5600e+02,
        2.5200e+02, 1.1200e+02, 1.3600e+02, 1.1600e+02, 1.0400e+02,
        8.8000e+01, 1.1600e+02, 1.0000e+02, 8.8000e+01, 6.0000e+01,
        1.0800e+02, 7.6000e+01, 1.1600e+02, 8.8000e+01, 7.6000e+01,
        6.8000e+01, 9.2000e+01, 7.2000e+01, 0.0000e+00, 4.4000e+01,
        6.4000e+01, 5.6000e+01, 0.0000e+00, 1.1200e+02, 7.2000e+01,
        7.6000e+01, 0.0000e+00, 9.6000e+01, 5.2000e+01, 0.0000e+00,
        0.0000e+00, 3.2000e+01, 4.4000e+01, 0.0000e+00, 4.8000e+01,
        0.0000e+00, 7.6000e+01, 2.8000e+01, 0.0000e+00, 3.6000e+01,
        3.6000e+01, 0.0000e+00, 4.4000e+01, 0.0000e+00, 2.8000e+01,
        0.0000e+00, 2.0000e+01, 5.2000e+01, 0.0000e+00, 2.0000e+01,
        0.0000e+00, 3.2000e+01, 0.0000e+00, 1.2000e+01, 0.0000e+00,
        2.0000e+01, 0.0000e+00, 1.2000e+01, 0.0000e+00, 1.2000e+01,
        0.0000e+00, 1.2000e+01, 0.0000e+00, 2.0000e+01, 0.0000e+00,
        4.0000e+00, 0.0000e+00, 2.8000e+01, 0.0000e+00, 8.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.6000e+01,
        0.0000e+00, 8.0000e+00, 0.0000e+00, 1.2000e+01, 0.0000e+00,
        0.0000e+00, 1.2000e+01, 0.0000e+00, 2.0000e+01, 0.0000e+00,
        2.8000e+01, 0.0000e+00, 0.0000e+00, 2.0000e+01, 0.0000e+00,
        1.2000e+01, 0.0000e+00, 0.0000e+00, 3.6000e+01, 0.0000e+00,
        4.8000e+01, 0.0000e+00, 0.0000e+00, 2.4000e+01, 0.0000e+00,
        2.4000e+01, 0.0000e+00, 3.6000e+01, 0.0000e+00, 0.0000e+00,
        2.4000e+01, 0.0000e+00, 1.6000e+01, 0.0000e+00, 0.0000e+00,
        1.2000e+01, 0.0000e+00, 1.6000e+01, 0.0000e+00, 0.0000e+00,
        4.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        4.0000e+00]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [151]: skimage.exposure?
Type:        module
String form: <module 'skimage.exposure' from '/usr/local/lib/python3.6/dist-packages/skimage/exposure/__init__.py'>
File:        /usr/local/lib/python3.6/dist-packages/skimage/exposure/__init__.py
Docstring:   <no docstring>

In [152]: skimage.exposure
Out[152]: <module 'skimage.exposure' from '/usr/local/lib/python3.6/dist-packages/skimage/exposure/__init__.py'>

In [153]: ls
08_images.md   face45.png      face_gray.png  movie.avi
08_images.pdf  face_alpha.png  face.png       ohki2005.png

In [154]: from skimage import io

In [155]: ohki = io.imread('ohki2005.png')

In [156]: ohki.shape
Out[156]: (512, 491)

In [157]: np.rot90(ohki, -1)
Out[157]:
array([[1, 1, 1, ..., 1, 1, 1],
       [3, 3, 3, ..., 3, 3, 3],
       [5, 5, 5, ..., 6, 6, 6],
       ...,
       [3, 5, 7, ..., 6, 6, 6],
       [0, 2, 4, ..., 4, 4, 4],
       [0, 1, 2, ..., 2, 2, 2]], dtype=uint8)

In [158]: f, ax = plt.subplots(1, 2)

In [159]: f, ax = plt.subplots()

In [160]: ax.imshow(np.rot90(ohki, -1))
Out[160]: <matplotlib.image.AxesImage at 0x7f8fe2a068d0>

In [161]: ax.imshow(np.rot90(ohki, -1), cmap='gray')
Out[161]: <matplotlib.image.AxesImage at 0x7f8fa2a85048>

In [162]: ax.imshow(np.rot90(ohki, -1), cmap='Spectral')
Out[162]: <matplotlib.image.AxesImage at 0x7f8fa2a85ac8>

In [163]: im = ax.imshow(np.rot90(ohki, -1), cmap='Spectral')

In [164]: f.colorbar(im)
Out[164]: <matplotlib.colorbar.Colorbar at 0x7f8fa2a4a518>

In [165]: im = ax.imshow(np.rot90(ohki, -1), cmap='coolwarm')

In [166]: f.colorbar(im)
Out[166]: <matplotlib.colorbar.Colorbar at 0x7f8fa2a149e8>

In [167]: im = ax.imshow(np.rot90(ohki, -1), cmap='Dark2')

In [168]: f.show()

In [169]: f, ax = plt.subplots()

In [170]: im = ax.imshow(np.rot90(ohki, -1), cmap='Dark2')

In [171]: im = ax.imshow(np.rot90(ohki, -1), cmap='Pastel1')

In [172]: f, ax = plt.subplots()

In [173]: ax.hist(ohki, bins=100)
^C
Program interrupted. (Use 'cont' to resume).
> /usr/local/lib/python3.6/dist-packages/matplotlib/transforms.py(180)set_children()
    178             ref = weakref.ref(self, lambda ref, sid=id(self),
    179                                         target=child._parents: target.pop(sid))
--> 180             child._parents[id(self)] = ref
    181
    182     if DEBUG:

ipdb> c
^C
Program interrupted. (Use 'cont' to resume).
> /usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py(811)__getitem__()
    809
    810     def __getitem__(self, key):
--> 811         if key in _deprecated_map:
    812             version, alt_key, alt_val, inverse_alt = _deprecated_map[key]
    813             cbook.warn_deprecated(

ipdb> q
---------------------------------------------------------------------------
BdbQuit                                   Traceback (most recent call last)
<ipython-input-173-aa4afbb9ef4f> in <module>
----> 1 ax.hist(ohki, bins=100)

/usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py in inner(ax, data, *args, **kwargs)
   1599     def inner(ax, *args, data=None, **kwargs):
   1600         if data is None:
-> 1601             return func(ax, *map(sanitize_sequence, args), **kwargs)
   1602
   1603         bound = new_sig.bind(ax, *args, **kwargs)

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py in hist(self, x, bins, range, density, weights, cumulative, bottom, histtype, align, orientation, rwidth, log, color, label, stacked, normed, **kwargs)
   6841                 patch = _barfunc(bins[:-1]+boffset, height, width,
   6842                                  align='center', log=log,
-> 6843                                  color=c, **{bottom_kwarg: bottom})
   6844                 patches.append(patch)
   6845                 if stacked:

/usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py in inner(ax, data, *args, **kwargs)
   1599     def inner(ax, *args, data=None, **kwargs):
   1600         if data is None:
-> 1601             return func(ax, *map(sanitize_sequence, args), **kwargs)
   1602
   1603         bound = new_sig.bind(ax, *args, **kwargs)

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py in bar(self, x, height, width, bottom, align, **kwargs)
   2436             elif orientation == 'horizontal':
   2437                 r.sticky_edges.x.append(l)
-> 2438             self.add_patch(r)
   2439             patches.append(r)
   2440

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py in add_patch(self, p)
   1969         if p.get_clip_path() is None:
   1970             p.set_clip_path(self.patch)
-> 1971         self._update_patch_limits(p)
   1972         self.patches.append(p)
   1973         p._remove_method = self.patches.remove

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py in _update_patch_limits(self, patch)
   1998                 contains_branch_seperately(self.transData)
   1999             self.update_datalim(xys, updatex=updatex,
-> 2000                                 updatey=updatey)
   2001
   2002     def add_table(self, tab):

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py in update_datalim(self, xys, updatex, updatey)
   2081             return
   2082         self.dataLim.update_from_data_xy(xys, self.ignore_existing_data_limits,
-> 2083                                          updatex=updatex, updatey=updatey)
   2084         self.ignore_existing_data_limits = False
   2085

/usr/local/lib/python3.6/dist-packages/matplotlib/transforms.py in update_from_data_xy(self, xy, ignore, updatex, updatey)
    880             return
    881
--> 882         path = Path(xy)
    883         self.update_from_path(path, ignore=ignore,
    884                               updatex=updatex, updatey=updatey)

/usr/local/lib/python3.6/dist-packages/matplotlib/path.py in __init__(self, vertices, codes, _interpolation_steps, closed, readonly)
    147         self._codes = codes
    148         self._interpolation_steps = _interpolation_steps
--> 149         self._update_values()
    150
    151         if readonly:

/usr/local/lib/python3.6/dist-packages/matplotlib/path.py in _update_values(self)
    187
    188     def _update_values(self):
--> 189         self._simplify_threshold = rcParams['path.simplify_threshold']
    190         self._should_simplify = (
    191             self._simplify_threshold > 0 and

/usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py in __getitem__(self, key)
    809
    810     def __getitem__(self, key):
--> 811         if key in _deprecated_map:
    812             version, alt_key, alt_val, inverse_alt = _deprecated_map[key]
    813             cbook.warn_deprecated(

/usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py in __getitem__(self, key)
    809
    810     def __getitem__(self, key):
--> 811         if key in _deprecated_map:
    812             version, alt_key, alt_val, inverse_alt = _deprecated_map[key]
    813             cbook.warn_deprecated(

/usr/lib/python3.6/bdb.py in trace_dispatch(self, frame, event, arg)
     49             return # None
     50         if event == 'line':
---> 51             return self.dispatch_line(frame)
     52         if event == 'call':
     53             return self.dispatch_call(frame, arg)

/usr/lib/python3.6/bdb.py in dispatch_line(self, frame)
     68         if self.stop_here(frame) or self.break_here(frame):
     69             self.user_line(frame)
---> 70             if self.quitting: raise BdbQuit
     71         return self.trace_dispatch
     72

BdbQuit:
> /usr/lib/python3.6/bdb.py(70)dispatch_line()
     68         if self.stop_here(frame) or self.break_here(frame):
     69             self.user_line(frame)
---> 70             if self.quitting: raise BdbQuit
     71         return self.trace_dispatch
     72

ipdb> c

In [174]: f, ax = plt.subplots()

In [175]: ax.hist(ohki.ravel(), bins=100)
Out[175]:
(array([1.900e+02, 6.550e+02, 9.360e+02, 3.584e+03, 4.010e+03, 7.525e+03,
        5.494e+03, 7.439e+03, 3.880e+03, 6.987e+03, 8.571e+03, 5.607e+03,
        8.215e+03, 4.890e+03, 7.406e+03, 4.732e+03, 7.502e+03, 5.176e+03,
        7.388e+03, 4.852e+03, 7.072e+03, 7.056e+03, 4.515e+03, 6.688e+03,
        4.302e+03, 6.522e+03, 4.269e+03, 6.664e+03, 4.547e+03, 6.580e+03,
        6.376e+03, 4.180e+03, 5.895e+03, 3.693e+03, 5.396e+03, 3.446e+03,
        5.081e+03, 3.278e+03, 4.771e+03, 2.965e+03, 4.301e+03, 3.921e+03,
        2.588e+03, 3.554e+03, 2.191e+03, 2.998e+03, 1.888e+03, 2.451e+03,
        1.385e+03, 1.867e+03, 1.589e+03, 9.770e+02, 1.354e+03, 8.940e+02,
        1.116e+03, 6.200e+02, 8.670e+02, 4.770e+02, 6.580e+02, 4.040e+02,
        5.810e+02, 6.110e+02, 3.530e+02, 4.890e+02, 2.860e+02, 4.140e+02,
        2.740e+02, 3.490e+02, 2.110e+02, 3.020e+02, 2.600e+02, 1.580e+02,
        1.950e+02, 1.300e+02, 1.950e+02, 1.280e+02, 1.560e+02, 9.000e+01,
        1.370e+02, 1.000e+02, 1.290e+02, 1.220e+02, 8.500e+01, 1.350e+02,
        1.050e+02, 1.910e+02, 1.060e+02, 1.320e+02, 9.600e+01, 1.040e+02,
        9.200e+01, 5.600e+01, 2.700e+01, 5.000e+00, 1.100e+01, 1.400e+01,
        1.400e+01, 2.000e+01, 4.900e+01, 4.500e+01]),
 array([  0.  ,   2.55,   5.1 ,   7.65,  10.2 ,  12.75,  15.3 ,  17.85,
         20.4 ,  22.95,  25.5 ,  28.05,  30.6 ,  33.15,  35.7 ,  38.25,
         40.8 ,  43.35,  45.9 ,  48.45,  51.  ,  53.55,  56.1 ,  58.65,
         61.2 ,  63.75,  66.3 ,  68.85,  71.4 ,  73.95,  76.5 ,  79.05,
         81.6 ,  84.15,  86.7 ,  89.25,  91.8 ,  94.35,  96.9 ,  99.45,
        102.  , 104.55, 107.1 , 109.65, 112.2 , 114.75, 117.3 , 119.85,
        122.4 , 124.95, 127.5 , 130.05, 132.6 , 135.15, 137.7 , 140.25,
        142.8 , 145.35, 147.9 , 150.45, 153.  , 155.55, 158.1 , 160.65,
        163.2 , 165.75, 168.3 , 170.85, 173.4 , 175.95, 178.5 , 181.05,
        183.6 , 186.15, 188.7 , 191.25, 193.8 , 196.35, 198.9 , 201.45,
        204.  , 206.55, 209.1 , 211.65, 214.2 , 216.75, 219.3 , 221.85,
        224.4 , 226.95, 229.5 , 232.05, 234.6 , 237.15, 239.7 , 242.25,
        244.8 , 247.35, 249.9 , 252.45, 255.  ]),
 <a list of 100 Patch objects>)

In [176]: ohki
Out[176]:
array([[1, 3, 6, ..., 6, 4, 2],
       [1, 3, 6, ..., 6, 4, 2],
       [1, 3, 6, ..., 6, 4, 2],
       ...,
       [1, 3, 5, ..., 7, 4, 2],
       [1, 3, 5, ..., 5, 2, 1],
       [1, 3, 5, ..., 3, 0, 0]], dtype=uint8)

In [177]: ohki + 50
Out[177]:
array([[51, 53, 56, ..., 56, 54, 52],
       [51, 53, 56, ..., 56, 54, 52],
       [51, 53, 56, ..., 56, 54, 52],
       ...,
       [51, 53, 55, ..., 57, 54, 52],
       [51, 53, 55, ..., 55, 52, 51],
       [51, 53, 55, ..., 53, 50, 50]], dtype=uint8)

In [178]: ohki.max()
Out[178]: 255

In [179]: ohki.argmax()
Out[179]: 140169

In [180]: f, ax = plt.subplots()

In [181]: ax.imshow(ohki+50, cmap='gray')
Out[181]: <matplotlib.image.AxesImage at 0x7f8f5dce97b8>

In [182]: f, ax = plt.subplots()

In [183]: ax.imshow(ohki, cmap='gray')
Out[183]: <matplotlib.image.AxesImage at 0x7f8f5dccbeb8>

In [184]: ax.imshow(np.uint16(ohki+50), cmap='gray')
Out[184]: <matplotlib.image.AxesImage at 0x7f8f5da725c0>

In [185]: f, ax = plt.subplots()

In [186]: ax.imshow(np.uint16(ohki+50), cmap='gray')
Out[186]: <matplotlib.image.AxesImage at 0x7f8f5d985f28>

In [187]: ax.imshow(np.uint16(ohki+50), cmap='gray', vmax=1000)
Out[187]: <matplotlib.image.AxesImage at 0x7f8f5d9954e0>

In [188]: f, ax = plt.subplots()

In [189]: ax.hist((ohki+50).ravel(), cmap='gray')
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-189-e123665b07d0> in <module>
----> 1 ax.hist((ohki+50).ravel(), cmap='gray')

/usr/local/lib/python3.6/dist-packages/matplotlib/__init__.py in inner(ax, data, *args, **kwargs)
   1599     def inner(ax, *args, data=None, **kwargs):
   1600         if data is None:
-> 1601             return func(ax, *map(sanitize_sequence, args), **kwargs)
   1602
   1603         bound = new_sig.bind(ax, *args, **kwargs)

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py in hist(self, x, bins, range, density, weights, cumulative, bottom, histtype, align, orientation, rwidth, log, color, label, stacked, normed, **kwargs)
   6955             if patch:
   6956                 p = patch[0]
-> 6957                 p.update(kwargs)
   6958                 if lbl is not None:
   6959                     p.set_label(lbl)

/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py in update(self, props)
    972
    973         with cbook._setattr_cm(self, eventson=False):
--> 974             ret = [_update_property(self, k, v) for k, v in props.items()]
    975
    976         if len(ret):

/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py in <listcomp>(.0)
    972
    973         with cbook._setattr_cm(self, eventson=False):
--> 974             ret = [_update_property(self, k, v) for k, v in props.items()]
    975
    976         if len(ret):

/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py in _update_property(self, k, v)
    968                 if not callable(func):
    969                     raise AttributeError('{!r} object has no property {!r}'
--> 970                                          .format(type(self).__name__, k))
    971                 return func(v)
    972

AttributeError: 'Rectangle' object has no property 'cmap'
> /usr/local/lib/python3.6/dist-packages/matplotlib/artist.py(970)_update_property()
    968                 if not callable(func):
    969                     raise AttributeError('{!r} object has no property {!r}'
--> 970                                          .format(type(self).__name__, k))
    971                 return func(v)
    972

ipdb> c

In [190]: ax.hist((ohki+50).ravel())
Out[190]:
(array([ 1190.,   281., 43479., 64010., 57891., 44379., 26256.,  8578.,
         3783.,  1545.]),
 array([  0. ,  25.5,  51. ,  76.5, 102. , 127.5, 153. , 178.5, 204. ,
        229.5, 255. ]),
 <a list of 10 Patch objects>)

In [191]: ax.hist((ohki+50).ravel(), bins=100)
Out[191]:
(array([1.300e+02, 1.260e+02, 8.900e+01, 1.510e+02, 1.120e+02, 1.850e+02,
        9.600e+01, 1.320e+02, 7.400e+01, 9.500e+01, 8.300e+01, 2.200e+01,
        1.000e+01, 7.000e+00, 1.800e+01, 1.000e+01, 2.400e+01, 3.200e+01,
        5.900e+01, 1.600e+01, 3.240e+02, 8.160e+02, 1.420e+03, 4.863e+03,
        5.213e+03, 7.110e+03, 5.344e+03, 6.678e+03, 4.015e+03, 7.696e+03,
        8.591e+03, 5.643e+03, 7.846e+03, 4.980e+03, 7.089e+03, 5.002e+03,
        7.589e+03, 5.037e+03, 7.357e+03, 4.876e+03, 7.035e+03, 6.909e+03,
        4.558e+03, 6.477e+03, 4.306e+03, 6.535e+03, 4.334e+03, 6.752e+03,
        4.499e+03, 6.486e+03, 6.351e+03, 4.067e+03, 5.758e+03, 3.622e+03,
        5.273e+03, 3.492e+03, 4.994e+03, 3.282e+03, 4.580e+03, 2.960e+03,
        4.224e+03, 3.924e+03, 2.444e+03, 3.406e+03, 2.150e+03, 2.929e+03,
        1.792e+03, 2.278e+03, 1.373e+03, 1.736e+03, 1.536e+03, 9.420e+02,
        1.315e+03, 8.910e+02, 1.012e+03, 6.290e+02, 7.990e+02, 4.830e+02,
        5.880e+02, 3.830e+02, 6.320e+02, 5.750e+02, 3.490e+02, 4.330e+02,
        3.070e+02, 4.010e+02, 2.640e+02, 3.280e+02, 2.030e+02, 2.910e+02,
        2.610e+02, 1.210e+02, 2.040e+02, 1.280e+02, 2.020e+02, 1.170e+02,
        1.490e+02, 8.700e+01, 1.370e+02, 1.390e+02]),
 array([  0.  ,   2.55,   5.1 ,   7.65,  10.2 ,  12.75,  15.3 ,  17.85,
         20.4 ,  22.95,  25.5 ,  28.05,  30.6 ,  33.15,  35.7 ,  38.25,
         40.8 ,  43.35,  45.9 ,  48.45,  51.  ,  53.55,  56.1 ,  58.65,
         61.2 ,  63.75,  66.3 ,  68.85,  71.4 ,  73.95,  76.5 ,  79.05,
         81.6 ,  84.15,  86.7 ,  89.25,  91.8 ,  94.35,  96.9 ,  99.45,
        102.  , 104.55, 107.1 , 109.65, 112.2 , 114.75, 117.3 , 119.85,
        122.4 , 124.95, 127.5 , 130.05, 132.6 , 135.15, 137.7 , 140.25,
        142.8 , 145.35, 147.9 , 150.45, 153.  , 155.55, 158.1 , 160.65,
        163.2 , 165.75, 168.3 , 170.85, 173.4 , 175.95, 178.5 , 181.05,
        183.6 , 186.15, 188.7 , 191.25, 193.8 , 196.35, 198.9 , 201.45,
        204.  , 206.55, 209.1 , 211.65, 214.2 , 216.75, 219.3 , 221.85,
        224.4 , 226.95, 229.5 , 232.05, 234.6 , 237.15, 239.7 , 242.25,
        244.8 , 247.35, 249.9 , 252.45, 255.  ]),
 <a list of 100 Patch objects>)

In [192]: f, ax = plt.subplots()

In [193]: ax.hist((ohki+50).ravel(), bins=100)
Out[193]:
(array([1.300e+02, 1.260e+02, 8.900e+01, 1.510e+02, 1.120e+02, 1.850e+02,
        9.600e+01, 1.320e+02, 7.400e+01, 9.500e+01, 8.300e+01, 2.200e+01,
        1.000e+01, 7.000e+00, 1.800e+01, 1.000e+01, 2.400e+01, 3.200e+01,
        5.900e+01, 1.600e+01, 3.240e+02, 8.160e+02, 1.420e+03, 4.863e+03,
        5.213e+03, 7.110e+03, 5.344e+03, 6.678e+03, 4.015e+03, 7.696e+03,
        8.591e+03, 5.643e+03, 7.846e+03, 4.980e+03, 7.089e+03, 5.002e+03,
        7.589e+03, 5.037e+03, 7.357e+03, 4.876e+03, 7.035e+03, 6.909e+03,
        4.558e+03, 6.477e+03, 4.306e+03, 6.535e+03, 4.334e+03, 6.752e+03,
        4.499e+03, 6.486e+03, 6.351e+03, 4.067e+03, 5.758e+03, 3.622e+03,
        5.273e+03, 3.492e+03, 4.994e+03, 3.282e+03, 4.580e+03, 2.960e+03,
        4.224e+03, 3.924e+03, 2.444e+03, 3.406e+03, 2.150e+03, 2.929e+03,
        1.792e+03, 2.278e+03, 1.373e+03, 1.736e+03, 1.536e+03, 9.420e+02,
        1.315e+03, 8.910e+02, 1.012e+03, 6.290e+02, 7.990e+02, 4.830e+02,
        5.880e+02, 3.830e+02, 6.320e+02, 5.750e+02, 3.490e+02, 4.330e+02,
        3.070e+02, 4.010e+02, 2.640e+02, 3.280e+02, 2.030e+02, 2.910e+02,
        2.610e+02, 1.210e+02, 2.040e+02, 1.280e+02, 2.020e+02, 1.170e+02,
        1.490e+02, 8.700e+01, 1.370e+02, 1.390e+02]),
 array([  0.  ,   2.55,   5.1 ,   7.65,  10.2 ,  12.75,  15.3 ,  17.85,
         20.4 ,  22.95,  25.5 ,  28.05,  30.6 ,  33.15,  35.7 ,  38.25,
         40.8 ,  43.35,  45.9 ,  48.45,  51.  ,  53.55,  56.1 ,  58.65,
         61.2 ,  63.75,  66.3 ,  68.85,  71.4 ,  73.95,  76.5 ,  79.05,
         81.6 ,  84.15,  86.7 ,  89.25,  91.8 ,  94.35,  96.9 ,  99.45,
        102.  , 104.55, 107.1 , 109.65, 112.2 , 114.75, 117.3 , 119.85,
        122.4 , 124.95, 127.5 , 130.05, 132.6 , 135.15, 137.7 , 140.25,
        142.8 , 145.35, 147.9 , 150.45, 153.  , 155.55, 158.1 , 160.65,
        163.2 , 165.75, 168.3 , 170.85, 173.4 , 175.95, 178.5 , 181.05,
        183.6 , 186.15, 188.7 , 191.25, 193.8 , 196.35, 198.9 , 201.45,
        204.  , 206.55, 209.1 , 211.65, 214.2 , 216.75, 219.3 , 221.85,
        224.4 , 226.95, 229.5 , 232.05, 234.6 , 237.15, 239.7 , 242.25,
        244.8 , 247.35, 249.9 , 252.45, 255.  ]),
 <a list of 100 Patch objects>)

In [194]: from skimage import exposure

In [195]: ohki.max()
Out[195]: 255

In [196]: ohki.min()
Out[196]: 0

In [197]: exposure?
Type:        module
String form: <module 'skimage.exposure' from '/usr/local/lib/python3.6/dist-packages/skimage/exposure/__init__.py'>
File:        /usr/local/lib/python3.6/dist-packages/skimage/exposure/__init__.py
Docstring:   <no docstring>

In [198]: exposure.rescale_intensity?

In [199]: ohki3 = exposure.rescale_intensity(ohki, (0, 255))

In [200]: f, ax = plt.subplots()

In [201]: ax.imshow(ohki3, cmap='gray')
Out[201]: <matplotlib.image.AxesImage at 0x7f8f5ac61e48>

In [202]: f, ax = plt.subplots()

In [203]: ax.imshow(ohki, cmap='gray')
Out[203]: <matplotlib.image.AxesImage at 0x7f8f5abd80b8>

In [204]: ohki3 = exposure.rescale_intensity(ohki, (100, 150))

In [205]: ax.imshow(ohki3, cmap='gray')
Out[205]: <matplotlib.image.AxesImage at 0x7f8f5e5daba8>

In [206]: ohki.shape
Out[206]: (512, 491)

In [207]: subset = ohki[200:350, 200:350]

In [208]: subset.shape
Out[208]: (150, 150)

In [209]: f, ax = plt.subplots()

In [210]: ax.imshow(subset, cmap='gray')
Out[210]: <matplotlib.image.AxesImage at 0x7f8f5efdfe80>

In [211]: f, ax = plt.subplots()

In [212]: ax.hist(subset.ravel(), bins=np.arange(0, 256+1))
Out[212]:
(array([  0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
          0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
          0.,   0.,   0.,   0.,   1.,   0.,   0.,   4.,   4.,   3.,   8.,
          6.,   9.,  11.,  11.,  16.,  10.,  13.,  12.,  21.,  36.,  38.,
         59.,  62., 114., 134., 149., 153., 168., 180., 227., 240., 278.,
        242., 311., 257., 279., 325., 293., 343., 356., 424., 451., 418.,
        470., 485., 441., 462., 414., 444., 421., 436., 432., 418., 397.,
        366., 342., 396., 353., 387., 327., 345., 284., 291., 295., 328.,
        295., 347., 287., 290., 329., 275., 261., 252., 250., 204., 215.,
        188., 204., 166., 157., 152., 151., 154., 122., 129., 102., 110.,
         90.,  87.,  81.,  91.,  77.,  91.,  84.,  90.,  84.,  66.,  76.,
         81.,  81.,  66.,  61.,  66.,  67.,  63.,  69.,  53.,  63.,  63.,
         59.,  68.,  61.,  60.,  52.,  55.,  33.,  65.,  37.,  43.,  29.,
         40.,  50.,  45.,  30.,  43.,  47.,  44.,  31.,  46.,  32.,  48.,
         35.,  38.,  47.,  38.,  37.,  28.,  30.,  32.,  10.,  14.,  11.,
          9.,  19.,  12.,  13.,  12.,  12.,  12.,  12.,   6.,  18.,  13.,
         10.,  18.,   7.,  16.,  11.,  10.,  10.,  14.,  15.,  10.,   9.,
          8.,  10.,  13.,  19.,   8.,  12.,  11.,   9.,  10.,  11.,  12.,
         11.,  15.,   8.,  16.,   9.,   7.,  13.,   6.,   2.,   1.,   2.,
          4.,   4.,   7.,   7.,   3.,   6.,   4.,   0.,   3.,   2.,   5.,
          4.,   8.,   6.,   3.,   7.,   4.,  10.,  10.,  10.,  22.,  17.,
         16.,  26.,   3.]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [213]: subset.shape
Out[213]: (150, 150)

In [214]: ndimage.zoom?

In [215]: subset2 = ndimage.zoom(subset, 2)

In [216]: subset.shape
Out[216]: (150, 150)

In [217]: subset2.shape
Out[217]: (300, 300)

In [218]: f, ax = plt.subplots()

In [219]: ax.hist(subset2.ravel(), bins=np.arange(0, 256+1))
Out[219]:
(array([   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
           0.,    0.,    0.,    2.,    3.,    2.,   12.,   12.,   16.,
          31.,   29.,   36.,   53.,   37.,   47.,   31.,   55.,   68.,
          84.,  128.,  173.,  216.,  257.,  410.,  507.,  603.,  632.,
         644.,  765.,  900.,  940., 1052., 1093., 1117., 1057., 1174.,
        1202., 1243., 1339., 1526., 1656., 1743., 1733., 1773., 1930.,
        1868., 1787., 1718., 1708., 1737., 1814., 1701., 1616., 1564.,
        1473., 1503., 1468., 1542., 1451., 1270., 1310., 1239., 1194.,
        1192., 1245., 1284., 1273., 1204., 1204., 1254., 1147., 1026.,
         925.,  956.,  943.,  847.,  740.,  787.,  700.,  639.,  643.,
         550.,  543.,  518.,  530.,  462.,  403.,  369.,  375.,  351.,
         333.,  335.,  333.,  354.,  372.,  310.,  311.,  300.,  297.,
         265.,  263.,  275.,  258.,  278.,  285.,  257.,  260.,  226.,
         227.,  242.,  240.,  245.,  243.,  218.,  229.,  187.,  181.,
         180.,  160.,  164.,  148.,  174.,  148.,  163.,  164.,  173.,
         153.,  151.,  162.,  160.,  168.,  170.,  149.,  159.,  174.,
         141.,  107.,  114.,  125.,   74.,   54.,   54.,   49.,   59.,
          53.,   47.,   49.,   47.,   45.,   37.,   45.,   52.,   43.,
          52.,   41.,   54.,   39.,   41.,   53.,   36.,   58.,   47.,
          65.,   54.,   42.,   51.,   53.,   45.,   35.,   41.,   42.,
          44.,   48.,   39.,   48.,   48.,   50.,   44.,   46.,   33.,
          43.,   39.,   29.,   19.,   18.,   13.,   12.,   15.,   13.,
          13.,   16.,   14.,   17.,   15.,   17.,   13.,   24.,   16.,
          20.,   21.,   21.,   22.,   31.,   24.,   31.,   61.,   82.,
          61.,   81.,   94.,   13.]),
 array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,
         13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,
         26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,
         39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,
         52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
         65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,
         78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,
         91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101, 102, 103,
        104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129,
        130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
        143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
        156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
        169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
        182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194,
        195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207,
        208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
        221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233,
        234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
        247, 248, 249, 250, 251, 252, 253, 254, 255, 256]),
 <a list of 256 Patch objects>)

In [220]: plt.close('all')

In [221]: facec = io.imread('face.png')

In [222]: facec.shape
Out[222]: (782, 782, 3)

In [223]: f, ax = plt.subplots()

In [224]: ax.imshow(facec)
Out[224]: <matplotlib.image.AxesImage at 0x7f8f5be0e048>

In [225]: ax.imshow(facec, cmap='gray')
Out[225]: <matplotlib.image.AxesImage at 0x7f8f5be349b0>

In [226]: from skimage import data

In [227]: immun = data.immunohistochemistry()

In [228]: immun.shape
Out[228]: (512, 512, 3)

In [229]: f, ax = plt.subplots()

In [230]: ax.imshow(immun)
Out[230]: <matplotlib.image.AxesImage at 0x7f8f5bbc8780>

In [231]: temp = immun.copy()

In [232]: temp.shape
Out[232]: (512, 512, 3)

In [233]: temp[:, :, 0]
Out[233]:
array([[156, 163, 156, ..., 152, 169, 189],
       [141, 144, 141, ..., 164, 167, 175],
       [125, 132, 138, ..., 172, 164, 164],
       ...,
       [221, 226, 234, ..., 212, 214, 217],
       [217, 222, 230, ..., 214, 211, 215],
       [222, 222, 224, ..., 210, 210, 215]], dtype=uint8)

In [234]: temp[:, :, 0] = 0

In [235]: f, ax = plt.subplots()

In [236]: ax.imshow(temp)
Out[236]: <matplotlib.image.AxesImage at 0x7f8f5b9426a0>

In [237]: temp[:, :, 1]
Out[237]:
array([[118, 125, 116, ..., 160, 175, 196],
       [105, 108, 102, ..., 172, 173, 182],
       [ 92,  99, 103, ..., 181, 171, 171],
       ...,
       [218, 223, 231, ..., 211, 210, 213],
       [214, 219, 227, ..., 213, 207, 210],
       [219, 219, 221, ..., 209, 205, 210]], dtype=uint8)

In [238]: temp[:, :, 1] = 0

In [239]: f, ax = plt.subplots()

In [240]: ax.imshow(temp)
Out[240]: <matplotlib.image.AxesImage at 0x7f8f5b88dcf8>

In [241]: from skimage import color

In [242]: immung = color.rgb2gray(immun)

In [243]: f, ax = plt.subplots()

In [244]: ax.imshow(immung)
Out[244]: <matplotlib.image.AxesImage at 0x7f8f5a770588>

In [245]: immung.shape
Out[245]: (512, 512)

In [246]: ax.imshow(immung, cmap='gray')
Out[246]: <matplotlib.image.AxesImage at 0x7f8f5a7174e0>

In [247]: immun.shape
Out[247]: (512, 512, 3)

In [248]:
