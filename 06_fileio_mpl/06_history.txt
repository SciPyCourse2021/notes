
mspacek@Godel:~/SciPyCourse2021/notes/homework3$ ipython
Python 3.6.9 (default, Jan 26 2021, 15:33:00)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.10.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: x1 = [ 0.00000000e+00,  2.93892626e+00,  4.75528258e+00,  4.755282
   ...: 58e+00,
   ...:        2.93892626e+00,  6.12323400e-16, -2.93892626e+00, -4.755282
   ...: 58e+00,
   ...:       -4.75528258e+00, -2.93892626e+00, -1.22464680e-15,  2.938926
   ...: 26e+00,
   ...:                np.nan,  4.75528258e+00,  2.93892626e+00,  1.836970
   ...: 20e-15,
   ...:       -2.93892626e+00, -4.75528258e+00, -4.75528258e+00,
   ...: np.nan]
   ...:
   ...: x2 = [ 0,  2,  3, -1,  6,  7,  8,  9, 10, 10, 10, 10, -1,  9,  8,
   ...:  7,  6,  5,  3,  2]
   ...:
   ...: t = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9,
   ...:      1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9] # seconds

In [2]: x1, x2, t = np.array(x1), np.array(x2), np.array(t)
   ...: y = x1 * x2

In [3]: np.isnan(x1)
Out[3]:
array([False, False, False, False, False, False, False, False, False,
       False, False, False,  True, False, False, False, False, False,
       False,  True])

In [4]: (x2 == -1)
Out[4]:
array([False, False, False,  True, False, False, False, False, False,
       False, False, False,  True, False, False, False, False, False,
       False, False])

In [5]: invalidis = np.isnan(x1) | (x2 == -1)

In [6]: invalidis
Out[6]:
array([False, False, False,  True, False, False, False, False, False,
       False, False, False,  True, False, False, False, False, False,
       False,  True])

In [7]: keepis = ~invalidis

In [8]: keepis
Out[8]:
array([ True,  True,  True, False,  True,  True,  True,  True,  True,
        True,  True,  True, False,  True,  True,  True,  True,  True,
        True, False])

In [9]: x1, x2, t = x1[keepis], x2[keepis], t[keepis]

In [10]: x1
Out[10]:
array([ 0.00000000e+00,  2.93892626e+00,  4.75528258e+00,  2.93892626e+00,
        6.12323400e-16, -2.93892626e+00, -4.75528258e+00, -4.75528258e+00,
       -2.93892626e+00, -1.22464680e-15,  2.93892626e+00,  4.75528258e+00,
        2.93892626e+00,  1.83697020e-15, -2.93892626e+00, -4.75528258e+00,
       -4.75528258e+00])

In [11]: x2
Out[11]: array([ 0,  2,  3,  6,  7,  8,  9, 10, 10, 10, 10,  9,  8,  7,  6,  5,  3])

In [12]: t
Out[12]:
array([0. , 0.1, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. , 1.1, 1.3, 1.4,
       1.5, 1.6, 1.7, 1.8])

In [13]: len(x1)
Out[13]: 17

In [14]: len(x2)
Out[14]: 17

In [15]: len(t)
Out[15]: 17

In [16]: y = x1 * x2

In [17]: len(y)
Out[17]: 17

In [18]: x2.argmax()
Out[18]: 7

In [19]: i = x2.argmax()

In [20]: i
Out[20]: 7

In [21]: x1[i]
Out[21]: -4.75528258

In [22]: x2[i]
Out[22]: 10

In [23]: t[i]
Out[23]: 0.8

In [24]: x2
Out[24]: array([ 0,  2,  3,  6,  7,  8,  9, 10, 10, 10, 10,  9,  8,  7,  6,  5,  3])

In [25]: x2 == 10
Out[25]:
array([False, False, False, False, False, False, False,  True,  True,
        True,  True, False, False, False, False, False, False])

In [26]: np.where(x2 == 10)[0]
Out[26]: array([ 7,  8,  9, 10])

In [27]: np.argmax?

In [28]: np.multiply?

In [29]: np.nan == np.nan
Out[29]: False

In [30]: j = np.where(~np.isnan(x1))[0]

In [31]: j
Out[31]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16])

In [32]: ii = np.where(x2 >= 0) [0]

In [33]: j
Out[33]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16])

In [34]: x1
Out[34]:
array([ 0.00000000e+00,  2.93892626e+00,  4.75528258e+00,  2.93892626e+00,
        6.12323400e-16, -2.93892626e+00, -4.75528258e+00, -4.75528258e+00,
       -2.93892626e+00, -1.22464680e-15,  2.93892626e+00,  4.75528258e+00,
        2.93892626e+00,  1.83697020e-15, -2.93892626e+00, -4.75528258e+00,
       -4.75528258e+00])

In [35]: x1 = [ 0.00000000e+00,  2.93892626e+00,  4.75528258e+00,  4.75528
    ...: 258e+00,
    ...:        2.93892626e+00,  6.12323400e-16, -2.93892626e+00, -4.75528
    ...: 258e+00,
    ...:       -4.75528258e+00, -2.93892626e+00, -1.22464680e-15,  2.93892
    ...: 626e+00,
    ...:                np.nan,  4.75528258e+00,  2.93892626e+00,  1.83697
    ...: 020e-15,
    ...:       -2.93892626e+00, -4.75528258e+00, -4.75528258e+00,
    ...:  np.nan]
    ...:
    ...: x2 = [ 0,  2,  3, -1,  6,  7,  8,  9, 10, 10, 10, 10, -1,  9,  8,
    ...:   7,  6,  5,  3,  2]
    ...:
    ...: t = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9,
    ...:      1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9] # seconds

In [36]:     x1, x2, t = np.array(x1), np.array(x2), np.array(t)

In [37]: j = np.where(~np.isnan(x1))[0] # positions where valid readings i
    ...: n x1 are
    ...: ii = np.where(x2 >= 0) [0]

In [38]: j
Out[38]:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 13, 14, 15, 16, 17,
       18])

In [39]: ii
Out[39]:
array([ 0,  1,  2,  4,  5,  6,  7,  8,  9, 10, 11, 13, 14, 15, 16, 17, 18,
       19])

In [40]: j & ii
Out[40]:
array([ 0,  1,  2,  0,  4,  4,  6,  0,  8,  8, 10,  9, 12, 14,  0, 16, 16,
       18])

In [41]: i1 = np.where(np.isnan(x1))
    ...: i2 = np.where(x2 < 0)

In [42]: i1
Out[42]: (array([12, 19]),)

In [43]: i2
Out[43]: (array([ 3, 12]),)

In [44]: np.concatenate([i1, i2])
Out[44]:
array([[12, 19],
       [ 3, 12]])

In [45]: np.concatenate([i1, i2], axis = 1)
Out[45]: array([[12, 19,  3, 12]])

In [46]: np.unique(np.concatenate([i1, i2], axis = 1))
Out[46]: array([ 3, 12, 19])

In [47]: mask = np.concatenate((np.where(np.isnan(x1))[0], np.where(x2 ==
    ...: -1)[0]))
    ...:

In [48]: mask
Out[48]: array([12, 19,  3, 12])

In [49]: np.delete(x1,mask)
Out[49]:
array([ 0.00000000e+00,  2.93892626e+00,  4.75528258e+00,  2.93892626e+00,
        6.12323400e-16, -2.93892626e+00, -4.75528258e+00, -4.75528258e+00,
       -2.93892626e+00, -1.22464680e-15,  2.93892626e+00,  4.75528258e+00,
        2.93892626e+00,  1.83697020e-15, -2.93892626e+00, -4.75528258e+00,
       -4.75528258e+00])

In [50]: np.delete(x1,mask).shape
Out[50]: (17,)

In [51]:

In [51]:

In [51]:

In [51]: np.loadtxt?

In [52]: ls
homework3.md  homework3.pdf  homework3_samples.py  homework3_solutions.py  student_solutions/

In [53]: cd ..
/home/mspacek/SciPyCourse2021/notes

In [54]: cd 06_fileio_mpl/
/home/mspacek/SciPyCourse2021/notes/06_fileio_mpl

In [55]: ls
06_fileio_mpl.md   100.txt      ASCII-Conversion-Chart.pdf  plot_exercise.py  test2D.csv  V.npy
06_fileio_mpl.pdf  anatomy.pdf  matplotlibrc                test1D.csv        t.npy       Vt.mat

In [56]: test1D = np.loadtxt('test1D.csv', delimeter=',')
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-56-1de2a8007527> in <module>
----> 1 test1D = np.loadtxt('test1D.csv', delimeter=',')

TypeError: loadtxt() got an unexpected keyword argument 'delimeter'
> <ipython-input-56-1de2a8007527>(1)<module>()
----> 1 test1D = np.loadtxt('test1D.csv', delimeter=',')

ipdb> c

In [57]: test1D = np.loadtxt('test1D.csv', delimiter=',')

In [58]: test1D
Out[58]: array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])

In [59]: test1D = np.loadtxt('test1D.csv', delimiter=',', fmt='%g')
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-59-457151313e0a> in <module>
----> 1 test1D = np.loadtxt('test1D.csv', delimiter=',', fmt='%g')

TypeError: loadtxt() got an unexpected keyword argument 'fmt'
> <ipython-input-59-457151313e0a>(1)<module>()
----> 1 test1D = np.loadtxt('test1D.csv', delimiter=',', fmt='%g')

ipdb> c

In [60]: test1D = np.loadtxt('test1D.csv', delimiter=',', dtype=int)

In [61]: test1D
Out[61]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [62]: test2D = np.loadtxt('test2D.csv', delimiter=',', dtype=int)

In [63]: test2D
Out[63]:
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])

In [64]: test2D.shape
Out[64]: (3, 3)

In [65]: test2D.ndim
Out[65]: 2

In [66]: np.savetxt?

In [67]: np.savetxt('test1D_out.txt', test1D)

In [68]: np.savetxt('test1D_out.txt', test1D, fmt='%g')

In [69]: np.savetxt('test2D_out.txt', test2D, fmt='%g')

In [70]: np.savetxt('test2D_out.txt', test2D, fmt='%g', delimiter=',')

In [71]: np.load?

In [72]: np.load
Out[72]: <function numpy.load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII')>

In [73]:

In [73]: np.save
Out[73]: <function numpy.save(file, arr, allow_pickle=True, fix_imports=True)>

In [74]: np.save?

In [75]: ls
06_fileio_mpl.md   100.txt      ASCII-Conversion-Chart.pdf  plot_exercise.py  test1D_out.txt  test2D_out.txt  V.npy
06_fileio_mpl.pdf  anatomy.pdf  matplotlibrc                test1D.csv        test2D.csv      t.npy           Vt.mat

In [76]: V = np.load('V.npy')

In [77]: type(V)
Out[77]: numpy.ndarray

In [78]: V
Out[78]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [79]: V.shape
Out[79]: (100,)

In [80]: V.dtype
Out[80]: dtype('float64')

In [81]: t = np.load('t.npy')

In [82]: t
Out[82]:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])

In [83]: t.shape
Out[83]: (100,)

In [84]: t.dtype
Out[84]: dtype('int64')

In [85]: np.save('V2.npy', 2*V)

In [86]: np.loadtxt?

In [87]: np.savez('Vt.npz', V=V, t=t)

In [88]: np.savez_compressed?

In [89]: d = np.load('Vt.npz')

In [90]: type(d)
Out[90]: numpy.lib.npyio.NpzFile

In [91]: d
Out[91]: <numpy.lib.npyio.NpzFile at 0x7f69f01ad5c0>

In [92]: list(d)
Out[92]: ['V', 't']

In [93]: d['V']
Out[93]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [94]: V = d['V']

In [95]: d['t']
Out[95]:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])

In [96]: d['sdfsdfsfd']
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
<ipython-input-96-2831508ba4e2> in <module>
----> 1 d['sdfsdfsfd']

/usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py in __getitem__(self, key)
    257                 return self.zip.read(key)
    258         else:
--> 259             raise KeyError("%s is not a file in the archive" % key)
    260
    261

KeyError: 'sdfsdfsfd is not a file in the archive'
> /usr/local/lib/python3.6/dist-packages/numpy/lib/npyio.py(259)__getitem__()
    257                 return self.zip.read(key)
    258         else:
--> 259             raise KeyError("%s is not a file in the archive" % key)
    260
    261

ipdb> c

In [97]: d['t']
Out[97]:
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
       85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])

In [98]: t = d['t']

In [99]: list(d)
Out[99]: ['V', 't']

In [100]: d.items()
Out[100]: ItemsView(<numpy.lib.npyio.NpzFile object at 0x7f69f01ad5c0>)

In [101]: d.values()
Out[101]: ValuesView(<numpy.lib.npyio.NpzFile object at 0x7f69f01ad5c0>)

In [102]: list(d.values())
Out[102]:
[array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
        0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
        0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
        0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
        0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
        0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
        0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
        0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
        0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
        0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
        0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
        0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
        0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
        0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
        0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
        0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
        0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
        0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
        0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
        0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ]),
 array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
        17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
        34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
        51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
        68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
        85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])]

In [103]: list(d)
Out[103]: ['V', 't']

In [104]: d['V']
Out[104]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [105]: import scipy

In [106]: import scipy.io

In [107]: scipy.io.loadmat?

In [108]: d = scipy.io.loadmat('Vt.mat', squeeze_me=True)

In [109]: d
Out[109]:
{'__header__': b'MATLAB 5.0 MAT-file Platform: posix, Created on: Tue May 22 18:30:35 2018',
 '__version__': '1.0',
 '__globals__': [],
 't': array([ 0.        ,  0.12693304,  0.25386607,  0.38079911,  0.50773215,
         0.63466518,  0.76159822,  0.88853126,  1.01546429,  1.14239733,
         1.26933037,  1.3962634 ,  1.52319644,  1.65012947,  1.77706251,
         1.90399555,  2.03092858,  2.15786162,  2.28479466,  2.41172769,
         2.53866073,  2.66559377,  2.7925268 ,  2.91945984,  3.04639288,
         3.17332591,  3.30025895,  3.42719199,  3.55412502,  3.68105806,
         3.8079911 ,  3.93492413,  4.06185717,  4.1887902 ,  4.31572324,
         4.44265628,  4.56958931,  4.69652235,  4.82345539,  4.95038842,
         5.07732146,  5.2042545 ,  5.33118753,  5.45812057,  5.58505361,
         5.71198664,  5.83891968,  5.96585272,  6.09278575,  6.21971879,
         6.34665183,  6.47358486,  6.6005179 ,  6.72745093,  6.85438397,
         6.98131701,  7.10825004,  7.23518308,  7.36211612,  7.48904915,
         7.61598219,  7.74291523,  7.86984826,  7.9967813 ,  8.12371434,
         8.25064737,  8.37758041,  8.50451345,  8.63144648,  8.75837952,
         8.88531256,  9.01224559,  9.13917863,  9.26611167,  9.3930447 ,
         9.51997774,  9.64691077,  9.77384381,  9.90077685, 10.02770988,
        10.15464292, 10.28157596, 10.40850899, 10.53544203, 10.66237507,
        10.7893081 , 10.91624114, 11.04317418, 11.17010721, 11.29704025,
        11.42397329, 11.55090632, 11.67783936, 11.8047724 , 11.93170543,
        12.05863847, 12.1855715 , 12.31250454, 12.43943758, 12.56637061]),
 'V': array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
        0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
        0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
        0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
        0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
        0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
        0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
        0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
        0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
        0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
        0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
        0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
        0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
        0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
        0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
        0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
        0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
        0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
        0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
        0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])}

In [110]: type(d)
Out[110]: dict

In [111]: d['V']
Out[111]:
array([0.82477776, 0.60234259, 0.30838075, 0.86460337, 0.03565366,
       0.2003485 , 0.59136864, 0.41516213, 0.50677683, 0.98391089,
       0.754406  , 0.6863142 , 0.26141794, 0.35148471, 0.25809239,
       0.10477345, 0.13240892, 0.3186725 , 0.59448282, 0.2665809 ,
       0.59159472, 0.06535707, 0.08588366, 0.95686584, 0.98601687,
       0.8389271 , 0.22120216, 0.42581965, 0.38330622, 0.20974697,
       0.75382484, 0.44599363, 0.28085387, 0.41724942, 0.94478529,
       0.70220133, 0.36363056, 0.52294337, 0.94295983, 0.61623672,
       0.38194739, 0.43823802, 0.61111018, 0.54422732, 0.24545404,
       0.40254543, 0.21427902, 0.66286176, 0.28254573, 0.16871786,
       0.76175722, 0.09973085, 0.43794099, 0.89565292, 0.03187238,
       0.87970738, 0.47566383, 0.53423742, 0.7429268 , 0.18229579,
       0.5644328 , 0.57489331, 0.94805837, 0.73965136, 0.22132075,
       0.96541463, 0.10919191, 0.22651496, 0.16926193, 0.04443022,
       0.88980452, 0.87794144, 0.13277586, 0.8021323 , 0.4588698 ,
       0.15431149, 0.75288165, 0.30719521, 0.31277019, 0.34941495,
       0.87280319, 0.42289808, 0.66083013, 0.72057466, 0.90296009,
       0.05182572, 0.69724278, 0.4993913 , 0.7908157 , 0.76084666,
       0.28044239, 0.10011814, 0.56560435, 0.83299044, 0.440094  ,
       0.55592693, 0.70902545, 0.29041984, 0.34583959, 0.0079088 ])

In [112]: d['t']
Out[112]:
array([ 0.        ,  0.12693304,  0.25386607,  0.38079911,  0.50773215,
        0.63466518,  0.76159822,  0.88853126,  1.01546429,  1.14239733,
        1.26933037,  1.3962634 ,  1.52319644,  1.65012947,  1.77706251,
        1.90399555,  2.03092858,  2.15786162,  2.28479466,  2.41172769,
        2.53866073,  2.66559377,  2.7925268 ,  2.91945984,  3.04639288,
        3.17332591,  3.30025895,  3.42719199,  3.55412502,  3.68105806,
        3.8079911 ,  3.93492413,  4.06185717,  4.1887902 ,  4.31572324,
        4.44265628,  4.56958931,  4.69652235,  4.82345539,  4.95038842,
        5.07732146,  5.2042545 ,  5.33118753,  5.45812057,  5.58505361,
        5.71198664,  5.83891968,  5.96585272,  6.09278575,  6.21971879,
        6.34665183,  6.47358486,  6.6005179 ,  6.72745093,  6.85438397,
        6.98131701,  7.10825004,  7.23518308,  7.36211612,  7.48904915,
        7.61598219,  7.74291523,  7.86984826,  7.9967813 ,  8.12371434,
        8.25064737,  8.37758041,  8.50451345,  8.63144648,  8.75837952,
        8.88531256,  9.01224559,  9.13917863,  9.26611167,  9.3930447 ,
        9.51997774,  9.64691077,  9.77384381,  9.90077685, 10.02770988,
       10.15464292, 10.28157596, 10.40850899, 10.53544203, 10.66237507,
       10.7893081 , 10.91624114, 11.04317418, 11.17010721, 11.29704025,
       11.42397329, 11.55090632, 11.67783936, 11.8047724 , 11.93170543,
       12.05863847, 12.1855715 , 12.31250454, 12.43943758, 12.56637061])

In [113]: V = d['V']

In [114]: t = d['t']

In [115]: d2 = {}

In [116]: d2['V'] = 2*V

In [117]: d2['t'] = t

In [118]: scipy.io.savemat('Vt2.mat', d2)

In [119]: np.fromfile?

In [120]: a = np.array(10)

In [121]: a
Out[121]: array(10)

In [122]: np.arange(10)
Out[122]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [123]: a
Out[123]: array(10)

In [124]: a = np.arange(10)

In [125]: a.tofile('plain_binary_a.dat')

In [126]: a = np.arange(10)

In [127]: a
Out[127]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [128]: ls
06_fileio_mpl.md            matplotlibrc        test2D.csv      Vt2.mat
06_fileio_mpl.pdf           plain_binary_a.dat  test2D_out.txt  Vt.mat
100.txt                     plot_exercise.py    t.npy           Vt.npz
anatomy.pdf                 test1D.csv          V2.npy
ASCII-Conversion-Chart.pdf  test1D_out.txt      V.npy

In [129]: ls -al
total 308
drwxrwxr-x  2 mspacek mspacek   4096 May 25 14:46 ./
drwxrwxr-x 22 mspacek mspacek   4096 May 19 12:29 ../
-rw-rw-r--  1 mspacek mspacek  16301 May 25 11:42 06_fileio_mpl.md
-rw-------  1 mspacek mspacek 145613 May 25 11:49 06_fileio_mpl.pdf
-rw-rw-r--  1 mspacek mspacek      4 May 25 13:57 100.txt
-rw-rw-r--  1 mspacek mspacek  31419 May 22  2018 anatomy.pdf
-rw-rw-r--  1 mspacek mspacek  11233 May 22  2017 ASCII-Conversion-Chart.pdf
-rw-rw-r--  1 mspacek mspacek  33010 Nov 22  2018 matplotlibrc
-rw-rw-r--  1 mspacek mspacek     80 May 25 14:46 plain_binary_a.dat
-rw-rw-r--  1 mspacek mspacek    593 May 25 11:38 plot_exercise.py
-rw-rw-r--  1 mspacek mspacek     20 May 14  2018 test1D.csv
-rw-rw-r--  1 mspacek mspacek     20 May 25 14:10 test1D_out.txt
-rw-rw-r--  1 mspacek mspacek     18 Jun  4  2019 test2D.csv
-rw-rw-r--  1 mspacek mspacek     18 May 25 14:12 test2D_out.txt
-rw-rw-r--  1 mspacek mspacek    928 May 14  2018 t.npy
-rw-rw-r--  1 mspacek mspacek    928 May 25 14:18 V2.npy
-rw-rw-r--  1 mspacek mspacek    928 May 22  2018 V.npy
-rw-rw-r--  1 mspacek mspacek   1840 May 25 14:43 Vt2.mat
-rw-rw-r--  1 mspacek mspacek   1840 May 22  2018 Vt.mat
-rw-rw-r--  1 mspacek mspacek   2090 May 25 14:34 Vt.npz

In [130]: cd
/home/mspacek

In [131]: ls
aud/    data/     papers/           SciPyCourse2020/  thesis/
bak/    Desktop/  SciPyCourse2017/  SciPyCourse2021/  tor/
blab/   dev/      SciPyCourse2018/  snap/             vid/
books/  me/       SciPyCourse2019/  src/              work/

In [132]: cd SciPyCourse2021
/home/mspacek/SciPyCourse2021

In [133]: cd notes
/home/mspacek/SciPyCourse2021/notes

In [134]: ls
00_intro/            05_numpy_dtype/   10_stats/       homework3/
01_Python_basics/    06_fileio_mpl/    11_clustering/  homework4/
02_Python_basics_2/  07_mpl_matrices/  12_organizing/  homework5/
03_collections/      08_images/        homework1/      old_notes/
04_numpy/            09_pandas/        homework2/      README.md

In [135]: cd 06_fileio_mpl/
/home/mspacek/SciPyCourse2021/notes/06_fileio_mpl

In [136]: ls
06_fileio_mpl.md            matplotlibrc        test2D.csv      Vt2.mat
06_fileio_mpl.pdf           plain_binary_a.dat  test2D_out.txt  Vt.mat
100.txt                     plot_exercise.py    t.npy           Vt.npz
anatomy.pdf                 test1D.csv          V2.npy
ASCII-Conversion-Chart.pdf  test1D_out.txt      V.npy

In [137]: pwd
Out[137]: '/home/mspacek/SciPyCourse2021/notes/06_fileio_mpl'

In [138]: np.savetxt('exercise.txt')
--------------------------------------------------------------------------
TypeError                                Traceback (most recent call last)
<ipython-input-138-9762a4d11470> in <module>
----> 1 np.savetxt('exercise.txt')

<__array_function__ internals> in savetxt(*args, **kwargs)

TypeError: _savetxt_dispatcher() missing 1 required positional argument: 'X'
> <__array_function__ internals>(4)savetxt()

ipdb> f
*** NameError: name 'f' is not defined
ipdb> c

In [139]: np.savetxt('exercise.txt', a)

In [140]: np.savetxt('exercise.txt', a, fmt='%g')

In [141]: b = np.loadtxt('exercise.txt')

In [142]: b
Out[142]: array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8., 99.])

In [143]: b = np.loadtxt('exercise.txt', dtype=int)

In [144]: b
Out[144]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8, 99])

In [145]: a
Out[145]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [146]: np.save('exercise.npy', a)

In [147]: c = np.load('exercise.npy')

In [148]: c
Out[148]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [149]: c.dtype
Out[149]: dtype('int64')

In [150]: a.dtype
Out[150]: dtype('int64')

In [151]: a
Out[151]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [152]: c
Out[152]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

In [153]: a == c
Out[153]:
array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True])

In [154]: (a == c).all()
Out[154]: True

In [155]: import matplotlib.pyplot as plt

In [156]: np.linspace?

In [157]: t = np.linspace(0, 4*np.pi, 100)

In [158]: t.shape
Out[158]: (100,)

In [159]: t
Out[159]:
array([ 0.        ,  0.12693304,  0.25386607,  0.38079911,  0.50773215,
        0.63466518,  0.76159822,  0.88853126,  1.01546429,  1.14239733,
        1.26933037,  1.3962634 ,  1.52319644,  1.65012947,  1.77706251,
        1.90399555,  2.03092858,  2.15786162,  2.28479466,  2.41172769,
        2.53866073,  2.66559377,  2.7925268 ,  2.91945984,  3.04639288,
        3.17332591,  3.30025895,  3.42719199,  3.55412502,  3.68105806,
        3.8079911 ,  3.93492413,  4.06185717,  4.1887902 ,  4.31572324,
        4.44265628,  4.56958931,  4.69652235,  4.82345539,  4.95038842,
        5.07732146,  5.2042545 ,  5.33118753,  5.45812057,  5.58505361,
        5.71198664,  5.83891968,  5.96585272,  6.09278575,  6.21971879,
        6.34665183,  6.47358486,  6.6005179 ,  6.72745093,  6.85438397,
        6.98131701,  7.10825004,  7.23518308,  7.36211612,  7.48904915,
        7.61598219,  7.74291523,  7.86984826,  7.9967813 ,  8.12371434,
        8.25064737,  8.37758041,  8.50451345,  8.63144648,  8.75837952,
        8.88531256,  9.01224559,  9.13917863,  9.26611167,  9.3930447 ,
        9.51997774,  9.64691077,  9.77384381,  9.90077685, 10.02770988,
       10.15464292, 10.28157596, 10.40850899, 10.53544203, 10.66237507,
       10.7893081 , 10.91624114, 11.04317418, 11.17010721, 11.29704025,
       11.42397329, 11.55090632, 11.67783936, 11.8047724 , 11.93170543,
       12.05863847, 12.1855715 , 12.31250454, 12.43943758, 12.56637061])

In [160]: s = np.sin(t)

In [161]: s
Out[161]:
array([ 0.00000000e+00,  1.26592454e-01,  2.51147987e-01,  3.71662456e-01,
        4.86196736e-01,  5.92907929e-01,  6.90079011e-01,  7.76146464e-01,
        8.49725430e-01,  9.09631995e-01,  9.54902241e-01,  9.84807753e-01,
        9.98867339e-01,  9.96854776e-01,  9.78802446e-01,  9.45000819e-01,
        8.95993774e-01,  8.32569855e-01,  7.55749574e-01,  6.66769001e-01,
        5.67059864e-01,  4.58226522e-01,  3.42020143e-01,  2.20310533e-01,
        9.50560433e-02, -3.17279335e-02, -1.58001396e-01, -2.81732557e-01,
       -4.00930535e-01, -5.13677392e-01, -6.18158986e-01, -7.12694171e-01,
       -7.95761841e-01, -8.66025404e-01, -9.22354294e-01, -9.63842159e-01,
       -9.89821442e-01, -9.99874128e-01, -9.93838464e-01, -9.71811568e-01,
       -9.34147860e-01, -8.81453363e-01, -8.14575952e-01, -7.34591709e-01,
       -6.42787610e-01, -5.40640817e-01, -4.29794912e-01, -3.12033446e-01,
       -1.89251244e-01, -6.34239197e-02,  6.34239197e-02,  1.89251244e-01,
        3.12033446e-01,  4.29794912e-01,  5.40640817e-01,  6.42787610e-01,
        7.34591709e-01,  8.14575952e-01,  8.81453363e-01,  9.34147860e-01,
        9.71811568e-01,  9.93838464e-01,  9.99874128e-01,  9.89821442e-01,
        9.63842159e-01,  9.22354294e-01,  8.66025404e-01,  7.95761841e-01,
        7.12694171e-01,  6.18158986e-01,  5.13677392e-01,  4.00930535e-01,
        2.81732557e-01,  1.58001396e-01,  3.17279335e-02, -9.50560433e-02,
       -2.20310533e-01, -3.42020143e-01, -4.58226522e-01, -5.67059864e-01,
       -6.66769001e-01, -7.55749574e-01, -8.32569855e-01, -8.95993774e-01,
       -9.45000819e-01, -9.78802446e-01, -9.96854776e-01, -9.98867339e-01,
       -9.84807753e-01, -9.54902241e-01, -9.09631995e-01, -8.49725430e-01,
       -7.76146464e-01, -6.90079011e-01, -5.92907929e-01, -4.86196736e-01,
       -3.71662456e-01, -2.51147987e-01, -1.26592454e-01, -4.89858720e-16])

In [162]: plt.plot(t, s)
Out[162]: [<matplotlib.lines.Line2D at 0x7f69e97db828>]

In [163]: c = np.cos(t)

In [164]: plt.plot(t, c)
Out[164]: [<matplotlib.lines.Line2D at 0x7f69e94408d0>]

In [165]: plt.close()

In [166]: plt.figure()
Out[166]: <Figure size 700x700 with 0 Axes>

In [167]: plt.figure()
Out[167]: <Figure size 700x700 with 0 Axes>

In [168]: plt.plot(t, s)
Out[168]: [<matplotlib.lines.Line2D at 0x7f69e95270b8>]

In [169]: plt.close('all')

In [170]: plt.plot(t, s)
Out[170]: [<matplotlib.lines.Line2D at 0x7f69e9619ef0>]

/usr/local/lib/python3.6/dist-packages/matplotlib/colors.py:235: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray
  c = np.array(c)
In [171]: plt.xlim?
Signature: plt.xlim(*args, **kwargs)
Docstring:
Get or set the x limits of the current axes.

Call signatures::

    left, right = xlim()  # return the current xlim
    xlim((left, right))   # set the xlim to left, right
    xlim(left, right)     # set the xlim to left, right

If you do not specify args, you can pass *left* or *right* as kwargs,
i.e.::

    xlim(right=3)  # adjust the right leaving left unchanged
    xlim(left=1)  # adjust the left leaving right unchanged

Setting limits turns autoscaling off for the x-axis.

Returns
-------
left, right
    A tuple of the new x-axis limits.

Notes
-----
Calling this function with no arguments (e.g. ``xlim()``) is the pyplot
equivalent of calling `~.Axes.get_xlim` on the current axes.
Calling this function with arguments is the pyplot equivalent of calling
`~.Axes.set_xlim` on the current axes. All arguments are passed though.
File:      /usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py
Type:      function

In [172]: plt.xlim(-5, 5)
Out[172]: (-5, 5)

In [173]: plt.xlim(0, 12)
Out[173]: (0, 12)

In [174]: plt.ylim(-2, 2)
Out[174]: (-2, 2)

In [175]: plt.xlabel('hello world')
Out[175]: Text(0.5, 37.50000000000002, 'hello world')

In [176]: plt.ylabel('goodbye world')
Out[176]: Text(37.5, 0.5, 'goodbye world')

In [177]: plt.title('best figure ever')
Out[177]: Text(0.5, 1, 'best figure ever')

In [178]: plt.savefig?

In [179]: plt.savefig('programmatic_filename.png')

In [180]: plt.hold?
Object `plt.hold` not found.

In [181]: plt.plot(t, s)
Out[181]: [<matplotlib.lines.Line2D at 0x7f69ea1a6240>]

In [182]: a = plt.gca()

In [183]: a
Out[183]: <matplotlib.axes._subplots.AxesSubplot at 0x7f6a1ed86198>

In [184]: plt.plot?

In [185]: plt.plot(t, s, hold=True)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-185-e5400d1190f3> in <module>
----> 1 plt.plot(t, s, hold=True)

/usr/local/lib/python3.6/dist-packages/matplotlib/pyplot.py in plot(scalex, scaley, data, *args, **kwargs)
   2793     return gca().plot(
   2794         *args, scalex=scalex, scaley=scaley, **({"data": data} if data
-> 2795         is not None else {}), **kwargs)
   2796
   2797

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_axes.py in plot(self, scalex, scaley, data, *args, **kwargs)
   1664         """
   1665         kwargs = cbook.normalize_kwargs(kwargs, mlines.Line2D._alias_map)
-> 1666         lines = [*self._get_lines(*args, data=data, **kwargs)]
   1667         for line in lines:
   1668             self.add_line(line)

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py in __call__(self, *args, **kwargs)
    223                 this += args[0],
    224                 args = args[1:]
--> 225             yield from self._plot_args(this, kwargs)
    226
    227     def get_next_color(self):

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py in _plot_args(self, tup, kwargs)
    403                 "non-matching shapes is deprecated.")
    404         for j in range(max(ncx, ncy)):
--> 405             seg = func(x[:, j % ncx], y[:, j % ncy], kw, kwargs)
    406             ret.append(seg)
    407         return ret

/usr/local/lib/python3.6/dist-packages/matplotlib/axes/_base.py in _makeline(self, x, y, kw, kwargs)
    310         default_dict = self._getdefaults(set(), kw)
    311         self._setdefaults(default_dict, kw)
--> 312         seg = mlines.Line2D(x, y, **kw)
    313         return seg
    314

/usr/local/lib/python3.6/dist-packages/matplotlib/lines.py in __init__(self, xdata, ydata, linewidth, linestyle, color, marker, markersize, markeredgewidth, markeredgecolor, markerfacecolor, markerfacecoloralt, fillstyle, antialiased, dash_capstyle, solid_capstyle, dash_joinstyle, solid_joinstyle, pickradius, drawstyle, markevery, **kwargs)
    402         # update kwargs before updating data to give the caller a
    403         # chance to init axes (and hence unit support)
--> 404         self.update(kwargs)
    405         self.pickradius = pickradius
    406         self.ind_offset = 0

/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py in update(self, props)
    972
    973         with cbook._setattr_cm(self, eventson=False):
--> 974             ret = [_update_property(self, k, v) for k, v in props.items()]
    975
    976         if len(ret):

/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py in <listcomp>(.0)
    972
    973         with cbook._setattr_cm(self, eventson=False):
--> 974             ret = [_update_property(self, k, v) for k, v in props.items()]
    975
    976         if len(ret):

/usr/local/lib/python3.6/dist-packages/matplotlib/artist.py in _update_property(self, k, v)
    968                 if not callable(func):
    969                     raise AttributeError('{!r} object has no property {!r}'
--> 970                                          .format(type(self).__name__, k))
    971                 return func(v)
    972

AttributeError: 'Line2D' object has no property 'hold'
> /usr/local/lib/python3.6/dist-packages/matplotlib/artist.py(970)_update_property()
    968                 if not callable(func):
    969                     raise AttributeError('{!r} object has no property {!r}'
--> 970                                          .format(type(self).__name__, k))
    971                 return func(v)
    972

ipdb> c

In [186]: plt.plot(t, c)
Out[186]: [<matplotlib.lines.Line2D at 0x7f69e9f7b6a0>]

In [187]: plt.plot(t, c)
Out[187]: [<matplotlib.lines.Line2D at 0x7f69e9d64ba8>]

In [188]: plt.plot(t, c, color='red')
Out[188]: [<matplotlib.lines.Line2D at 0x7f69e9d74588>]

In [189]: plt.plot(t, c, color='red', marker='')
Out[189]: [<matplotlib.lines.Line2D at 0x7f69e9967ba8>]

In [190]: plt.plot(t, c, color='red', marker='', linestyle='solid')
Out[190]: [<matplotlib.lines.Line2D at 0x7f69e990e710>]

In [191]: plt.plot(t, c, color='red', marker='', linestyle='solid')
Out[191]: [<matplotlib.lines.Line2D at 0x7f69e98d09e8>]

In [192]: plt.plot(t, c, color='red', marker='', linestyle='-')
Out[192]: [<matplotlib.lines.Line2D at 0x7f69e98bac88>]

In [193]: plt.plot(t, c, color='red', marker='*', linestyle='')
Out[193]: [<matplotlib.lines.Line2D at 0x7f69e9861cc0>]

In [194]: plt.plot(t, c, color='red', marker='*', linestyle='')
Out[194]: [<matplotlib.lines.Line2D at 0x7f69e9d68400>]

In [195]: plt.plot(t, c, 'r.-')
Out[195]: [<matplotlib.lines.Line2D at 0x7f69e9e6f668>]

In [196]: plt.plot(t, c, 'r*-')
Out[196]: [<matplotlib.lines.Line2D at 0x7f69e9ec5cc0>]

In [197]: plt.plot(t, c, 'c*-')
Out[197]: [<matplotlib.lines.Line2D at 0x7f69e9e31e80>]

In [198]: plt.plot(t, c, color='darkgreen', marker='*', linestyle='')
Out[198]: [<matplotlib.lines.Line2D at 0x7f69e9df1518>]

In [199]: plt.plot(t, c, color='cyan', marker='*', linestyle='')
Out[199]: [<matplotlib.lines.Line2D at 0x7f69e9daa400>]

In [200]: plt.plot(t, c)
Out[200]: [<matplotlib.lines.Line2D at 0x7f69e9e975c0>]

In [201]: plt.plot(t, c, label='cos')
Out[201]: [<matplotlib.lines.Line2D at 0x7f69e9f9e860>]

In [202]: plt.plot(t, s, label='sin')
Out[202]: [<matplotlib.lines.Line2D at 0x7f69e9593128>]

In [203]: plt.legend()
Out[203]: <matplotlib.legend.Legend at 0x7f69e94403c8>

In [204]: plt.legend?

In [205]: a = np.random.random(1000)

In [206]: a = np.random.random(1000) - 0.5

In [207]: plt.hist(a)
Out[207]:
(array([ 97., 106., 111., 109.,  94.,  89.,  95., 105.,  84., 110.]),
 array([-0.49831718, -0.39851995, -0.29872272, -0.19892549, -0.09912826,
         0.00066897,  0.1004662 ,  0.20026343,  0.30006067,  0.3998579 ,
         0.49965513]),
 <a list of 10 Patch objects>)

In [208]: plt.hist(a, bins=100)
Out[208]:
(array([11., 13., 12., 13., 10.,  7.,  6., 10.,  7.,  8., 12.,  8., 14.,
         7., 13., 10., 13., 11., 10.,  8., 11., 16.,  9., 14., 14., 11.,
        10.,  7.,  9., 10., 14.,  7., 10., 12., 11., 11.,  5., 15.,  3.,
        21.,  7., 12., 10.,  8.,  8.,  6., 15., 15.,  4.,  9.,  8., 10.,
         7.,  6.,  8., 10., 11., 12., 10.,  7., 11., 15., 10.,  5., 13.,
         5., 12.,  8.,  7.,  9., 13.,  7.,  7., 13.,  6., 15.,  9., 11.,
        11., 13.,  9.,  7.,  6.,  9.,  6.,  7., 10., 12., 11.,  7., 12.,
        11., 18.,  7., 10., 16., 13.,  9.,  5.,  9.]),
 array([-0.49831718, -0.48833746, -0.47835774, -0.46837802, -0.45839829,
        -0.44841857, -0.43843885, -0.42845912, -0.4184794 , -0.40849968,
        -0.39851995, -0.38854023, -0.37856051, -0.36858078, -0.35860106,
        -0.34862134, -0.33864161, -0.32866189, -0.31868217, -0.30870245,
        -0.29872272, -0.288743  , -0.27876328, -0.26878355, -0.25880383,
        -0.24882411, -0.23884438, -0.22886466, -0.21888494, -0.20890521,
        -0.19892549, -0.18894577, -0.17896604, -0.16898632, -0.1590066 ,
        -0.14902687, -0.13904715, -0.12906743, -0.11908771, -0.10910798,
        -0.09912826, -0.08914854, -0.07916881, -0.06918909, -0.05920937,
        -0.04922964, -0.03924992, -0.0292702 , -0.01929047, -0.00931075,
         0.00066897,  0.0106487 ,  0.02062842,  0.03060814,  0.04058786,
         0.05056759,  0.06054731,  0.07052703,  0.08050676,  0.09048648,
         0.1004662 ,  0.11044593,  0.12042565,  0.13040537,  0.1403851 ,
         0.15036482,  0.16034454,  0.17032427,  0.18030399,  0.19028371,
         0.20026343,  0.21024316,  0.22022288,  0.2302026 ,  0.24018233,
         0.25016205,  0.26014177,  0.2701215 ,  0.28010122,  0.29008094,
         0.30006067,  0.31004039,  0.32002011,  0.32999984,  0.33997956,
         0.34995928,  0.359939  ,  0.36991873,  0.37989845,  0.38987817,
         0.3998579 ,  0.40983762,  0.41981734,  0.42979707,  0.43977679,
         0.44975651,  0.45973624,  0.46971596,  0.47969568,  0.48967541,
         0.49965513]),
 <a list of 100 Patch objects>)

In [209]: plt.hist(a, bins=30)
Out[209]:
(array([41., 27., 29., 38., 33., 35., 41., 41., 29., 38., 32., 39., 33.,
        26., 35., 27., 31., 31., 37., 29., 29., 33., 35., 37., 26., 24.,
        34., 42., 41., 27.]),
 array([-0.49831718, -0.46505144, -0.4317857 , -0.39851995, -0.36525421,
        -0.33198847, -0.29872272, -0.26545698, -0.23219123, -0.19892549,
        -0.16565975, -0.132394  , -0.09912826, -0.06586252, -0.03259677,
         0.00066897,  0.03393472,  0.06720046,  0.1004662 ,  0.13373195,
         0.16699769,  0.20026343,  0.23352918,  0.26679492,  0.30006067,
         0.33332641,  0.36659215,  0.3998579 ,  0.43312364,  0.46638939,
         0.49965513]),
 <a list of 30 Patch objects>)

In [210]: plt.hist(a, bins='auto')
Out[210]:
(array([ 89., 102.,  98.,  93.,  89.,  78.,  97.,  81.,  94.,  81.,  98.]),
 array([-0.49831718, -0.40759243, -0.31686767, -0.22614292, -0.13541816,
        -0.04469341,  0.04603135,  0.13675611,  0.22748086,  0.31820562,
         0.40893037,  0.49965513]),
 <a list of 11 Patch objects>)

In [211]: plt.hist(a, bins=np.arange(-1, 1, 0.1))
Out[211]:
(array([  0.,   0.,   0.,   0.,   0.,  96., 107., 111., 109.,  92.,  91.,
         95., 105.,  84., 110.,   0.,   0.,   0.,   0.]),
 array([-1.00000000e+00, -9.00000000e-01, -8.00000000e-01, -7.00000000e-01,
        -6.00000000e-01, -5.00000000e-01, -4.00000000e-01, -3.00000000e-01,
        -2.00000000e-01, -1.00000000e-01, -2.22044605e-16,  1.00000000e-01,
         2.00000000e-01,  3.00000000e-01,  4.00000000e-01,  5.00000000e-01,
         6.00000000e-01,  7.00000000e-01,  8.00000000e-01,  9.00000000e-01]),
 <a list of 19 Patch objects>)

In [212]: plt.gca().spines['right'].set_visible(True)

In [213]: plt.show()

In [214]: plt.ion()

In [215]:
