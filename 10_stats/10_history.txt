mspacek@Godel:~/SciPyCourse2021/notes/09_pandas$ ipython
Python 3.6.9 (default, Jan 26 2021, 15:33:00)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.10.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import pandas as pd

In [2]: ls
09_history.txt  DataFrame_exercise_solutions.py  exp.xlsx    spike_times.npy
09_pandas.md    exp1.csv                         Galton.csv  t.npy
09_pandas.pdf   exp2.csv                         spikes.png  V.npy

In [3]: gdf = pd.read_csv('Galton.csv')

In [4]: gdf
Out[4]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
893   136A    68.5    65.0      M    68.5     8
894   136A    68.5    65.0      M    67.7     8
895   136A    68.5    65.0      F    64.0     8
896   136A    68.5    65.0      F    63.5     8
897   136A    68.5    65.0      F    63.0     8

[898 rows x 6 columns]

In [5]: gdf.iloc[:20]
Out[5]:
   Family  Father  Mother Gender  Height  Kids
0       1    78.5    67.0      M    73.2     4
1       1    78.5    67.0      F    69.2     4
2       1    78.5    67.0      F    69.0     4
3       1    78.5    67.0      F    69.0     4
4       2    75.5    66.5      M    73.5     4
5       2    75.5    66.5      M    72.5     4
6       2    75.5    66.5      F    65.5     4
7       2    75.5    66.5      F    65.5     4
8       3    75.0    64.0      M    71.0     2
9       3    75.0    64.0      F    68.0     2
10      4    75.0    64.0      M    70.5     5
11      4    75.0    64.0      M    68.5     5
12      4    75.0    64.0      F    67.0     5
13      4    75.0    64.0      F    64.5     5
14      4    75.0    64.0      F    63.0     5
15      5    75.0    58.5      M    72.0     6
16      5    75.0    58.5      M    69.0     6
17      5    75.0    58.5      M    68.0     6
18      5    75.0    58.5      F    66.5     6
19      5    75.0    58.5      F    62.5     6

In [6]: len(gdf)
Out[6]: 898

In [7]: fam = gdf.groupby('Family')

In [8]: fam
Out[8]: <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f6c0ff5d358>

In [9]: fam.count()
Out[9]:
        Father  Mother  Gender  Height  Kids
Family
1            4       4       4       4     4
10           1       1       1       1     1
100          3       3       3       3     3
101          6       6       6       6     6
102          6       6       6       6     6
...        ...     ...     ...     ...   ...
95           3       3       3       3     3
96           5       5       5       5     5
97          10      10      10      10    10
98           1       1       1       1     1
99           8       8       8       8     8

[197 rows x 5 columns]

In [10]: fam.describe()
Out[10]:
       Father                                     ...  Kids
        count  mean  std   min   25%   50%   75%  ...  mean  std   min   25%   50%   75%   max
Family                                            ...
1         4.0  78.5  0.0  78.5  78.5  78.5  78.5  ...   4.0  0.0   4.0   4.0   4.0   4.0   4.0
10        1.0  74.0  NaN  74.0  74.0  74.0  74.0  ...   1.0  NaN   1.0   1.0   1.0   1.0   1.0
100       3.0  69.0  0.0  69.0  69.0  69.0  69.0  ...   3.0  0.0   3.0   3.0   3.0   3.0   3.0
101       6.0  69.0  0.0  69.0  69.0  69.0  69.0  ...   6.0  0.0   6.0   6.0   6.0   6.0   6.0
102       6.0  69.0  0.0  69.0  69.0  69.0  69.0  ...   6.0  0.0   6.0   6.0   6.0   6.0   6.0
...       ...   ...  ...   ...   ...   ...   ...  ...   ...  ...   ...   ...   ...   ...   ...
95        3.0  70.0  0.0  70.0  70.0  70.0  70.0  ...   3.0  0.0   3.0   3.0   3.0   3.0   3.0
96        5.0  70.0  0.0  70.0  70.0  70.0  70.0  ...   5.0  0.0   5.0   5.0   5.0   5.0   5.0
97       10.0  69.0  0.0  69.0  69.0  69.0  69.0  ...  10.0  0.0  10.0  10.0  10.0  10.0  10.0
98        1.0  69.0  NaN  69.0  69.0  69.0  69.0  ...   1.0  NaN   1.0   1.0   1.0   1.0   1.0
99        8.0  69.0  0.0  69.0  69.0  69.0  69.0  ...   8.0  0.0   8.0   8.0   8.0   8.0   8.0

[197 rows x 32 columns]

In [11]: gdf
Out[11]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
893   136A    68.5    65.0      M    68.5     8
894   136A    68.5    65.0      M    67.7     8
895   136A    68.5    65.0      F    64.0     8
896   136A    68.5    65.0      F    63.5     8
897   136A    68.5    65.0      F    63.0     8

[898 rows x 6 columns]

In [12]: fam.describe()['Family']
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)
   2888             try:
-> 2889                 return self._engine.get_loc(casted_key)
   2890             except KeyError as err:

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

pandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()

KeyError: 'Family'

The above exception was the direct cause of the following exception:

KeyError                                  Traceback (most recent call last)
<ipython-input-12-9960f48ab28b> in <module>
----> 1 fam.describe()['Family']

/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py in __getitem__(self, key)
   2896         if is_single_key:
   2897             if self.columns.nlevels > 1:
-> 2898                 return self._getitem_multilevel(key)
   2899             indexer = self.columns.get_loc(key)
   2900             if is_integer(indexer):

/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py in _getitem_multilevel(self, key)
   2946     def _getitem_multilevel(self, key):
   2947         # self.columns is a MultiIndex
-> 2948         loc = self.columns.get_loc(key)
   2949         if isinstance(loc, (slice, np.ndarray)):
   2950             new_columns = self.columns[loc]

/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/multi.py in get_loc(self, key, method)
   2698         if not isinstance(key, (tuple, list)):
   2699             # not including list here breaks some indexing, xref #30892
-> 2700             loc = self._get_level_indexer(key, level=0)
   2701             return _maybe_to_slice(loc)
   2702

/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/multi.py in _get_level_indexer(self, key, level, indexer)
   2963         else:
   2964
-> 2965             code = self._get_loc_single_level_index(level_index, key)
   2966
   2967             if level > 0 or self.lexsort_depth == 0:

/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/multi.py in _get_loc_single_level_index(self, level_index, key)
   2632             return -1
   2633         else:
-> 2634             return level_index.get_loc(key)
   2635
   2636     def get_loc(self, key, method=None):

/usr/local/lib/python3.6/dist-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)
   2889                 return self._engine.get_loc(casted_key)
   2890             except KeyError as err:
-> 2891                 raise KeyError(key) from err
   2892
   2893         if tolerance is not None:

KeyError: 'Family'
> /usr/local/lib/python3.6/dist-packages/pandas/core/indexes/base.py(2891)get_loc()
   2889                 return self._engine.get_loc(casted_key)
   2890             except KeyError as err:
-> 2891                 raise KeyError(key) from err
   2892
   2893         if tolerance is not None:

ipdb> c

In [13]: fam.describe()
Out[13]:
       Father                                           ...  Kids
        count  mean  std   min   25%   50%   75%   max  ... count  mean  std   min   25%   50%   75%   max
Family                                                  ...
1         4.0  78.5  0.0  78.5  78.5  78.5  78.5  78.5  ...   4.0   4.0  0.0   4.0   4.0   4.0   4.0   4.0
10        1.0  74.0  NaN  74.0  74.0  74.0  74.0  74.0  ...   1.0   1.0  NaN   1.0   1.0   1.0   1.0   1.0
100       3.0  69.0  0.0  69.0  69.0  69.0  69.0  69.0  ...   3.0   3.0  0.0   3.0   3.0   3.0   3.0   3.0
101       6.0  69.0  0.0  69.0  69.0  69.0  69.0  69.0  ...   6.0   6.0  0.0   6.0   6.0   6.0   6.0   6.0
102       6.0  69.0  0.0  69.0  69.0  69.0  69.0  69.0  ...   6.0   6.0  0.0   6.0   6.0   6.0   6.0   6.0
...       ...   ...  ...   ...   ...   ...   ...   ...  ...   ...   ...  ...   ...   ...   ...   ...   ...
95        3.0  70.0  0.0  70.0  70.0  70.0  70.0  70.0  ...   3.0   3.0  0.0   3.0   3.0   3.0   3.0   3.0
96        5.0  70.0  0.0  70.0  70.0  70.0  70.0  70.0  ...   5.0   5.0  0.0   5.0   5.0   5.0   5.0   5.0
97       10.0  69.0  0.0  69.0  69.0  69.0  69.0  69.0  ...  10.0  10.0  0.0  10.0  10.0  10.0  10.0  10.0
98        1.0  69.0  NaN  69.0  69.0  69.0  69.0  69.0  ...   1.0   1.0  NaN   1.0   1.0   1.0   1.0   1.0
99        8.0  69.0  0.0  69.0  69.0  69.0  69.0  69.0  ...   8.0   8.0  0.0   8.0   8.0   8.0   8.0   8.0

[197 rows x 32 columns]

In [14]: gdf['Family']
Out[14]:
0         1
1         1
2         1
3         1
4         2
       ...
893    136A
894    136A
895    136A
896    136A
897    136A
Name: Family, Length: 898, dtype: object

In [15]: gdf
Out[15]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
893   136A    68.5    65.0      M    68.5     8
894   136A    68.5    65.0      M    67.7     8
895   136A    68.5    65.0      F    64.0     8
896   136A    68.5    65.0      F    63.5     8
897   136A    68.5    65.0      F    63.0     8

[898 rows x 6 columns]

In [16]: gdf['Family']
Out[16]:
0         1
1         1
2         1
3         1
4         2
       ...
893    136A
894    136A
895    136A
896    136A
897    136A
Name: Family, Length: 898, dtype: object

In [17]: type(gdf['Family'])
Out[17]: pandas.core.series.Series

In [18]: type(gdf)
Out[18]: pandas.core.frame.DataFrame

In [19]: type(gdf['Family'])
Out[19]: pandas.core.series.Series

In [20]: gdf['Family']
Out[20]:
0         1
1         1
2         1
3         1
4         2
       ...
893    136A
894    136A
895    136A
896    136A
897    136A
Name: Family, Length: 898, dtype: object

In [21]: gdf['Family'].values
Out[21]:
array(['1', '1', '1', '1', '2', '2', '2', '2', '3', '3', '4', '4', '4',
       '4', '4', '5', '5', '5', '5', '5', '5', '6', '7', '7', '7', '7',
       '7', '7', '8', '8', '8', '9', '10', '11', '11', '11', '11', '11',
       '11', '11', '11', '12', '14', '14', '15', '15', '15', '16', '16',
       '16', '16', '16', '16', '16', '16', '16', '17', '17', '17', '17',
       '17', '17', '18', '18', '18', '19', '20', '20', '20', '20', '20',
       '20', '20', '20', '21', '21', '21', '22', '22', '22', '23', '23',
       '23', '23', '23', '23', '23', '24', '25', '25', '26', '26', '26',
       '26', '26', '27', '27', '27', '28', '28', '28', '28', '28', '28',
       '29', '29', '29', '30', '31', '31', '31', '31', '31', '31', '32',
       '32', '32', '32', '32', '33', '33', '33', '33', '33', '34', '35',
       '35', '35', '35', '35', '36', '36', '36', '36', '37', '37', '37',
       '37', '38', '38', '38', '38', '38', '38', '39', '39', '40', '40',
       '40', '40', '40', '41', '42', '42', '42', '42', '42', '42', '43',
       '43', '44', '44', '45', '45', '45', '46', '46', '46', '46', '46',
       '46', '46', '46', '47', '47', '47', '47', '48', '48', '48', '49',
       '49', '49', '49', '49', '49', '49', '51', '51', '52', '52', '52',
       '52', '52', '53', '53', '53', '53', '53', '53', '53', '53', '53',
       '54', '54', '54', '54', '55', '55', '55', '55', '55', '56', '56',
       '56', '56', '56', '57', '57', '57', '57', '57', '58', '58', '58',
       '58', '58', '58', '58', '59', '60', '60', '61', '61', '61', '61',
       '62', '62', '62', '62', '62', '62', '63', '64', '64', '64', '64',
       '64', '65', '66', '66', '66', '66', '66', '66', '66', '66', '66',
       '66', '66', '67', '67', '67', '67', '68', '68', '68', '68', '68',
       '69', '69', '69', '69', '69', '69', '69', '69', '70', '70', '70',
       '70', '70', '71', '71', '71', '71', '71', '71', '72', '72', '72',
       '72', '72', '72', '72', '73', '73', '73', '74', '74', '75', '75',
       '75', '75', '75', '75', '75', '76', '76', '76', '76', '76', '76',
       '76', '77', '77', '77', '77', '78', '78', '78', '78', '78', '79',
       '79', '79', '79', '79', '79', '79', '79', '80', '81', '81', '81',
       '81', '82', '82', '82', '82', '82', '82', '82', '82', '82', '83',
       '83', '83', '83', '83', '83', '83', '83', '85', '85', '85', '85',
       '85', '86', '86', '86', '86', '87', '87', '87', '87', '88', '88',
       '88', '88', '89', '89', '89', '89', '89', '89', '89', '89', '90',
       '90', '90', '90', '90', '90', '90', '91', '91', '91', '92', '92',
       '93', '93', '93', '93', '94', '94', '95', '95', '95', '96', '96',
       '96', '96', '96', '97', '97', '97', '97', '97', '97', '97', '97',
       '97', '97', '98', '99', '99', '99', '99', '99', '99', '99', '99',
       '100', '100', '100', '101', '101', '101', '101', '101', '101',
       '102', '102', '102', '102', '102', '102', '103', '103', '103',
       '103', '103', '104', '104', '104', '104', '105', '105', '105',
       '105', '105', '105', '106', '106', '106', '106', '106', '106',
       '106', '107', '107', '107', '107', '107', '107', '107', '107',
       '107', '108', '108', '108', '108', '108', '108', '108', '109',
       '109', '109', '109', '109', '109', '109', '110', '110', '110',
       '110', '112', '112', '112', '113', '114', '114', '114', '114',
       '114', '114', '115', '115', '115', '115', '115', '115', '115',
       '116', '116', '116', '117', '118', '118', '118', '119', '119',
       '119', '119', '119', '121', '121', '121', '121', '121', '121',
       '121', '121', '122', '122', '122', '122', '123', '123', '123',
       '123', '123', '124', '124', '124', '124', '124', '124', '124',
       '124', '124', '125', '125', '125', '126', '126', '126', '126',
       '127', '128', '128', '129', '129', '129', '130', '130', '130',
       '130', '130', '130', '130', '130', '130', '130', '131', '131',
       '132', '132', '133', '133', '133', '133', '133', '133', '133',
       '134', '134', '134', '134', '135', '135', '135', '135', '135',
       '135', '135', '135', '136', '136', '136', '136', '136', '136',
       '136', '136', '136', '136', '137', '137', '137', '137', '138',
       '138', '138', '138', '138', '139', '140', '140', '140', '140',
       '140', '140', '140', '140', '140', '140', '141', '141', '141',
       '141', '141', '141', '141', '141', '142', '142', '142', '142',
       '143', '144', '144', '144', '144', '145', '145', '145', '145',
       '145', '145', '145', '145', '146', '146', '146', '146', '146',
       '146', '147', '148', '149', '149', '149', '149', '149', '150',
       '151', '151', '152', '153', '153', '153', '153', '153', '154',
       '155', '155', '155', '155', '155', '155', '155', '156', '156',
       '156', '156', '157', '158', '158', '158', '158', '158', '158',
       '158', '158', '158', '158', '159', '159', '159', '159', '159',
       '160', '162', '162', '162', '162', '162', '162', '163', '163',
       '163', '163', '163', '164', '164', '164', '164', '165', '165',
       '165', '166', '166', '166', '166', '166', '166', '166', '166',
       '166', '166', '166', '167', '167', '167', '167', '168', '168',
       '168', '168', '168', '168', '168', '168', '169', '169', '169',
       '170', '170', '170', '170', '170', '171', '172', '172', '172',
       '172', '172', '172', '172', '172', '173', '173', '173', '173',
       '173', '173', '173', '173', '173', '174', '174', '174', '174',
       '174', '175', '175', '175', '175', '175', '175', '176', '176',
       '176', '176', '176', '176', '176', '176', '177', '177', '177',
       '177', '177', '178', '179', '179', '180', '180', '180', '180',
       '180', '180', '181', '181', '181', '181', '181', '181', '181',
       '182', '183', '183', '183', '183', '184', '185', '185', '185',
       '185', '185', '185', '185', '185', '185', '185', '185', '185',
       '185', '185', '185', '186', '186', '186', '186', '187', '188',
       '188', '188', '188', '190', '190', '190', '190', '190', '190',
       '190', '190', '190', '191', '191', '192', '192', '192', '192',
       '192', '192', '193', '193', '193', '193', '193', '193', '194',
       '194', '195', '195', '195', '196', '196', '196', '196', '197',
       '197', '197', '197', '197', '198', '198', '198', '198', '198',
       '198', '198', '199', '199', '199', '199', '199', '199', '199',
       '200', '201', '201', '203', '203', '203', '204', '204', '136A',
       '136A', '136A', '136A', '136A', '136A', '136A', '136A'],
      dtype=object)

In [22]: gdf['Family']
Out[22]:
0         1
1         1
2         1
3         1
4         2
       ...
893    136A
894    136A
895    136A
896    136A
897    136A
Name: Family, Length: 898, dtype: object

In [23]: fam
Out[23]: <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f6c0ff5d358>

In [24]: fam.describe()
Out[24]:
       Father                                           ...  Kids
        count  mean  std   min   25%   50%   75%   max  ... count  mean  std   min   25%   50%   75%   max
Family                                                  ...
1         4.0  78.5  0.0  78.5  78.5  78.5  78.5  78.5  ...   4.0   4.0  0.0   4.0   4.0   4.0   4.0   4.0
10        1.0  74.0  NaN  74.0  74.0  74.0  74.0  74.0  ...   1.0   1.0  NaN   1.0   1.0   1.0   1.0   1.0
100       3.0  69.0  0.0  69.0  69.0  69.0  69.0  69.0  ...   3.0   3.0  0.0   3.0   3.0   3.0   3.0   3.0
101       6.0  69.0  0.0  69.0  69.0  69.0  69.0  69.0  ...   6.0   6.0  0.0   6.0   6.0   6.0   6.0   6.0
102       6.0  69.0  0.0  69.0  69.0  69.0  69.0  69.0  ...   6.0   6.0  0.0   6.0   6.0   6.0   6.0   6.0
...       ...   ...  ...   ...   ...   ...   ...   ...  ...   ...   ...  ...   ...   ...   ...   ...   ...
95        3.0  70.0  0.0  70.0  70.0  70.0  70.0  70.0  ...   3.0   3.0  0.0   3.0   3.0   3.0   3.0   3.0
96        5.0  70.0  0.0  70.0  70.0  70.0  70.0  70.0  ...   5.0   5.0  0.0   5.0   5.0   5.0   5.0   5.0
97       10.0  69.0  0.0  69.0  69.0  69.0  69.0  69.0  ...  10.0  10.0  0.0  10.0  10.0  10.0  10.0  10.0
98        1.0  69.0  NaN  69.0  69.0  69.0  69.0  69.0  ...   1.0   1.0  NaN   1.0   1.0   1.0   1.0   1.0
99        8.0  69.0  0.0  69.0  69.0  69.0  69.0  69.0  ...   8.0   8.0  0.0   8.0   8.0   8.0   8.0   8.0

[197 rows x 32 columns]

In [25]: gdf
Out[25]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
893   136A    68.5    65.0      M    68.5     8
894   136A    68.5    65.0      M    67.7     8
895   136A    68.5    65.0      F    64.0     8
896   136A    68.5    65.0      F    63.5     8
897   136A    68.5    65.0      F    63.0     8

[898 rows x 6 columns]

In [26]: fam.count()
Out[26]:
        Father  Mother  Gender  Height  Kids
Family
1            4       4       4       4     4
10           1       1       1       1     1
100          3       3       3       3     3
101          6       6       6       6     6
102          6       6       6       6     6
...        ...     ...     ...     ...   ...
95           3       3       3       3     3
96           5       5       5       5     5
97          10      10      10      10    10
98           1       1       1       1     1
99           8       8       8       8     8

[197 rows x 5 columns]

In [27]: fam.count()['Kids'].sum()
Out[27]: 898

In [28]: len(gdf)
Out[28]: 898

In [29]: fam.max()['Kids']
Out[29]:
Family
1       4
10      1
100     3
101     6
102     6
       ..
95      3
96      5
97     10
98      1
99      8
Name: Kids, Length: 197, dtype: int64

In [30]: fam.max()['Kids'].sum()
Out[30]: 899

In [31]: fam.max()
Out[31]:
        Father  Mother Gender  Height  Kids
Family
1         78.5    67.0      M    73.2     4
10        74.0    65.5      F    65.5     1
100       69.0    66.0      M    71.2     3
101       69.0    66.7      M    75.0     6
102       69.0    66.0      M    70.0     6
...        ...     ...    ...     ...   ...
95        70.0    58.5      M    71.5     3
96        70.0    58.0      M    72.0     5
97        69.0    68.5      M    75.0    10
98        69.0    67.0      F    64.0     1
99        69.0    66.0      M    73.0     8

[197 rows x 5 columns]

In [32]: fam['Kids']
Out[32]: <pandas.core.groupby.generic.SeriesGroupBy object at 0x7f6c1d1045f8>

In [33]: fam['Kids'].max()
Out[33]:
Family
1       4
10      1
100     3
101     6
102     6
       ..
95      3
96      5
97     10
98      1
99      8
Name: Kids, Length: 197, dtype: int64

In [34]: fam.max()['Kids'].sum()
Out[34]: 899

In [35]: fam['Kids'].max().sum()
Out[35]: 899

In [36]: fam.max()['Kids'].sum()
Out[36]: 899

In [37]: fam.max()['Kids'].sum()
Out[37]: 899

In [38]: fam['Kids'].max().sum()
Out[38]: 899

In [39]: fam['Kids'].mean().sum()
Out[39]: 899

In [40]: fam['Kids'].min().sum()
Out[40]: 899

In [41]: fam['Kids'].mean().sum()
Out[41]: 899

In [42]: fam['Kids'].count()
Out[42]:
Family
1       4
10      1
100     3
101     6
102     6
       ..
95      3
96      5
97     10
98      1
99      8
Name: Kids, Length: 197, dtype: int64

In [43]: fam.count()['Kids']
Out[43]:
Family
1       4
10      1
100     3
101     6
102     6
       ..
95      3
96      5
97     10
98      1
99      8
Name: Kids, Length: 197, dtype: int64

In [44]: fam['Kids'].count()
Out[44]:
Family
1       4
10      1
100     3
101     6
102     6
       ..
95      3
96      5
97     10
98      1
99      8
Name: Kids, Length: 197, dtype: int64

In [45]: fam['Kids'].count() == fam['Kids'].max()
Out[45]:
Family
1      True
10     True
100    True
101    True
102    True
       ...
95     True
96     True
97     True
98     True
99     True
Name: Kids, Length: 197, dtype: bool

In [46]: type(fam['Kids'].count() == fam['Kids'].max())
Out[46]: pandas.core.series.Series

In [47]: fam['Kids'].count() == fam['Kids'].max()
Out[47]:
Family
1      True
10     True
100    True
101    True
102    True
       ...
95     True
96     True
97     True
98     True
99     True
Name: Kids, Length: 197, dtype: bool

In [48]: fam['Kids'].count() != fam['Kids'].max()
Out[48]:
Family
1      False
10     False
100    False
101    False
102    False
       ...
95     False
96     False
97     False
98     False
99     False
Name: Kids, Length: 197, dtype: bool

In [49]: (fam['Kids'].count() != fam['Kids'].max()).all()
Out[49]: False

In [50]: (fam['Kids'].count() == fam['Kids'].max()).all()
Out[50]: False

In [51]: import numpy as np

In [52]: np
Out[52]: <module 'numpy' from '/usr/local/lib/python3.6/dist-packages/numpy/__init__.py'>

In [53]: np.where(fam['Kids'].count() != fam['Kids'].max())
Out[53]: (array([32]),)

In [54]: np.where(fam['Kids'].count() != fam['Kids'].max())[0]
Out[54]: array([32])

In [55]: fam = gdf.groupby('Family')

In [56]: fam.count().iloc[32]
Out[56]:
Father    10
Mother    10
Gender    10
Height    10
Kids      10
Name: 130, dtype: int64

In [57]: fam.max().iloc[32]
Out[57]:
Father    68.5
Mother    66.5
Gender       M
Height      70
Kids        11
Name: 130, dtype: object

In [58]: gdf
Out[58]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
893   136A    68.5    65.0      M    68.5     8
894   136A    68.5    65.0      M    67.7     8
895   136A    68.5    65.0      F    64.0     8
896   136A    68.5    65.0      F    63.5     8
897   136A    68.5    65.0      F    63.0     8

[898 rows x 6 columns]

In [59]: gdf[:200]
Out[59]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
195     53    71.0    63.0      M    70.0     9
196     53    71.0    63.0      M    70.0     9
197     53    71.0    63.0      M    64.0     9
198     53    71.0    63.0      F    65.0     9
199     53    71.0    63.0      F    65.0     9

[200 rows x 6 columns]

In [60]: gdf[200:300]
Out[60]:
    Family  Father  Mother Gender  Height  Kids
200     53    71.0    63.0      F    64.0     9
201     53    71.0    63.0      F    63.0     9
202     53    71.0    63.0      F    63.0     9
203     54    71.0    63.0      M    71.0     4
204     54    71.0    63.0      M    71.0     4
..     ...     ...     ...    ...     ...   ...
295     73    70.0    65.0      M    73.0     3
296     73    70.0    65.0      M    72.5     3
297     73    70.0    65.0      F    65.0     3
298     74    70.0    65.0      M    69.0     2
299     74    70.0    65.0      M    69.0     2

[100 rows x 6 columns]

In [61]: gdf[300:400]
Out[61]:
    Family  Father  Mother Gender  Height  Kids
300     75    70.0    64.7      M    72.0     7
301     75    70.0    64.7      M    70.0     7
302     75    70.0    64.7      M    68.7     7
303     75    70.0    64.7      F    66.5     7
304     75    70.0    64.7      F    65.5     7
..     ...     ...     ...    ...     ...   ...
395     94    70.0    60.0      F    65.0     2
396     95    70.0    58.5      M    71.5     3
397     95    70.0    58.5      M    64.5     3
398     95    70.0    58.5      F    63.0     3
399     96    70.0    58.0      M    72.0     5

[100 rows x 6 columns]

In [62]: gdf[400:500]
Out[62]:
    Family  Father  Mother Gender  Height  Kids
400     96    70.0    58.0      M    66.0     5
401     96    70.0    58.0      F    66.0     5
402     96    70.0    58.0      F    65.0     5
403     96    70.0    58.0      F    63.0     5
404     97    69.0    68.5      M    75.0    10
..     ...     ...     ...    ...     ...   ...
495    114    69.0    63.0      F    66.0     6
496    114    69.0    63.0      F    62.0     6
497    115    69.0    63.5      M    70.5     7
498    115    69.0    63.5      M    67.0     7
499    115    69.0    63.5      M    66.0     7

[100 rows x 6 columns]

In [63]: gdf[500:600]
Out[63]:
    Family  Father  Mother Gender  Height  Kids
500    115    69.0    63.5      F    65.0     7
501    115    69.0    63.5      F    63.0     7
502    115    69.0    63.5      F    62.0     7
503    115    69.0    63.5      F    61.0     7
504    116    69.0    63.5      M    70.5     3
..     ...     ...     ...    ...     ...   ...
595    136    68.0    64.0      F    63.0    10
596    136    68.0    64.0      F    62.0    10
597    136    68.0    64.0      F    61.0    10
598    137    68.0    64.0      M    66.0     4
599    137    68.0    64.0      M    63.0     4

[100 rows x 6 columns]

In [64]: gdf[590:600]
Out[64]:
    Family  Father  Mother Gender  Height  Kids
590    136    68.0    64.0      M    68.0    10
591    136    68.0    64.0      M    67.0    10
592    136    68.0    64.0      F    65.0    10
593    136    68.0    64.0      F    64.0    10
594    136    68.0    64.0      F    63.0    10
595    136    68.0    64.0      F    63.0    10
596    136    68.0    64.0      F    62.0    10
597    136    68.0    64.0      F    61.0    10
598    137    68.0    64.0      M    66.0     4
599    137    68.0    64.0      M    63.0     4

In [65]: gdf[570:600]
Out[65]:
    Family  Father  Mother Gender  Height  Kids
570    133    68.0    65.5      M    71.5     7
571    133    68.0    65.5      M    70.7     7
572    133    68.0    65.5      M    65.5     7
573    133    68.0    65.5      F    66.5     7
574    133    68.0    65.5      F    65.2     7
575    133    68.0    65.5      F    61.5     7
576    134    68.0    65.0      M    72.0     4
577    134    68.0    65.0      M    72.0     4
578    134    68.0    65.0      F    68.0     4
579    134    68.0    65.0      F    66.0     4
580    135    68.5    65.0      M    69.2     8
581    135    68.5    65.0      M    68.0     8
582    135    68.5    65.0      M    66.0     8
583    135    68.5    65.0      M    66.0     8
584    135    68.5    65.0      F    62.0     8
585    135    68.5    65.0      F    61.5     8
586    135    68.5    65.0      F    61.0     8
587    135    68.5    65.0      F    60.0     8
588    136    68.0    64.0      M    71.0    10
589    136    68.0    64.0      M    68.0    10
590    136    68.0    64.0      M    68.0    10
591    136    68.0    64.0      M    67.0    10
592    136    68.0    64.0      F    65.0    10
593    136    68.0    64.0      F    64.0    10
594    136    68.0    64.0      F    63.0    10
595    136    68.0    64.0      F    63.0    10
596    136    68.0    64.0      F    62.0    10
597    136    68.0    64.0      F    61.0    10
598    137    68.0    64.0      M    66.0     4
599    137    68.0    64.0      M    63.0     4

In [66]: gdf[550:600]
Out[66]:
    Family  Father  Mother Gender  Height  Kids
550    128    68.7    70.5      M    71.0     2
551    128    68.7    70.5      F    61.7     2
552    129    68.5    67.0      M    73.0     3
553    129    68.5    67.0      M    71.0     3
554    129    68.5    67.0      F    67.0     3
555    130    68.5    66.5      M    70.0    11
556    130    68.5    66.5      M    69.0    11
557    130    68.5    66.5      M    69.0    11
558    130    68.5    66.5      M    68.7    11
559    130    68.5    66.5      M    68.5    11
560    130    68.5    66.5      M    68.5    11
561    130    68.5    66.5      M    68.0    11
562    130    68.5    66.5      M    68.0    11
563    130    68.5    66.5      M    68.0    11
564    130    68.5    66.5      F    63.2    11
565    131    68.0    65.0      M    67.5     2
566    131    68.0    65.0      M    66.0     2
567    132    68.0    65.5      M    66.0     2
568    132    68.0    65.5      F    64.0     2
569    133    68.0    65.5      M    71.7     7
570    133    68.0    65.5      M    71.5     7
571    133    68.0    65.5      M    70.7     7
572    133    68.0    65.5      M    65.5     7
573    133    68.0    65.5      F    66.5     7
574    133    68.0    65.5      F    65.2     7
575    133    68.0    65.5      F    61.5     7
576    134    68.0    65.0      M    72.0     4
577    134    68.0    65.0      M    72.0     4
578    134    68.0    65.0      F    68.0     4
579    134    68.0    65.0      F    66.0     4
580    135    68.5    65.0      M    69.2     8
581    135    68.5    65.0      M    68.0     8
582    135    68.5    65.0      M    66.0     8
583    135    68.5    65.0      M    66.0     8
584    135    68.5    65.0      F    62.0     8
585    135    68.5    65.0      F    61.5     8
586    135    68.5    65.0      F    61.0     8
587    135    68.5    65.0      F    60.0     8
588    136    68.0    64.0      M    71.0    10
589    136    68.0    64.0      M    68.0    10
590    136    68.0    64.0      M    68.0    10
591    136    68.0    64.0      M    67.0    10
592    136    68.0    64.0      F    65.0    10
593    136    68.0    64.0      F    64.0    10
594    136    68.0    64.0      F    63.0    10
595    136    68.0    64.0      F    63.0    10
596    136    68.0    64.0      F    62.0    10
597    136    68.0    64.0      F    61.0    10
598    137    68.0    64.0      M    66.0     4
599    137    68.0    64.0      M    63.0     4

In [67]: gdf[550:570]
Out[67]:
    Family  Father  Mother Gender  Height  Kids
550    128    68.7    70.5      M    71.0     2
551    128    68.7    70.5      F    61.7     2
552    129    68.5    67.0      M    73.0     3
553    129    68.5    67.0      M    71.0     3
554    129    68.5    67.0      F    67.0     3
555    130    68.5    66.5      M    70.0    11
556    130    68.5    66.5      M    69.0    11
557    130    68.5    66.5      M    69.0    11
558    130    68.5    66.5      M    68.7    11
559    130    68.5    66.5      M    68.5    11
560    130    68.5    66.5      M    68.5    11
561    130    68.5    66.5      M    68.0    11
562    130    68.5    66.5      M    68.0    11
563    130    68.5    66.5      M    68.0    11
564    130    68.5    66.5      F    63.2    11
565    131    68.0    65.0      M    67.5     2
566    131    68.0    65.0      M    66.0     2
567    132    68.0    65.5      M    66.0     2
568    132    68.0    65.5      F    64.0     2
569    133    68.0    65.5      M    71.7     7

In [68]: gdf['Height']
Out[68]:
0      73.2
1      69.2
2      69.0
3      69.0
4      73.5
       ...
893    68.5
894    67.7
895    64.0
896    63.5
897    63.0
Name: Height, Length: 898, dtype: float64

In [69]: gdf
Out[69]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
893   136A    68.5    65.0      M    68.5     8
894   136A    68.5    65.0      M    67.7     8
895   136A    68.5    65.0      F    64.0     8
896   136A    68.5    65.0      F    63.5     8
897   136A    68.5    65.0      F    63.0     8

[898 rows x 6 columns]

In [70]: gdf['Height']
Out[70]:
0      73.2
1      69.2
2      69.0
3      69.0
4      73.5
       ...
893    68.5
894    67.7
895    64.0
896    63.5
897    63.0
Name: Height, Length: 898, dtype: float64

In [71]: gdf['Height'].mean()
Out[71]: 66.76069042316259

In [72]: ax = gdf['Height'].hist()

In [73]: len(fam)
Out[73]: 197

In [74]: ax.set_xlabel('Child height (in)')
Out[74]: Text(0.5, 13.94444444444443, 'Child height (in)')

In [75]: ax.set_ylabel('Count')
Out[75]: Text(13.944444444444452, 0.5, 'Count')

In [76]: gdf
Out[76]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
893   136A    68.5    65.0      M    68.5     8
894   136A    68.5    65.0      M    67.7     8
895   136A    68.5    65.0      F    64.0     8
896   136A    68.5    65.0      F    63.5     8
897   136A    68.5    65.0      F    63.0     8

[898 rows x 6 columns]

In [77]: gdf['Family']
Out[77]:
0         1
1         1
2         1
3         1
4         2
       ...
893    136A
894    136A
895    136A
896    136A
897    136A
Name: Family, Length: 898, dtype: object

In [78]: gdf['Family'] == '136A'
Out[78]:
0      False
1      False
2      False
3      False
4      False
       ...
893     True
894     True
895     True
896     True
897     True
Name: Family, Length: 898, dtype: bool

In [79]: gdf.iloc[gdf['Family'] == '136A']
---------------------------------------------------------------------------
NotImplementedError                       Traceback (most recent call last)
<ipython-input-79-7c3f5ed6d6f4> in <module>
----> 1 gdf.iloc[gdf['Family'] == '136A']

/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py in __getitem__(self, key)
    877
    878             maybe_callable = com.apply_if_callable(key, self.obj)
--> 879             return self._getitem_axis(maybe_callable, axis=axis)
    880
    881     def _is_scalar_access(self, key: Tuple):

/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py in _getitem_axis(self, key, axis)
   1480
   1481         if com.is_bool_indexer(key):
-> 1482             self._validate_key(key, axis)
   1483             return self._getbool_axis(key, axis=axis)
   1484

/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py in _validate_key(self, key, axis)
   1337                 if key.index.inferred_type == "integer":
   1338                     raise NotImplementedError(
-> 1339                         "iLocation based boolean "
   1340                         "indexing on an integer type "
   1341                         "is not available"

NotImplementedError: iLocation based boolean indexing on an integer type is not available
> /usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py(1339)_validate_key()
   1337                 if key.index.inferred_type == "integer":
   1338                     raise NotImplementedError(
-> 1339                         "iLocation based boolean "
   1340                         "indexing on an integer type "
   1341                         "is not available"

ipdb> c

In [80]: gdf.loc[gdf['Family'] == '136A']
Out[80]:
    Family  Father  Mother Gender  Height  Kids
890   136A    68.5    65.0      M    72.0     8
891   136A    68.5    65.0      M    70.5     8
892   136A    68.5    65.0      M    68.7     8
893   136A    68.5    65.0      M    68.5     8
894   136A    68.5    65.0      M    67.7     8
895   136A    68.5    65.0      F    64.0     8
896   136A    68.5    65.0      F    63.5     8
897   136A    68.5    65.0      F    63.0     8

In [81]: gdf['Family'] != '136A'
Out[81]:
0       True
1       True
2       True
3       True
4       True
       ...
893    False
894    False
895    False
896    False
897    False
Name: Family, Length: 898, dtype: bool

In [82]: gdf.loc[gdf['Family'] != '136A']
Out[82]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
885    203    62.0    66.0      M    64.0     3
886    203    62.0    66.0      F    62.0     3
887    203    62.0    66.0      F    61.0     3
888    204    62.5    63.0      M    66.5     2
889    204    62.5    63.0      F    57.0     2

[890 rows x 6 columns]

In [83]: subset = gdf.loc[gdf['Family'] != '136A']

In [84]: subset['Family']
Out[84]:
0        1
1        1
2        1
3        1
4        2
      ...
885    203
886    203
887    203
888    204
889    204
Name: Family, Length: 890, dtype: object

In [85]: subset['Family'] == '136A'
Out[85]:
0      False
1      False
2      False
3      False
4      False
       ...
885    False
886    False
887    False
888    False
889    False
Name: Family, Length: 890, dtype: bool

In [86]: (subset['Family'] == '136A').any()
Out[86]: False

In [87]: subset
Out[87]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
885    203    62.0    66.0      M    64.0     3
886    203    62.0    66.0      F    62.0     3
887    203    62.0    66.0      F    61.0     3
888    204    62.5    63.0      M    66.5     2
889    204    62.5    63.0      F    57.0     2

[890 rows x 6 columns]

In [88]: gdf
Out[88]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
893   136A    68.5    65.0      M    68.5     8
894   136A    68.5    65.0      M    67.7     8
895   136A    68.5    65.0      F    64.0     8
896   136A    68.5    65.0      F    63.5     8
897   136A    68.5    65.0      F    63.0     8

[898 rows x 6 columns]

In [89]: subset
Out[89]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
885    203    62.0    66.0      M    64.0     3
886    203    62.0    66.0      F    62.0     3
887    203    62.0    66.0      F    61.0     3
888    204    62.5    63.0      M    66.5     2
889    204    62.5    63.0      F    57.0     2

[890 rows x 6 columns]

In [90]: gdf[['Father', 'Mother']]
Out[90]:
     Father  Mother
0      78.5    67.0
1      78.5    67.0
2      78.5    67.0
3      78.5    67.0
4      75.5    66.5
..      ...     ...
893    68.5    65.0
894    68.5    65.0
895    68.5    65.0
896    68.5    65.0
897    68.5    65.0

[898 rows x 2 columns]

In [91]: fam['Father'].max()
Out[91]:
Family
1      78.5
10     74.0
100    69.0
101    69.0
102    69.0
       ...
95     70.0
96     70.0
97     69.0
98     69.0
99     69.0
Name: Father, Length: 197, dtype: float64

In [92]: fam['Father'].max().mean()
Out[92]: 69.3492385786802

In [93]: fam['Mother'].max().mean()
Out[93]: 63.98426395939087

In [94]: gdf['Mother'].mean()
Out[94]: 64.08440979955456

In [95]: gdf['Father'].mean()
Out[95]: 69.23285077951002

In [96]: fam['Mother'].max().mean()
Out[96]: 63.98426395939087

In [97]: fam['Father'].max().mean()
Out[97]: 69.3492385786802

In [98]: ax = gdf.plot.scatter('Father', 'Mother')

In [99]: gdf
Out[99]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
893   136A    68.5    65.0      M    68.5     8
894   136A    68.5    65.0      M    67.7     8
895   136A    68.5    65.0      F    64.0     8
896   136A    68.5    65.0      F    63.5     8
897   136A    68.5    65.0      F    63.0     8

[898 rows x 6 columns]

In [100]: fam
Out[100]: <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f6bf71bb390>

In [101]: fam
Out[101]: <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f6bf71bb390>

In [102]: fam[['Father', 'Mother']]
Out[102]: <pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f6bf702f400>

In [103]: fam[['Father', 'Mother']].max()
Out[103]:
        Father  Mother
Family
1         78.5    67.0
10        74.0    65.5
100       69.0    66.0
101       69.0    66.7
102       69.0    66.0
...        ...     ...
95        70.0    58.5
96        70.0    58.0
97        69.0    68.5
98        69.0    67.0
99        69.0    66.0

[197 rows x 2 columns]

In [104]: fam[['Father', 'Mother']].max().plot.scatter()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-104-d2ae25a3ad51> in <module>
----> 1 fam[['Father', 'Mother']].max().plot.scatter()

TypeError: scatter() missing 2 required positional arguments: 'x' and 'y'
> <ipython-input-104-d2ae25a3ad51>(1)<module>()
----> 1 fam[['Father', 'Mother']].max().plot.scatter()

ipdb> c

In [105]: fam[['Father', 'Mother']].max().plot.scatter('Father', 'Mother')
Out[105]: <matplotlib.axes._subplots.AxesSubplot at 0x7f6bf4030cc0>

In [106]: gdf[['Father', 'Mother']]
Out[106]:
     Father  Mother
0      78.5    67.0
1      78.5    67.0
2      78.5    67.0
3      78.5    67.0
4      75.5    66.5
..      ...     ...
893    68.5    65.0
894    68.5    65.0
895    68.5    65.0
896    68.5    65.0
897    68.5    65.0

[898 rows x 2 columns]

In [107]: gdf[['Father', 'Mother']].corr()
Out[107]:
          Father    Mother
Father  1.000000  0.073665
Mother  0.073665  1.000000

In [108]: fam[['Father', 'Mother']].max()
Out[108]:
        Father  Mother
Family
1         78.5    67.0
10        74.0    65.5
100       69.0    66.0
101       69.0    66.7
102       69.0    66.0
...        ...     ...
95        70.0    58.5
96        70.0    58.0
97        69.0    68.5
98        69.0    67.0
99        69.0    66.0

[197 rows x 2 columns]

In [109]: fam[['Father', 'Mother']].max().corr()
Out[109]:
          Father    Mother
Father  1.000000  0.100606
Mother  0.100606  1.000000

In [110]: fam[['Father', 'Mother']].max().corr().iloc[0, 1]
Out[110]: 0.10060598341029559

In [111]: gdf
Out[111]:
    Family  Father  Mother Gender  Height  Kids
0        1    78.5    67.0      M    73.2     4
1        1    78.5    67.0      F    69.2     4
2        1    78.5    67.0      F    69.0     4
3        1    78.5    67.0      F    69.0     4
4        2    75.5    66.5      M    73.5     4
..     ...     ...     ...    ...     ...   ...
893   136A    68.5    65.0      M    68.5     8
894   136A    68.5    65.0      M    67.7     8
895   136A    68.5    65.0      F    64.0     8
896   136A    68.5    65.0      F    63.5     8
897   136A    68.5    65.0      F    63.0     8

[898 rows x 6 columns]

In [112]: mgdf = pd.DataFrame()

In [113]: fam['Height'].mean()
Out[113]:
Family
1      70.100000
10     65.500000
100    70.733333
101    70.416667
102    66.166667
         ...
95     66.333333
96     66.400000
97     67.150000
98     64.000000
99     67.987500
Name: Height, Length: 197, dtype: float64

In [114]: mgdf['MeanHeight'] = fam['Height'].mean()

In [115]: mgdf
Out[115]:
        MeanHeight
Family
1        70.100000
10       65.500000
100      70.733333
101      70.416667
102      66.166667
...            ...
95       66.333333
96       66.400000
97       67.150000
98       64.000000
99       67.987500

[197 rows x 1 columns]

In [116]: mgdf['Father'] = fam['Father'].max()

In [117]: mgdf['Mother'] = fam['Mother'].max()

In [118]: mgdf
Out[118]:
        MeanHeight  Father  Mother
Family
1        70.100000    78.5    67.0
10       65.500000    74.0    65.5
100      70.733333    69.0    66.0
101      70.416667    69.0    66.7
102      66.166667    69.0    66.0
...            ...     ...     ...
95       66.333333    70.0    58.5
96       66.400000    70.0    58.0
97       67.150000    69.0    68.5
98       64.000000    69.0    67.0
99       67.987500    69.0    66.0

[197 rows x 3 columns]

In [119]: mgdf.corr()
Out[119]:
            MeanHeight    Father    Mother
MeanHeight     1.00000  0.334510  0.261300
Father         0.33451  1.000000  0.100606
Mother         0.26130  0.100606  1.000000

In [120]: ax = mgdf.plot.scatter('Father', 'MeanHeight')

In [121]: ax = mgdf.plot.scatter('Mother', 'MeanHeight')

In [122]: np.random
Out[122]: <module 'numpy.random' from '/usr/local/lib/python3.6/dist-packages/numpy/random/__init__.py'>

In [123]: np.random.random?
Docstring:
random(size=None)

Return random floats in the half-open interval [0.0, 1.0). Alias for
`random_sample` to ease forward-porting to the new random API.
Type:      builtin_function_or_method

In [124]: c = np.random.random(1000)

In [125]: c
Out[125]:
array([0.5428841 , 0.94376691, 0.59329222, 0.55835318, 0.48866138,
       0.76295356, 0.01583244, 0.19064591, 0.5584668 , 0.794899  ,
       0.57700649, 0.9416929 , 0.78416667, 0.06451588, 0.81666049,
       0.94614748, 0.17738146, 0.22157065, 0.11314764, 0.43965281,
       0.81726251, 0.5782327 , 0.28492131, 0.08111573, 0.62381313,
       0.99502575, 0.53595227, 0.59887935, 0.29841153, 0.98753719,
       0.44400165, 0.59385429, 0.66840555, 0.20388006, 0.70003917,
       0.2932864 , 0.12887375, 0.48657128, 0.81588279, 0.60612966,
       0.85148566, 0.00559687, 0.23400089, 0.23147038, 0.50204346,
       0.65745335, 0.53001439, 0.6217439 , 0.00331323, 0.0811673 ,
       0.51014724, 0.88909069, 0.78665722, 0.03404505, 0.32683758,
       0.5189685 , 0.24480938, 0.10354884, 0.96833384, 0.74221394,
       0.3104328 , 0.39417872, 0.45354273, 0.38161312, 0.41020568,
       0.21833613, 0.20147057, 0.92562887, 0.89476382, 0.85664102,
       0.80435896, 0.86227298, 0.07105837, 0.13004823, 0.84291323,
       0.53352364, 0.35825867, 0.7554298 , 0.87866889, 0.39163565,
       0.94245203, 0.47895002, 0.04182642, 0.56570686, 0.43587051,
       0.23210683, 0.73759271, 0.29795186, 0.4182193 , 0.14174527,
       0.88553106, 0.25166074, 0.05799873, 0.96774465, 0.88542711,
       0.868208  , 0.16451329, 0.43929319, 0.64545363, 0.77544672,
       0.76474359, 0.24063095, 0.610934  , 0.97258249, 0.63422275,
       0.24223543, 0.5142688 , 0.8757182 , 0.06676399, 0.78809465,
       0.95167461, 0.60547647, 0.11237883, 0.49544824, 0.69108335,
       0.0413879 , 0.3362748 , 0.63471927, 0.52170408, 0.4851046 ,
       0.49494194, 0.75544551, 0.55196254, 0.5665037 , 0.67441806,
       0.20700052, 0.96949326, 0.9001856 , 0.34708598, 0.44389956,
       0.0252519 , 0.68533393, 0.52646529, 0.14971553, 0.47799563,
       0.75164884, 0.53389103, 0.51873628, 0.98813846, 0.19724753,
       0.91478264, 0.45121828, 0.2123986 , 0.08051325, 0.04456277,
       0.04097441, 0.21826575, 0.8470696 , 0.90436039, 0.32252288,
       0.10446556, 0.69351688, 0.06631957, 0.22339737, 0.13610906,
       0.75593511, 0.30569745, 0.14660821, 0.28720262, 0.64337018,
       0.26917167, 0.10119489, 0.32206908, 0.14449645, 0.36611741,
       0.98737231, 0.09651055, 0.46366514, 0.73516882, 0.3238779 ,
       0.02422321, 0.4909267 , 0.19033622, 0.18715519, 0.56158763,
       0.85660448, 0.24938663, 0.90125879, 0.19233001, 0.23320696,
       0.68933508, 0.49136174, 0.57687024, 0.07537618, 0.11020326,
       0.9236949 , 0.74979945, 0.63371654, 0.90667286, 0.6731902 ,
       0.88620326, 0.17400291, 0.40249126, 0.06964721, 0.42309424,
       0.77754033, 0.485601  , 0.3491863 , 0.1060421 , 0.32893672,
       0.13303388, 0.3117147 , 0.86219676, 0.48209022, 0.36136464,
       0.01350026, 0.11737289, 0.8105185 , 0.4462053 , 0.91791766,
       0.60413049, 0.78483812, 0.25303914, 0.88553013, 0.04773714,
       0.6371162 , 0.94576192, 0.43303947, 0.97658107, 0.67038818,
       0.65638705, 0.32975995, 0.12636609, 0.50427943, 0.63317343,
       0.08067166, 0.34952036, 0.23450754, 0.57100981, 0.60233868,
       0.91517417, 0.90092127, 0.78844553, 0.99215613, 0.13284513,
       0.23664218, 0.82915985, 0.28704363, 0.51394175, 0.94520468,
       0.96111253, 0.62326261, 0.95464368, 0.81673984, 0.93968353,
       0.00252878, 0.37037759, 0.92172839, 0.46434569, 0.56212236,
       0.08763455, 0.05696291, 0.62391769, 0.9692834 , 0.08611559,
       0.81809071, 0.08906648, 0.60481886, 0.6965846 , 0.82073197,
       0.62243668, 0.83034882, 0.84999845, 0.03876658, 0.91285306,
       0.63670025, 0.05166748, 0.11411325, 0.45889409, 0.65946787,
       0.60962191, 0.90625795, 0.97537835, 0.20970973, 0.75152853,
       0.31265528, 0.70188079, 0.089642  , 0.7922178 , 0.09933148,
       0.57815966, 0.47586099, 0.83618842, 0.88386465, 0.23377879,
       0.27767711, 0.67868934, 0.47116698, 0.18519359, 0.48418122,
       0.05301408, 0.18558516, 0.97301393, 0.9626851 , 0.28878608,
       0.97636512, 0.30307411, 0.28857274, 0.32798987, 0.23811877,
       0.71084484, 0.80251503, 0.73049986, 0.27471801, 0.32299267,
       0.88787671, 0.38673173, 0.03581096, 0.42228313, 0.0974955 ,
       0.36072297, 0.09624145, 0.55803332, 0.36787269, 0.97675249,
       0.32304018, 0.25962348, 0.85651767, 0.76555468, 0.34636533,
       0.26181038, 0.72287824, 0.52615159, 0.06648199, 0.15374962,
       0.93906472, 0.11343223, 0.06405618, 0.03876387, 0.7527535 ,
       0.91799866, 0.88922157, 0.01695468, 0.40125261, 0.33568424,
       0.85157144, 0.97274069, 0.11200389, 0.40503034, 0.26996893,
       0.07325899, 0.09670944, 0.57290283, 0.03588335, 0.81554644,
       0.70168822, 0.02194723, 0.02816674, 0.7070847 , 0.76616239,
       0.1503589 , 0.71034729, 0.66017176, 0.52781419, 0.87262635,
       0.77893   , 0.94012884, 0.46608642, 0.30436281, 0.79995815,
       0.72730711, 0.80033008, 0.3280332 , 0.22039505, 0.78767464,
       0.93683143, 0.2390863 , 0.22745629, 0.50607772, 0.74437862,
       0.01644069, 0.2898618 , 0.85544223, 0.38359717, 0.62484504,
       0.86727583, 0.15649819, 0.83670187, 0.09717801, 0.50466169,
       0.09939831, 0.86757414, 0.37271217, 0.27817935, 0.28238347,
       0.77546278, 0.32665553, 0.5923657 , 0.36737676, 0.59286583,
       0.69207909, 0.57255912, 0.01343761, 0.18614279, 0.8965847 ,
       0.07683979, 0.96152269, 0.8413096 , 0.16870512, 0.37241406,
       0.8933336 , 0.68268528, 0.25900991, 0.43873271, 0.47486651,
       0.54643087, 0.24688937, 0.23658096, 0.6184344 , 0.45092599,
       0.73517758, 0.94567062, 0.22684686, 0.50581729, 0.5273802 ,
       0.66072026, 0.29173496, 0.91046396, 0.81574327, 0.12445187,
       0.56505376, 0.16260849, 0.56951176, 0.09786433, 0.34437062,
       0.12648789, 0.10940451, 0.78718766, 0.76450781, 0.38578362,
       0.04241372, 0.25992837, 0.08917153, 0.6607809 , 0.66964836,
       0.1322655 , 0.86998021, 0.27948343, 0.26106314, 0.97422183,
       0.21590607, 0.2820291 , 0.00282403, 0.33575235, 0.55413757,
       0.48764705, 0.07101139, 0.81759045, 0.59790681, 0.94464788,
       0.34620301, 0.24597396, 0.44884313, 0.64731655, 0.37523772,
       0.66036892, 0.64901041, 0.34166454, 0.8139886 , 0.56474842,
       0.0713195 , 0.68371782, 0.05123684, 0.92577827, 0.69451943,
       0.75238274, 0.94999575, 0.56195304, 0.51191822, 0.37810215,
       0.24804251, 0.5761486 , 0.7919253 , 0.4776512 , 0.14933261,
       0.54985493, 0.90613366, 0.19443824, 0.5052699 , 0.76762885,
       0.62826995, 0.69542484, 0.3348831 , 0.06595837, 0.97652909,
       0.09442673, 0.68631458, 0.59170984, 0.85218322, 0.25227399,
       0.39576306, 0.40384066, 0.84335727, 0.39837747, 0.62980565,
       0.53056016, 0.55436636, 0.72506711, 0.28974719, 0.73635152,
       0.46665342, 0.83742865, 0.42199623, 0.67152732, 0.54601955,
       0.47708592, 0.59547541, 0.96328509, 0.41409264, 0.47275153,
       0.70847876, 0.10582331, 0.09592717, 0.97123711, 0.66536246,
       0.43991349, 0.18814234, 0.05233536, 0.87318599, 0.16134683,
       0.7112833 , 0.69097977, 0.61429962, 0.02599196, 0.72685495,
       0.80492941, 0.65562288, 0.09233706, 0.74675374, 0.03276685,
       0.23594624, 0.73075401, 0.95615415, 0.34311086, 0.03297063,
       0.7455205 , 0.82344367, 0.13319277, 0.33070863, 0.24674577,
       0.01255661, 0.77773129, 0.26437938, 0.25220336, 0.00329335,
       0.4215923 , 0.68918488, 0.75522475, 0.08362975, 0.25273094,
       0.2932171 , 0.78783138, 0.62858507, 0.15759902, 0.83745064,
       0.69140868, 0.00735998, 0.52797948, 0.66737076, 0.80808188,
       0.29920448, 0.13725307, 0.68237199, 0.61877982, 0.53795839,
       0.45933255, 0.73922436, 0.98643485, 0.58965142, 0.87217295,
       0.17944595, 0.06653038, 0.85814359, 0.15518613, 0.54644839,
       0.81821757, 0.61451404, 0.22089708, 0.20766305, 0.40446589,
       0.25722367, 0.6913995 , 0.62474528, 0.05470672, 0.16314449,
       0.70880462, 0.26895231, 0.33093638, 0.14338253, 0.23862516,
       0.91563813, 0.99815761, 0.05514349, 0.0915769 , 0.99428692,
       0.0594678 , 0.30470015, 0.49443262, 0.28487275, 0.43138234,
       0.58246345, 0.55168372, 0.46131617, 0.35618527, 0.09789571,
       0.59417042, 0.71677955, 0.49612691, 0.74987076, 0.08606301,
       0.21724971, 0.50872889, 0.68122887, 0.03431735, 0.50006727,
       0.50611009, 0.09439879, 0.56525733, 0.3550207 , 0.48820171,
       0.59323804, 0.45910584, 0.9427027 , 0.75550979, 0.49183042,
       0.36165075, 0.11011533, 0.03266327, 0.00773528, 0.89031124,
       0.50847922, 0.21115713, 0.1650617 , 0.8170568 , 0.88467181,
       0.26328701, 0.42069211, 0.56801192, 0.73822899, 0.08880343,
       0.02246337, 0.1673564 , 0.62858899, 0.98014162, 0.18857707,
       0.57111616, 0.57147508, 0.23331444, 0.62563716, 0.25350106,
       0.68118684, 0.20701322, 0.76797367, 0.53312023, 0.48779528,
       0.2990994 , 0.87688501, 0.63374546, 0.49638833, 0.02449171,
       0.4785027 , 0.32410828, 0.81630422, 0.08366069, 0.63983797,
       0.04763832, 0.5801314 , 0.69343192, 0.84063861, 0.29592158,
       0.59593279, 0.64663525, 0.11955977, 0.03638231, 0.21756991,
       0.86012924, 0.08491155, 0.79739443, 0.61012053, 0.22418642,
       0.20744579, 0.71769034, 0.09246298, 0.4241568 , 0.66640584,
       0.86986263, 0.03097743, 0.6546677 , 0.17376271, 0.02244061,
       0.49610437, 0.6278841 , 0.65681557, 0.67921338, 0.94163897,
       0.52316156, 0.87590572, 0.37797044, 0.83642024, 0.96958858,
       0.27230429, 0.97547244, 0.58031501, 0.55258342, 0.19720658,
       0.56023557, 0.2671721 , 0.45119706, 0.72318317, 0.11761925,
       0.74060027, 0.80722525, 0.72643957, 0.08494783, 0.78618815,
       0.94360603, 0.97589004, 0.77758444, 0.62037085, 0.43461687,
       0.54129881, 0.70762184, 0.75372983, 0.32465106, 0.22043963,
       0.95051574, 0.13727022, 0.99006149, 0.13079544, 0.26103793,
       0.23969397, 0.68705309, 0.24631325, 0.13258109, 0.18174417,
       0.55187122, 0.44145286, 0.89910705, 0.00685833, 0.51586947,
       0.51534013, 0.65862936, 0.89027245, 0.78335593, 0.82661955,
       0.55297239, 0.62876413, 0.50896904, 0.20936999, 0.46647938,
       0.63358524, 0.1005092 , 0.06399906, 0.33980501, 0.00767494,
       0.01495353, 0.14509757, 0.71594488, 0.58255722, 0.7143799 ,
       0.14054036, 0.53573643, 0.27287511, 0.01210526, 0.56655252,
       0.33003513, 0.54836223, 0.68267874, 0.03924751, 0.29809342,
       0.99519604, 0.40802058, 0.20553017, 0.09618817, 0.06401833,
       0.04919242, 0.37506624, 0.51653191, 0.44079667, 0.22115772,
       0.99028015, 0.45760124, 0.15603627, 0.82394021, 0.60573725,
       0.53991041, 0.01215219, 0.62700608, 0.20588808, 0.06770215,
       0.77642756, 0.44475284, 0.61439692, 0.11510744, 0.1565941 ,
       0.50703944, 0.09515832, 0.61425143, 0.11112938, 0.57774626,
       0.9354714 , 0.56400578, 0.25784827, 0.33475819, 0.22988236,
       0.04517162, 0.19799343, 0.78582012, 0.38976147, 0.46633257,
       0.52790328, 0.39811554, 0.54576339, 0.42562165, 0.11746891,
       0.7600086 , 0.0123462 , 0.74702677, 0.6506612 , 0.5306097 ,
       0.9428134 , 0.55960423, 0.16008813, 0.47847577, 0.31313827,
       0.4713828 , 0.84284197, 0.29348967, 0.83848191, 0.42255957,
       0.76495055, 0.2819984 , 0.46508975, 0.06487203, 0.85952781,
       0.33907945, 0.81423579, 0.40822362, 0.37332532, 0.64518463,
       0.90800967, 0.92064547, 0.05606001, 0.4503236 , 0.50626731,
       0.74018454, 0.34241991, 0.91935505, 0.59602257, 0.26931849,
       0.8425747 , 0.40977306, 0.99293517, 0.39673123, 0.49874789,
       0.66717515, 0.01946175, 0.25432377, 0.71924866, 0.93794606,
       0.08064852, 0.56973499, 0.85515611, 0.35960265, 0.68255887,
       0.50855616, 0.38615997, 0.30923691, 0.82136291, 0.75900234,
       0.54957635, 0.17746427, 0.79456193, 0.85624212, 0.1270739 ,
       0.33129375, 0.35407807, 0.49816687, 0.99809605, 0.24073077,
       0.95723004, 0.8433081 , 0.3085831 , 0.73838175, 0.58098274,
       0.76476167, 0.10087516, 0.57156211, 0.2450364 , 0.54757836,
       0.86567074, 0.69473168, 0.00146052, 0.12242232, 0.08248969,
       0.03951532, 0.9871219 , 0.74710206, 0.50302504, 0.45006841,
       0.54127219, 0.58540582, 0.37658158, 0.31480145, 0.01919785,
       0.83453446, 0.66940099, 0.42864786, 0.87356489, 0.30382205,
       0.62472528, 0.28326822, 0.12959554, 0.33360605, 0.94486048,
       0.26296858, 0.02543429, 0.49475864, 0.07779993, 0.35365959,
       0.48012797, 0.62439488, 0.76263387, 0.34595179, 0.97846897,
       0.29343962, 0.49840799, 0.12974306, 0.89534367, 0.2186018 ,
       0.37387207, 0.7681791 , 0.12454035, 0.22302166, 0.27402383,
       0.0033325 , 0.73471618, 0.20191642, 0.40417481, 0.71002246,
       0.79554616, 0.05518903, 0.93266171, 0.78998488, 0.96878262,
       0.44779277, 0.67936788, 0.15420884, 0.82518086, 0.44557804,
       0.92051731, 0.99319892, 0.57943231, 0.52810929, 0.77874756,
       0.87837952, 0.92526305, 0.41057632, 0.26790226, 0.47198511,
       0.03588501, 0.92674611, 0.70442361, 0.74010805, 0.0288379 ,
       0.73023882, 0.48119839, 0.28455433, 0.3581487 , 0.94409079,
       0.21564912, 0.21590089, 0.81166886, 0.66306841, 0.46991587,
       0.75592414, 0.19305082, 0.33676948, 0.61748728, 0.43675111,
       0.86225981, 0.61534872, 0.70492201, 0.81520621, 0.10573219,
       0.26566127, 0.45877995, 0.96947203, 0.74440154, 0.4271626 ,
       0.36316218, 0.83029726, 0.31709377, 0.55100102, 0.58672352,
       0.51402637, 0.34000163, 0.8178608 , 0.95314065, 0.85831261])

In [126]: from matplotlib.pyplot import plt
---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
<ipython-input-126-d67e32d26047> in <module>
----> 1 from matplotlib.pyplot import plt

ImportError: cannot import name 'plt'
> <ipython-input-126-d67e32d26047>(1)<module>()
----> 1 from matplotlib.pyplot import plt

ipdb> c

In [127]: import matplotlib.pyplot as plt

In [128]: plt.hist(c, bins=30)
Out[128]:
(array([39., 39., 44., 36., 26., 21., 38., 39., 36., 31., 31., 24., 25.,
        34., 38., 37., 39., 38., 35., 29., 36., 27., 40., 30., 33., 32.,
        30., 25., 32., 36.]),
 array([0.00146052, 0.03468376, 0.06790699, 0.10113023, 0.13435347,
        0.1675767 , 0.20079994, 0.23402318, 0.26724641, 0.30046965,
        0.33369288, 0.36691612, 0.40013936, 0.43336259, 0.46658583,
        0.49980907, 0.5330323 , 0.56625554, 0.59947878, 0.63270201,
        0.66592525, 0.69914848, 0.73237172, 0.76559496, 0.79881819,
        0.83204143, 0.86526467, 0.8984879 , 0.93171114, 0.96493438,
        0.99815761]),
 <a list of 30 Patch objects>)

In [129]: plt.close('all')

In [130]: plt.hist(c, bins=30)
Out[130]:
(array([39., 39., 44., 36., 26., 21., 38., 39., 36., 31., 31., 24., 25.,
        34., 38., 37., 39., 38., 35., 29., 36., 27., 40., 30., 33., 32.,
        30., 25., 32., 36.]),
 array([0.00146052, 0.03468376, 0.06790699, 0.10113023, 0.13435347,
        0.1675767 , 0.20079994, 0.23402318, 0.26724641, 0.30046965,
        0.33369288, 0.36691612, 0.40013936, 0.43336259, 0.46658583,
        0.49980907, 0.5330323 , 0.56625554, 0.59947878, 0.63270201,
        0.66592525, 0.69914848, 0.73237172, 0.76559496, 0.79881819,
        0.83204143, 0.86526467, 0.8984879 , 0.93171114, 0.96493438,
        0.99815761]),
 <a list of 30 Patch objects>)

In [131]: c = np.random.random(100000)

In [132]: plt.figure()
Out[132]: <Figure size 700x700 with 0 Axes>

In [133]: c = np.random.random(100000)

In [134]: plt.hist(c, bins=30)
Out[134]:
(array([3286., 3373., 3330., 3335., 3379., 3327., 3190., 3477., 3339.,
        3349., 3388., 3261., 3322., 3381., 3412., 3307., 3332., 3287.,
        3308., 3339., 3370., 3356., 3376., 3326., 3307., 3311., 3328.,
        3278., 3318., 3308.]),
 array([4.83515658e-07, 3.33335022e-02, 6.66665209e-02, 9.99995396e-02,
        1.33332558e-01, 1.66665577e-01, 1.99998596e-01, 2.33331614e-01,
        2.66664633e-01, 2.99997652e-01, 3.33330670e-01, 3.66663689e-01,
        3.99996708e-01, 4.33329726e-01, 4.66662745e-01, 4.99995764e-01,
        5.33328783e-01, 5.66661801e-01, 5.99994820e-01, 6.33327839e-01,
        6.66660857e-01, 6.99993876e-01, 7.33326895e-01, 7.66659913e-01,
        7.99992932e-01, 8.33325951e-01, 8.66658969e-01, 8.99991988e-01,
        9.33325007e-01, 9.66658025e-01, 9.99991044e-01]),
 <a list of 30 Patch objects>)

In [135]: c = np.random.random(100000)

In [136]: plt.hist(c, bins=30)
Out[136]:
(array([3394., 3386., 3372., 3284., 3235., 3338., 3274., 3269., 3336.,
        3410., 3375., 3275., 3300., 3331., 3359., 3332., 3306., 3370.,
        3336., 3359., 3373., 3378., 3346., 3354., 3327., 3322., 3292.,
        3262., 3323., 3382.]),
 array([3.66315906e-06, 3.33365029e-02, 6.66693426e-02, 1.00002182e-01,
        1.33335022e-01, 1.66667862e-01, 2.00000701e-01, 2.33333541e-01,
        2.66666381e-01, 2.99999221e-01, 3.33332060e-01, 3.66664900e-01,
        3.99997740e-01, 4.33330579e-01, 4.66663419e-01, 4.99996259e-01,
        5.33329098e-01, 5.66661938e-01, 5.99994778e-01, 6.33327618e-01,
        6.66660457e-01, 6.99993297e-01, 7.33326137e-01, 7.66658976e-01,
        7.99991816e-01, 8.33324656e-01, 8.66657496e-01, 8.99990335e-01,
        9.33323175e-01, 9.66656015e-01, 9.99988854e-01]),
 <a list of 30 Patch objects>)

In [137]: np.random.seed(0)

In [138]: np.random.seed(0)

In [139]: np.random.seed(0)

In [140]: np.random.random(10)
Out[140]:
array([0.5488135 , 0.71518937, 0.60276338, 0.54488318, 0.4236548 ,
       0.64589411, 0.43758721, 0.891773  , 0.96366276, 0.38344152])

In [141]: np.random.seed(0)

In [142]: np.random.random(10)
Out[142]:
array([0.5488135 , 0.71518937, 0.60276338, 0.54488318, 0.4236548 ,
       0.64589411, 0.43758721, 0.891773  , 0.96366276, 0.38344152])

In [143]: np.random.random(10)
Out[143]:
array([0.79172504, 0.52889492, 0.56804456, 0.92559664, 0.07103606,
       0.0871293 , 0.0202184 , 0.83261985, 0.77815675, 0.87001215])

In [144]: np.random.randint?

In [145]: d = np.random.randint(0, 10, 1000)

In [146]: d
Out[146]:
array([2, 3, 8, 1, 3, 3, 3, 7, 0, 1, 9, 9, 0, 4, 7, 3, 2, 7, 2, 0, 0, 4,
       5, 5, 6, 8, 4, 1, 4, 9, 8, 1, 1, 7, 9, 9, 3, 6, 7, 2, 0, 3, 5, 9,
       4, 4, 6, 4, 4, 3, 4, 4, 8, 4, 3, 7, 5, 5, 0, 1, 5, 9, 3, 0, 5, 0,
       1, 2, 4, 2, 0, 3, 2, 0, 7, 5, 9, 0, 2, 7, 2, 9, 2, 3, 3, 2, 3, 4,
       1, 2, 9, 1, 4, 6, 8, 2, 3, 0, 0, 6, 0, 6, 3, 3, 8, 8, 8, 2, 3, 2,
       0, 8, 8, 3, 8, 2, 8, 4, 3, 0, 4, 3, 6, 9, 8, 0, 8, 5, 9, 0, 9, 6,
       5, 3, 1, 8, 0, 4, 9, 6, 5, 7, 8, 8, 9, 2, 8, 6, 6, 9, 1, 6, 8, 8,
       3, 2, 3, 6, 3, 6, 5, 7, 0, 8, 4, 6, 5, 8, 2, 3, 9, 7, 5, 3, 4, 5,
       3, 3, 7, 9, 9, 9, 7, 3, 2, 3, 9, 7, 7, 5, 1, 2, 2, 8, 1, 5, 8, 4,
       0, 2, 5, 5, 0, 8, 1, 1, 0, 3, 8, 8, 4, 4, 0, 9, 3, 7, 3, 2, 1, 1,
       2, 1, 4, 2, 5, 5, 5, 2, 5, 7, 7, 6, 1, 6, 7, 2, 3, 1, 9, 5, 9, 9,
       2, 0, 9, 1, 9, 0, 6, 0, 4, 8, 4, 3, 3, 8, 8, 7, 0, 3, 8, 7, 7, 1,
       8, 4, 7, 0, 4, 9, 0, 6, 4, 2, 4, 6, 3, 3, 7, 8, 5, 0, 8, 5, 4, 7,
       4, 1, 3, 3, 9, 2, 5, 2, 3, 5, 7, 2, 7, 1, 6, 5, 0, 0, 3, 1, 9, 9,
       6, 6, 7, 8, 8, 7, 0, 8, 6, 8, 9, 8, 3, 6, 1, 7, 4, 9, 2, 0, 8, 2,
       7, 8, 4, 4, 1, 7, 6, 9, 4, 1, 5, 9, 7, 1, 3, 5, 7, 3, 6, 6, 7, 9,
       1, 9, 6, 0, 3, 8, 4, 1, 4, 5, 0, 3, 1, 4, 4, 4, 0, 0, 8, 4, 6, 9,
       3, 3, 2, 1, 2, 1, 3, 4, 1, 1, 0, 7, 8, 4, 3, 5, 6, 3, 2, 9, 8, 1,
       4, 0, 8, 3, 9, 5, 5, 1, 7, 8, 6, 4, 7, 3, 5, 3, 6, 4, 7, 3, 0, 5,
       9, 3, 7, 5, 5, 8, 0, 8, 3, 6, 9, 3, 2, 7, 0, 3, 0, 3, 6, 1, 9, 2,
       9, 4, 9, 1, 3, 2, 4, 9, 7, 4, 9, 4, 1, 2, 7, 2, 3, 9, 7, 6, 6, 2,
       3, 6, 0, 8, 0, 7, 6, 5, 9, 6, 5, 2, 7, 1, 9, 2, 2, 5, 6, 4, 2, 2,
       1, 0, 9, 0, 2, 8, 3, 0, 8, 8, 1, 0, 5, 8, 2, 3, 5, 3, 8, 6, 4, 6,
       3, 6, 2, 6, 5, 5, 9, 4, 6, 5, 1, 3, 3, 8, 9, 5, 5, 6, 0, 9, 7, 5,
       1, 5, 6, 6, 8, 7, 5, 3, 2, 9, 9, 3, 2, 5, 4, 1, 5, 8, 3, 5, 8, 4,
       1, 7, 8, 1, 2, 1, 1, 7, 5, 0, 4, 1, 1, 6, 6, 0, 2, 3, 7, 9, 2, 4,
       9, 0, 6, 9, 2, 4, 7, 3, 0, 5, 4, 0, 2, 3, 1, 7, 1, 3, 4, 1, 7, 4,
       0, 2, 7, 4, 0, 2, 6, 9, 2, 4, 9, 9, 5, 4, 4, 9, 8, 1, 5, 7, 0, 1,
       3, 9, 2, 8, 2, 4, 8, 2, 9, 8, 7, 8, 2, 3, 3, 6, 0, 3, 6, 3, 9, 6,
       3, 2, 2, 2, 6, 4, 6, 0, 4, 9, 2, 1, 6, 1, 7, 5, 6, 1, 6, 6, 6, 6,
       2, 5, 2, 2, 3, 2, 9, 3, 8, 5, 4, 5, 1, 5, 8, 2, 9, 9, 5, 6, 4, 0,
       8, 5, 5, 5, 1, 0, 0, 0, 0, 0, 7, 6, 3, 5, 4, 3, 4, 5, 1, 3, 6, 7,
       4, 0, 0, 7, 3, 3, 0, 0, 9, 4, 4, 5, 8, 8, 0, 1, 5, 9, 9, 6, 1, 4,
       0, 4, 7, 7, 7, 6, 2, 6, 0, 2, 7, 7, 2, 6, 1, 3, 7, 0, 5, 4, 5, 5,
       3, 8, 0, 1, 5, 4, 1, 5, 0, 6, 8, 8, 6, 3, 4, 4, 3, 6, 5, 9, 8, 1,
       3, 8, 1, 5, 8, 0, 3, 7, 1, 7, 8, 0, 7, 5, 9, 9, 6, 8, 7, 5, 9, 1,
       0, 0, 5, 6, 3, 6, 1, 7, 7, 0, 7, 6, 0, 4, 2, 7, 5, 2, 8, 5, 6, 6,
       4, 1, 5, 4, 5, 5, 6, 3, 8, 1, 4, 2, 9, 7, 4, 1, 8, 2, 3, 3, 4, 1,
       6, 2, 5, 4, 9, 1, 5, 9, 4, 5, 7, 4, 4, 2, 2, 1, 3, 0, 1, 9, 1, 6,
       9, 8, 6, 3, 0, 7, 3, 2, 5, 9, 7, 3, 4, 7, 6, 7, 3, 6, 9, 3, 7, 1,
       3, 7, 8, 8, 4, 5, 3, 6, 9, 6, 2, 9, 3, 5, 7, 9, 0, 7, 1, 2, 5, 0,
       5, 8, 9, 8, 2, 5, 3, 1, 7, 3, 8, 5, 5, 1, 9, 7, 2, 1, 0, 1, 0, 1,
       1, 6, 8, 8, 3, 2, 0, 7, 4, 6, 0, 5, 3, 3, 9, 4, 9, 0, 6, 5, 3, 0,
       0, 1, 2, 0, 2, 2, 9, 6, 7, 8, 9, 8, 2, 4, 7, 7, 5, 7, 2, 4, 1, 1,
       1, 7, 9, 0, 9, 0, 2, 1, 4, 6, 0, 6, 6, 2, 8, 6, 6, 5, 2, 5, 0, 3,
       9, 9, 7, 0, 4, 1, 3, 5, 7, 6])

In [147]: d = np.random.randint(0, 10, 1000)

In [148]: d.min()
Out[148]: 0

In [149]: d.max()
Out[149]: 9

In [150]: edges = np.aranges(0, 10+1)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
<ipython-input-150-29a57fb44df5> in <module>
----> 1 edges = np.aranges(0, 10+1)

AttributeError: module 'numpy' has no attribute 'aranges'
> <ipython-input-150-29a57fb44df5>(1)<module>()
----> 1 edges = np.aranges(0, 10+1)

ipdb> c

In [151]: edges = np.arange(0, 10+1)

In [152]: edges
Out[152]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10])

In [153]: f, ax = plt.subplots()

In [154]: ax.hist(d, bins=edges)
Out[154]:
(array([ 94., 114.,  94., 110.,  99., 101.,  87., 108., 104.,  89.]),
 array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10]),
 <a list of 10 Patch objects>)

In [155]: d = np.random.randint(0, 10, 100000)

In [156]: ax.hist(d, bins=edges)
Out[156]:
(array([ 9911., 10019.,  9928., 10166., 10189.,  9903.,  9982.,  9921.,
         9973., 10008.]),
 array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10]),
 <a list of 10 Patch objects>)

In [157]: mu, sigma = 0, 1

In [158]: np.random.normal?

In [159]: s = np.random.normal(loc=mu, sigma=1, size=1000)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-159-0fd32ee232e6> in <module>
----> 1 s = np.random.normal(loc=mu, sigma=1, size=1000)

mtrand.pyx in numpy.random.mtrand.RandomState.normal()

TypeError: normal() got an unexpected keyword argument 'sigma'
> /home/mspacek/SciPyCourse2021/notes/09_pandas/mtrand.pyx(1396)numpy.random.mtrand.RandomState.normal()

ipdb> c

In [160]: s = np.random.normal(loc=mu, scale=1, size=1000)

In [161]: s
Out[161]:
array([ 8.86651766e-01, -1.09290050e+00,  1.35733701e+00, -8.56961271e-01,
       -1.71070688e-01,  2.54666452e-01,  9.29875457e-01, -5.70818712e-01,
       -6.00471442e-01,  9.71091642e-02, -1.73487733e+00,  1.93341366e-01,
        6.44552935e-01, -8.21682749e-01, -6.41434743e-01,  3.27099148e-01,
       -9.12371278e-02, -1.29640779e-01,  4.25918649e-01,  4.50306728e-01,
        3.96220485e-01, -7.82987476e-02,  8.44217826e-01,  5.80438061e-01,
        1.27085163e+00,  9.71643878e-01, -5.35365279e-01, -1.59563371e+00,
       -1.21375190e+00,  1.26183680e+00,  1.32146596e+00, -2.39439837e-01,
        6.81864473e-01,  8.45409725e-01,  2.91760939e-01,  1.00454859e+00,
       -5.39335303e-01, -4.16844612e-01, -1.03238420e+00,  1.53594957e+00,
        9.11944888e-02,  1.37640164e+00, -4.50207882e-01, -1.60824853e+00,
       -1.56086860e+00, -2.35214234e-01,  1.89727619e+00,  7.88638500e-01,
       -2.79100487e-01, -1.36651217e+00, -1.02672416e+00, -1.61090983e-01,
       -3.56372867e-01,  7.79804613e-01, -6.43721904e-01,  9.83406935e-01,
       -9.12428170e-01,  2.95137087e-02,  8.02159002e-02, -1.07690813e+00,
       -4.89720845e-01, -2.65831975e+00, -2.82933593e-01,  1.37686236e+00,
        4.69701639e-01, -2.16887812e-01,  2.27980474e+00, -3.59533740e-01,
        4.27844362e-01, -7.60069380e-01,  1.24527760e-01, -5.73427009e-01,
       -6.18336749e-01, -8.82207610e-01, -9.78323930e-01,  7.15977812e-01,
        2.77427103e-01, -3.38596797e-01,  7.57964144e-01, -5.88547686e-01,
       -1.57955802e+00,  1.21689943e+00,  1.71564262e+00,  1.08505513e+00,
        5.65486474e-01, -2.18482177e-01, -1.25947885e-01,  4.04000141e-01,
       -9.60623903e-02, -4.92541130e-01, -6.18291031e-01, -3.46407976e-01,
       -3.61786491e-01,  8.55442965e-01, -1.22280123e+00, -9.84433790e-02,
       -3.49067697e-01, -7.26432354e-01, -2.45008111e+00,  7.48214429e-01,
        6.56443843e-01, -6.59575975e-01, -1.50372644e+00, -9.12995785e-01,
        2.53201180e-01, -2.12646434e+00,  1.04538176e-01, -4.21695446e-01,
        1.29130604e+00, -2.05061331e-01, -2.70547459e-01,  7.69107959e-02,
        7.13611645e-01,  1.11892223e+00,  1.51429180e+00,  1.35972062e+00,
       -1.42738981e+00, -6.17672263e-01,  4.28810832e-01,  2.19513085e-01,
        2.27917797e+00,  8.22376072e-01,  2.06332390e-01,  7.94551742e-01,
       -6.71245412e-01, -1.31963883e+00, -2.25314568e-01,  3.67401474e+00,
       -3.03605361e-01, -2.37380282e-01,  3.41713174e+00, -8.94351271e-01,
        1.18693307e+00, -6.07390152e-01, -5.61752771e-01,  2.45373629e+00,
       -1.05848078e+00, -1.91705429e-03,  8.87700382e-01,  1.07934485e-02,
       -4.26598235e-01,  5.32106511e-02,  5.80669348e-01,  9.60015858e-01,
       -4.32121845e-02,  8.15725333e-01,  1.34103101e+00, -3.03989184e-02,
       -1.34987154e+00, -1.05390706e-01,  8.04364795e-01,  6.85630236e-02,
        1.07188228e-01,  9.95927069e-01,  1.58800243e+00,  4.36826843e-01,
       -9.49641284e-01,  2.05187942e+00, -1.93433925e-01,  5.91214603e-01,
        1.29592516e+00,  6.56700587e-01, -4.19657909e-01,  1.11527215e+00,
        1.68095042e+00,  1.09004945e-01,  5.45743607e-01,  1.27205696e+00,
       -2.51627217e+00,  6.48835646e-02,  1.68168590e+00,  8.72722791e-01,
        1.51627849e+00,  1.27204965e+00, -2.64829032e+00, -2.78838443e-01,
       -2.37823417e-01,  6.71779195e-01,  7.32884319e-01,  3.10675306e-01,
       -6.26053930e-01,  1.73910084e-01, -1.11711529e+00, -2.11002029e+00,
        2.22102604e+00, -1.23318002e+00,  1.91764140e+00, -7.41454293e-01,
       -3.84884794e-01,  3.27132830e-01,  3.40209549e-01, -3.08911330e-02,
       -1.13244842e+00, -3.58816924e-01, -1.60929304e+00,  5.26381958e-01,
       -1.23133435e+00,  3.08823393e-01, -1.11007045e+00,  1.11786230e+00,
       -3.11561764e-01, -9.02622736e-02, -2.20184495e+00,  1.61604152e+00,
        5.47706969e-01, -4.28250482e-01,  1.09083752e+00,  1.28098592e+00,
        1.27748588e-01,  7.14536917e-01, -2.38113326e+00,  9.13282766e-01,
       -5.16316906e-01,  8.77868644e-01,  1.03291830e+00, -9.12840351e-01,
        1.29611102e+00,  7.46504264e-03, -6.02257896e-01, -8.14410884e-01,
       -1.49991627e-01,  1.78004995e+00,  2.68381828e-01,  5.17148227e-01,
        2.43700273e-01, -3.13252104e-01,  2.73069477e-01, -1.15497710e+00,
       -1.18358197e+00, -1.38161378e+00,  1.09959864e+00, -9.79880040e-01,
       -8.29066176e-01, -2.42393404e-01, -9.70222572e-01,  4.06351189e-02,
        2.51574970e+00, -6.08688677e-01,  1.36282164e+00, -8.38208529e-01,
        1.24406422e-01,  1.83725397e+00, -8.63239958e-01,  5.60635659e-01,
        1.12209054e+00, -6.63344823e-01, -6.85933429e-02,  1.64422630e+00,
       -1.35752607e+00, -6.23365349e-01,  2.01357371e+00, -1.30236798e+00,
       -1.68722210e-01,  8.54758260e-01,  1.07447699e+00, -5.64252715e-01,
        3.45439339e-01, -5.05356399e-01,  1.60439709e-01, -1.50240425e+00,
        5.46639119e-01,  1.02066488e+00, -9.30900883e-01, -1.76698610e-01,
       -1.36896508e+00, -1.51293938e+00, -1.14068630e+00, -7.96035214e-01,
       -1.04034465e+00, -8.76815490e-01,  5.83756755e-01,  5.81949835e-02,
        3.06820674e-01, -1.13691401e+00,  1.48880950e+00,  8.06790459e-01,
        3.63264159e-01,  1.38307641e+00,  1.47166766e+00,  1.61929212e+00,
        1.47319189e-01, -3.75569753e-01, -6.76803949e-02,  8.78968052e-01,
       -1.31152295e+00, -6.12875466e-01,  2.76451156e-01,  8.90928360e-01,
        1.12801297e+00, -2.00736671e+00,  6.53742629e-01,  9.45632590e-01,
       -1.30892144e+00,  1.05673403e+00,  2.18369594e-02,  1.27833156e+00,
        9.76367596e-01,  1.20571702e+00, -8.72364018e-01, -4.41942597e-01,
       -3.90456440e-01, -5.96882213e-01,  2.81735446e-01,  4.98122440e-01,
        7.09689536e-01, -5.73284672e-01,  6.28095042e-01,  8.85541865e-01,
        5.41426875e-01,  2.71802936e-01, -5.24198140e-01, -1.55775386e+00,
       -1.70980241e+00,  7.50250926e-01,  5.07104242e-01,  1.14966848e+00,
        2.74804748e-01,  4.66272890e-02, -1.01318625e+00, -4.78105728e-01,
       -4.49794479e-01, -8.71880069e-01, -2.80818532e-01,  1.66180230e+00,
       -4.52159266e-01,  1.09844154e+00,  7.84514707e-01,  7.62783852e-01,
       -9.82833719e-02,  2.11794372e-01,  3.12288607e-01, -1.14394821e+00,
       -6.47572026e-01,  4.10315425e-01,  1.39173968e+00,  6.54464715e-01,
        1.13401035e-01, -1.96395404e-01,  3.39738029e-01, -1.28646390e+00,
        2.10307876e+00,  1.11611132e-01, -4.20710197e-02,  4.71535971e-02,
        2.26836704e-01, -3.01731039e-01, -1.07257974e+00,  2.03976518e-01,
        9.97537709e-01, -9.98350945e-01, -9.47059605e-02,  1.46850434e+00,
        1.27968132e+00, -1.49907580e+00,  4.50264262e-01,  1.40786299e-01,
        1.72265448e+00, -1.23624623e+00,  8.23031389e-01,  1.38882176e+00,
       -7.98175025e-01, -1.00662851e+00, -5.92765870e-01, -1.33454413e+00,
       -1.15123244e+00,  7.22815851e-01, -2.09487400e-01, -1.24353395e-01,
       -1.26342747e+00, -7.29022146e-01, -1.68289737e-01, -4.64272749e-02,
        1.46375499e+00, -6.54811316e-01, -5.65769342e-01,  6.68560988e-01,
        4.71798024e-01,  2.90566850e-01, -5.29695701e-01, -1.30813179e-01,
        6.56108460e-01, -1.85735097e+00, -2.78054831e+00,  2.34118753e+00,
       -1.78398591e-02,  8.37382316e-01,  1.58690586e-01, -1.01050221e+00,
        2.55937835e-01, -1.31277167e+00, -4.99132059e-01,  8.91359229e-01,
       -1.49658680e+00,  5.32883415e-01, -7.32765289e-02, -1.60026232e+00,
       -6.19296545e-01,  5.33988418e-01,  9.38064390e-01,  4.82222320e-01,
       -3.85999742e-02,  9.85569841e-01, -1.29037613e+00, -1.11210782e+00,
        7.39175891e-01,  2.28133292e-01,  2.33183596e+00, -3.13895981e-01,
        5.53332708e-01,  1.30723278e+00,  2.10484645e-02, -4.71503460e-01,
        1.77313248e+00, -6.97614699e-01,  7.72116067e-01, -1.29285483e-01,
        1.64057721e+00,  2.05767240e-01,  4.88651753e-01,  1.46259452e+00,
       -1.09606994e+00,  1.33749668e+00, -9.22868607e-01,  5.29321623e-01,
        5.92298520e-01,  1.36679256e+00, -5.11472271e-01, -2.28787410e-01,
       -5.04103473e-01,  8.02690248e-01,  5.43807221e-01, -6.19096689e-01,
       -9.74128112e-01,  2.04960093e+00, -2.17133120e-01,  1.13132236e+00,
       -9.30744046e-01, -2.11652204e-01,  3.38712433e-01,  2.88876263e-01,
        1.83134549e+00,  5.03787324e-01,  1.05260537e+00, -6.00095691e-01,
        1.15607303e+00, -1.91732251e-02,  1.37923009e+00,  5.34652175e-01,
       -1.51460871e+00,  1.74442745e+00, -7.15816906e-01, -6.89096012e-01,
        1.28570553e+00, -1.82590424e+00,  1.01771555e+00,  1.07856425e+00,
        3.05622984e-03,  7.66395170e-01,  4.27438106e-01, -1.77526851e-01,
       -2.28945799e-01, -1.09256431e+00,  7.60014258e-01, -9.97288842e-01,
        1.32376113e+00, -7.97304939e-01,  1.32611739e+00,  9.76531972e-01,
       -1.08427244e+00,  8.47041387e-01, -7.07034541e-01, -2.10676574e+00,
        5.27791092e-01,  1.21657504e+00,  5.06130947e-02,  2.02985478e-01,
        2.43681874e-01,  8.16820899e-01, -1.23710724e+00,  7.22907620e-01,
        1.04191501e+00,  6.88846635e-01,  8.83037340e-02, -1.00819653e+00,
       -7.46622026e-02, -4.89006268e-01, -7.10385799e-01, -4.62255096e-02,
        3.78506726e-01,  1.86702168e-01,  7.63837318e-01,  1.50698886e+00,
        3.32992355e-01,  1.67382474e+00,  9.95911882e-02,  1.34081367e+00,
       -2.87716321e-01,  1.27616338e-01, -7.15763395e-02, -1.28316697e-01,
       -1.15188311e+00,  1.22752669e+00, -1.40964934e+00,  6.13438317e-02,
        5.31880149e-01,  2.28796073e-01,  3.24335014e-01, -9.25193861e-01,
        2.14251445e-01,  3.04154357e-01,  1.84713582e-01,  3.15180710e-01,
       -1.58147830e+00,  1.04085808e+00,  1.13126672e+00,  8.69581801e-01,
       -1.04023120e-01,  1.37431820e+00, -3.45858248e-01,  7.28557283e-01,
       -5.60943736e-01, -7.88275982e-01,  8.87454982e-01, -9.56186925e-01,
        1.81253306e-02, -1.55951657e-01,  6.59913076e-01,  1.31438592e+00,
       -1.06393653e+00, -1.54760132e+00,  1.56113745e-01, -9.31640155e-01,
        6.19886071e-01,  3.86239749e-01, -7.04212203e-01, -1.15197516e+00,
        6.47332863e-01, -1.07387000e+00, -2.09644453e+00,  8.93826283e-02,
        3.43631628e-01,  2.28338208e+00,  5.49917208e-01, -9.82686070e-01,
       -1.14185565e+00,  2.68086378e-01,  1.61441998e+00, -1.03188647e+00,
        6.94948747e-01,  1.25409187e-01,  7.10530785e-02,  2.47734227e+00,
       -2.29911287e-01, -6.45487618e-01, -8.16558888e-01, -5.62676816e-01,
       -6.70261977e-01, -1.67173557e+00, -9.95785203e-01, -2.22750295e-01,
        5.93793949e-02, -7.02315583e-01, -1.16555893e-01,  9.47261824e-01,
       -1.09162350e+00, -2.00544687e-01,  8.57555842e-01, -6.25123827e-01,
       -1.65558811e+00, -6.61507403e-01,  1.48438098e+00,  6.49000930e-01,
       -1.16077814e+00,  2.87943292e-02,  1.00039408e+00,  6.03303018e-01,
        9.13662314e-01,  7.57876709e-01,  1.43116805e+00, -8.64037420e-01,
        9.10579926e-01,  1.05238213e+00,  1.13731582e+00,  1.56249702e-01,
       -6.67044515e-02, -2.35774184e-01,  1.67938131e+00,  3.92585368e-01,
        2.38115535e-01, -1.34863974e+00,  1.67270323e-01, -5.84560647e-01,
        3.87465624e-01, -7.10996997e-01,  1.15692571e+00, -1.28382734e+00,
        3.13972833e-01, -4.02830176e-01,  5.22376995e-01,  2.07217378e-02,
       -6.71970866e-01,  6.56461970e-01,  1.34817840e-01, -1.12170623e+00,
        6.81147745e-01,  2.18402412e-01,  4.94795878e-01,  8.59931415e-01,
       -1.08387613e+00,  1.77137336e+00,  3.52975068e-01,  6.04831760e-01,
       -6.05593138e-01,  6.46330123e-01,  1.77778010e+00, -5.92285013e-01,
        7.27727106e-02,  8.73558304e-01,  4.93527576e-01,  3.94106139e-01,
       -8.81019968e-01,  6.22537550e-02, -1.64072393e-01,  3.74004220e-01,
       -1.10418963e+00, -1.45240134e+00,  1.45785047e+00,  6.05249536e-01,
        1.15976593e+00, -4.58510822e-01, -9.17368339e-01, -1.26659994e+00,
        1.22290186e+00,  3.65660203e-01, -1.37117593e-01,  7.29571383e-01,
        1.76454374e+00,  2.99216180e-01,  1.84914163e-01, -7.23431619e-01,
       -7.82224838e-01,  6.60038879e-01,  2.35430928e-01,  1.27230683e-01,
        2.54467343e-01, -1.69532432e-01,  1.53740912e+00, -6.35171168e-01,
        4.85595870e-01, -3.69467874e-01, -1.56155290e+00, -1.62406344e+00,
       -4.48932293e-01, -4.52379415e-02,  2.25154570e-01, -2.13023597e+00,
       -2.69716985e-01,  9.89556338e-01, -2.47137581e-01, -1.09539306e+00,
       -2.33658256e-01, -1.06657833e+00, -1.45030333e+00, -3.16679358e-01,
        8.66583331e-03, -1.54209927e+00,  8.38768045e-01,  9.03203541e-01,
       -2.37362619e+00,  2.44596661e-01, -8.00785058e-01,  1.14117245e+00,
        1.76834903e-01,  3.20558506e-01,  1.60826460e+00, -7.40500109e-01,
       -3.56261818e-01,  1.82514717e-01,  1.20964183e-01, -1.28112587e+00,
       -1.96955885e+00, -1.06556199e+00, -3.26409846e-02,  3.10927397e-01,
       -3.64699849e-01, -8.53412111e-01, -5.66485819e-01, -1.19382074e+00,
       -8.96332220e-01, -5.82259002e-01, -8.00830105e-01, -1.05408844e+00,
        7.07643664e-01, -6.70601534e-01,  7.35279878e-02,  3.57082828e-01,
       -5.41669402e-01, -1.13047123e-01,  1.90742222e+00,  1.21528983e+00,
       -1.00101560e+00, -8.19658876e-01, -5.79786961e-01, -1.34079147e+00,
       -8.11323419e-01, -1.25440515e-02,  6.30600573e-01, -1.02910792e+00,
        9.15071373e-01, -9.66641815e-01,  4.82283468e-01,  8.19982183e-01,
       -1.64860941e-01, -2.87030159e-01, -3.86449479e-01, -3.16198008e-01,
       -1.35150472e-01, -2.43118044e+00, -9.97868991e-01, -6.78650490e-01,
        5.49185554e-01,  5.36298838e-02, -7.29738735e-01,  8.57803691e-01,
       -5.15124719e-01,  2.22062394e+00, -1.65028945e+00, -7.75131519e-01,
        7.89155977e-01,  1.35687261e+00, -3.72391792e-01,  7.82962998e-01,
        2.53854658e-01,  7.74442234e-01, -2.52987171e+00, -2.79272855e-01,
       -1.93476738e+00,  1.22816560e+00,  1.33983862e+00, -1.39383594e+00,
       -2.96675092e-02, -1.35563115e-01, -1.33060221e+00, -1.06535211e-01,
        5.61212325e-01, -3.16822584e-01,  5.62668073e-01, -1.58254919e+00,
        1.22343461e+00, -1.73696178e-01, -3.68053971e-02, -1.51535871e-01,
       -5.45939187e-01, -4.48523123e-01,  7.44166849e-01,  6.91188458e-01,
       -1.19836838e+00, -1.60663166e+00,  1.35992938e-01, -6.29041949e-01,
       -7.49465228e-02,  4.22243620e-02, -1.26503074e+00, -8.86154632e-01,
        1.68197408e+00, -2.15052715e-01, -1.19072743e+00,  1.53899861e+00,
       -1.16703782e-01,  2.41896458e-01, -1.63780652e-01, -3.80466143e-01,
       -1.88167475e+00,  9.48535542e-01,  1.39898369e+00, -6.73150344e-01,
        8.73468440e-01, -1.16426553e+00, -4.25501102e-01, -5.18512530e-01,
        3.47167362e-01, -2.63839826e-01, -3.09079940e+00,  1.58321464e+00,
        8.33489611e-02, -3.25387981e-01,  1.97885064e+00,  2.03594569e+00,
        5.46371150e-01,  2.15072278e+00,  1.10113702e+00,  1.07616412e+00,
        1.48177900e-01, -7.72278241e-01, -3.28686891e-01,  2.01163109e+00,
       -1.57314263e+00, -1.39422295e+00,  1.33885763e+00,  3.19048391e-01,
       -1.86869857e-01,  1.23194684e+00, -1.02318561e+00,  3.64435912e-01,
       -3.72596272e-01,  8.92257122e-01,  8.98582832e-01, -2.88532979e-01,
       -7.00793312e-03, -2.17150990e-01, -5.96251674e-01,  3.18781593e-01,
       -1.63817801e+00, -6.13584551e-01,  7.22236278e-01, -7.93868968e-01,
        1.23619211e-01,  1.09334180e+00,  3.11081273e+00, -1.85302864e-01,
       -2.15024070e-01, -3.26538585e-01, -7.58068278e-02,  1.27395729e+00,
        1.16703802e+00, -1.37037694e+00,  2.05731191e-01,  8.24807572e-01,
        5.13705370e-01,  9.59598383e-01, -7.73450609e-01,  1.73236770e+00,
        2.69509491e-02,  8.84998777e-01,  2.43199987e-01,  2.03138153e+00,
        1.54110411e+00, -1.40330147e+00,  6.46996187e-01, -3.57966027e-01,
       -2.27762242e-01, -2.77596858e-02,  6.63431635e-01,  4.25053593e-01,
       -8.25356992e-01,  2.60920545e+00, -1.20461056e+00,  4.68172567e-01,
       -2.03308247e-02,  2.47275341e-01,  2.52716862e-01, -9.78456881e-01,
       -1.25819147e+00, -2.48501588e+00, -5.77530895e-02,  1.38899264e-01,
        6.03990569e-01,  4.60096120e-01,  6.16931551e-01,  1.16986496e+00,
       -1.87880730e-01,  7.65736079e-01, -1.04258123e+00,  3.63422298e-02,
       -3.13327095e-01,  3.24402053e-01,  1.40089598e-01, -1.94593689e-01,
       -1.42488957e-01,  2.45130184e-01,  1.76957628e+00,  1.99241002e-01,
       -2.46023253e-02, -7.27991086e-01,  6.73842664e-01, -1.25686015e+00,
        1.05959622e+00, -1.88294966e+00,  2.97914705e-01, -8.21200269e-01,
        5.13107684e-01,  1.75869933e-01,  9.84780937e-01,  3.73974179e-02,
       -1.97529937e-01,  3.85096097e-01, -1.49232992e+00, -1.56840906e+00,
        6.58831537e-01,  5.69488146e-01,  1.46174504e-01, -1.78105801e+00,
       -1.79477690e-01,  3.59379019e-01, -1.22326993e+00,  1.34812641e-01,
       -1.75889240e+00, -2.64405574e-01,  8.43825426e-01,  5.80188104e-01,
        9.44792026e-01, -3.27268722e-02,  1.25556685e+00,  1.52831186e+00,
        3.45999328e-01, -8.38318603e-01, -2.74727711e-01, -8.63871918e-01,
        1.69311720e+00,  5.21673447e-01,  4.97639644e-01,  9.74674201e-01,
        1.91343770e-01, -7.02577358e-01, -4.08434578e-01, -9.78613551e-01,
        1.04469604e+00, -7.23116265e-01, -6.43598467e-01,  3.54733862e-01,
        3.50600811e-01,  1.22515746e-02, -1.64605926e+00, -1.78347145e+00,
        9.90700586e-02, -2.65180589e-01,  1.44944283e+00,  2.29718056e-01,
       -8.36714751e-02, -1.97964627e-01, -1.04217744e+00,  1.62563844e+00,
        2.06030623e+00, -2.64157528e-01,  8.42156138e-01, -1.92285838e+00,
       -8.89728737e-02,  4.23591246e-01, -1.83019958e+00, -1.96083235e+00,
       -6.05954941e-01, -1.92919925e-01, -7.00946092e-01,  2.17360884e-01,
       -1.77394660e+00,  5.55585597e-01, -2.42674115e-01, -5.74454117e-01,
        9.90047428e-01, -4.46857816e-01,  4.84496878e-01,  6.99728128e-01,
        3.46895277e-01, -4.30434027e-03, -9.59058691e-01,  1.39488540e+00,
       -4.07397133e-01, -1.01574655e-01,  1.23208198e+00, -7.83009513e-01,
        4.76014760e-01,  2.78601977e-01,  6.64308143e-01,  6.55566486e-01,
       -4.99460845e-01, -1.31106883e+00,  1.33221221e+00,  7.09918901e-02,
       -3.00795477e-01,  1.22380104e+00, -1.25585146e+00, -1.00206885e+00,
       -2.69632766e-02, -3.84509251e-01, -4.32667879e-01, -1.29483162e+00,
        1.00852021e+00,  1.00562074e+00,  4.70955846e-01,  1.15876224e+00,
        1.27538021e+00,  7.07046464e-02, -3.81014345e-01,  2.52358101e-01,
       -9.91833739e-01,  5.06161913e-01, -5.61422348e-01, -5.37097320e-01,
        7.29041156e-01,  6.66695692e-01, -1.13890780e+00, -1.38246031e+00,
       -3.70655608e-01,  8.22386168e-01, -3.11751166e-01, -7.23792719e-01,
        1.28818299e+00, -1.55993204e+00,  8.54841926e-01,  5.96722396e-01])

In [162]: plt.close('all')

In [163]: f, ax = plt.subplots()

In [164]: ax.hist(s, bins=30)
Out[164]:
(array([ 1.,  3.,  5.,  3.,  7., 12., 26., 31., 51., 56., 67., 67., 94.,
        86., 94., 74., 80., 69., 51., 51., 26., 19., 11.,  7.,  5.,  1.,
         0.,  1.,  1.,  1.]),
 array([-3.0907994 , -2.86530559, -2.63981179, -2.41431798, -2.18882418,
        -1.96333037, -1.73783657, -1.51234276, -1.28684896, -1.06135515,
        -0.83586135, -0.61036755, -0.38487374, -0.15937994,  0.06611387,
         0.29160767,  0.51710148,  0.74259528,  0.96808909,  1.19358289,
         1.4190767 ,  1.6445705 ,  1.87006431,  2.09555811,  2.32105191,
         2.54654572,  2.77203952,  2.99753333,  3.22302713,  3.44852094,
         3.67401474]),
 <a list of 30 Patch objects>)

In [165]: s.mean()
Out[165]: 0.035687782684188755

In [166]: s.std()
Out[166]: 0.9822028961523992

In [167]: s1 = np.random.normal(loc=0, scale=1, size=1000)

In [168]: s2 = np.random.normal(loc=5, scale=0.5, size=1000)

In [169]: s1 + s2
Out[169]:
array([4.79210638, 2.13492226, 5.17286551, 5.60743086, 4.53275755,
       7.34266597, 4.30161175, 3.64745454, 4.91572551, 4.55592396,
       5.06838861, 6.14730703, 4.95490142, 4.23183808, 3.6429548 ,
       6.52317869, 5.20029518, 4.90535854, 4.8973242 , 5.02437653,
       6.06100502, 4.3333811 , 3.99199463, 5.40733524, 5.7650212 ,
       6.05765036, 5.14270311, 4.00995031, 5.18767914, 4.28320917,
       6.58870644, 4.3594033 , 4.51019458, 3.78383534, 4.15594927,
       4.19289236, 4.82175378, 5.22970005, 4.58353201, 5.84838354,
       3.83616899, 5.79526026, 6.79995061, 5.59292413, 3.88145146,
       3.94641681, 5.411667  , 3.66496617, 3.71054275, 5.63473174,
       5.20158832, 5.46597605, 3.66622819, 5.04490541, 6.2005671 ,
       4.85876536, 4.84731013, 4.10968259, 4.68039975, 4.31514034,
       6.22229829, 4.75461968, 6.64381949, 5.12615352, 6.4252396 ,
       4.24600858, 5.00125767, 4.68339529, 5.24704139, 4.3366388 ,
       4.43117637, 4.52810773, 5.06597678, 5.44172936, 5.06539292,
       5.23245389, 5.92990827, 4.33775634, 3.78963081, 5.25866571,
       2.56956024, 5.24001048, 4.59315833, 4.76933984, 5.45780975,
       5.52396714, 6.34146617, 5.33241919, 7.90550783, 5.87873019,
       5.75711197, 5.46310387, 4.49062112, 6.31373551, 3.60754917,
       5.75698819, 5.90161908, 6.24071331, 3.52500485, 4.50930778,
       5.41142424, 3.92620654, 4.72655552, 6.74714573, 7.34799579,
       4.92399278, 3.1865489 , 3.66340376, 3.83027589, 4.64370177,
       7.16761937, 5.85279954, 6.61987306, 3.94535995, 6.28330021,
       4.81205152, 6.62753772, 4.37922525, 5.70454437, 4.93488529,
       3.34425711, 6.85964605, 5.6595294 , 3.85891087, 4.19673708,
       5.2946383 , 5.58945892, 4.00155666, 4.54047792, 4.14779477,
       6.66354804, 4.86734133, 7.52504567, 3.55190531, 4.39643548,
       5.22763624, 4.04389212, 3.75190693, 6.2151293 , 4.08068189,
       2.58778487, 4.42699359, 5.10287957, 5.45199483, 3.26437504,
       4.72946785, 5.75148283, 4.12784252, 4.37567724, 5.0981522 ,
       4.41009805, 4.5587263 , 3.61172742, 3.59098705, 5.04647746,
       5.24275639, 3.91462251, 4.20505935, 6.9543468 , 4.39933542,
       3.88095472, 5.10435177, 3.23090521, 3.96154724, 4.41871186,
       5.82336042, 4.48857214, 4.88213539, 7.28174712, 4.823126  ,
       4.924929  , 5.52228275, 5.26089116, 2.73880417, 5.44882804,
       7.70697361, 4.81193871, 4.93532181, 3.88671803, 6.28372315,
       4.545973  , 5.67890078, 6.60020793, 6.35663704, 4.78779713,
       3.91776919, 5.05116568, 5.12327499, 5.8448745 , 3.83721756,
       5.5244174 , 5.26513011, 7.09360918, 6.72193437, 4.4915472 ,
       6.59896771, 5.4840742 , 3.9420987 , 5.66794126, 5.29762151,
       6.03295231, 5.10758139, 4.80409357, 4.13985544, 6.77851276,
       2.68366662, 5.51850401, 4.76234445, 6.41049263, 4.23304956,
       6.30122946, 6.24084713, 5.54133114, 7.1470785 , 4.80119063,
       2.94018237, 5.40608527, 3.70870947, 4.16596995, 4.77479414,
       4.09391551, 5.94334356, 5.40526981, 4.53803347, 4.99573043,
       2.88226649, 4.95796462, 4.57879661, 4.54554926, 5.45979992,
       5.2851683 , 6.47662755, 5.36539399, 5.55173648, 4.03663703,
       5.73289336, 6.04720244, 3.66093917, 4.82670216, 5.05825433,
       3.02852184, 6.98411776, 5.33712741, 6.94713139, 6.20393027,
       4.95007138, 6.50860804, 5.14699112, 4.15023803, 4.97516708,
       5.47660461, 3.92184695, 3.14475755, 4.66778718, 2.70148482,
       5.03756563, 4.93532149, 5.64848772, 5.81061317, 5.61946091,
       5.22311182, 4.02182361, 4.15400072, 5.66355305, 4.43678368,
       4.91994906, 4.22389557, 7.08114335, 4.76048994, 5.12796969,
       3.82172896, 5.67895225, 5.72433451, 4.85263143, 7.00801184,
       6.38977811, 4.37409486, 6.18186256, 4.43097286, 6.39676233,
       5.39211091, 5.28587003, 4.86466152, 4.96223526, 6.6111224 ,
       5.57370418, 3.6335793 , 5.22749756, 5.0260456 , 6.16973353,
       3.6991476 , 3.38120318, 5.32311588, 5.15574853, 4.69682099,
       4.76296312, 4.61505694, 4.66450933, 5.85748141, 4.01821323,
       3.32719944, 2.33597608, 5.08097765, 3.88454205, 5.38035471,
       3.33562818, 5.07899118, 4.52225394, 4.13379763, 6.88223446,
       5.51195279, 6.46419685, 5.23779395, 1.76075213, 4.78441928,
       4.35736199, 5.61139419, 6.39779695, 4.85975573, 2.76188325,
       6.92551474, 5.71139981, 4.59033577, 5.02200566, 4.83162045,
       3.51848938, 4.68562655, 3.84183557, 4.25119442, 4.72084686,
       4.78208859, 5.86072478, 5.50741842, 6.52544698, 4.25864659,
       3.73557583, 6.76053004, 6.30064027, 5.66462164, 5.43431667,
       6.06130658, 3.90918847, 3.99295392, 5.5552438 , 5.31686242,
       5.47121826, 6.71592365, 5.24735737, 5.99756532, 3.38317624,
       5.44901008, 4.21350324, 5.27911138, 4.82171428, 6.53495402,
       4.20064077, 4.82172899, 4.60976932, 5.75927953, 3.88511537,
       5.74392332, 4.88766262, 3.13643331, 6.83452978, 5.12663093,
       3.23264198, 3.64174338, 6.63229001, 3.96971766, 4.00063228,
       3.12965252, 5.08249357, 3.50549807, 3.54914031, 5.17749698,
       6.08404061, 3.75145844, 3.87109391, 5.72017706, 3.63893393,
       3.20137336, 5.05313264, 4.08381065, 4.21257994, 4.06336509,
       3.64018809, 5.1369941 , 4.28437063, 5.31065412, 5.07521341,
       4.96853516, 6.11029019, 5.91986995, 4.79558932, 5.64189492,
       7.20601801, 3.32812841, 4.64542174, 6.03447741, 5.59075461,
       3.9858315 , 5.95507432, 5.06988846, 4.86758538, 5.33413792,
       4.67226854, 4.68888905, 3.59060691, 7.12397437, 5.41048495,
       5.93738375, 5.2429864 , 5.24053765, 5.97584686, 4.77192489,
       5.2071384 , 3.64909254, 3.70155463, 5.43193486, 4.74889376,
       4.5883733 , 6.24855396, 3.56593392, 6.61679129, 4.10521911,
       5.5132305 , 2.94335914, 5.19582694, 4.1984455 , 6.11715333,
       5.15608113, 4.78690594, 6.65822   , 4.09205755, 5.17192916,
       5.23370992, 6.50268005, 4.55398135, 4.81404291, 4.91366206,
       5.52238791, 5.62429105, 2.51948426, 5.10105791, 4.81541389,
       3.53817492, 4.79273598, 5.85667155, 5.14954157, 5.58584559,
       3.54055655, 4.6881265 , 4.3163459 , 4.69619575, 4.38179741,
       4.98405089, 6.61587139, 4.18320486, 6.79962863, 4.49679656,
       5.69429202, 6.45406972, 4.78010064, 4.25699362, 5.31620995,
       4.3479836 , 6.54152247, 4.77030437, 4.27862095, 4.65106639,
       4.25147561, 3.7985363 , 6.78613401, 6.29923764, 6.02091826,
       5.94951054, 6.1865855 , 4.46417305, 4.50757653, 2.90223345,
       4.57387042, 3.9416299 , 3.48744842, 5.0964132 , 5.93303003,
       6.05685631, 5.58341731, 5.95100348, 5.23180039, 5.86469595,
       4.42441915, 5.99802069, 5.11961124, 5.6924116 , 4.1115408 ,
       4.37453032, 6.32651954, 5.1939311 , 4.80834127, 3.78236335,
       4.30813548, 4.50505021, 2.67547579, 5.08806441, 5.09054687,
       6.15510447, 4.6309968 , 4.9186743 , 4.94308851, 6.68178348,
       4.33148703, 4.57732506, 5.31647492, 6.34765853, 4.68359255,
       4.66559642, 6.0826945 , 6.88757014, 4.82758201, 3.35619691,
       4.95368593, 2.59717745, 4.19885707, 3.46413228, 6.26681458,
       3.38418005, 5.39398382, 4.11210694, 5.45643115, 4.32475443,
       5.1573165 , 3.42311137, 4.64379372, 6.98385904, 3.75360316,
       3.14343362, 6.21034967, 7.0799027 , 4.48897829, 6.63016417,
       4.06857813, 6.24931669, 5.51643645, 5.10016533, 3.70910463,
       5.60372273, 3.01272422, 4.58877277, 1.81265185, 5.94962458,
       7.32771365, 5.97776703, 2.73308443, 5.07470338, 4.92762165,
       5.23225929, 3.26226625, 5.97086697, 5.32463224, 5.69640904,
       4.61223625, 6.00092737, 4.98559243, 3.30966273, 4.35572557,
       5.19911812, 5.57591522, 6.33920257, 4.77197611, 3.63613147,
       4.51409136, 3.12884375, 5.5421323 , 3.90483526, 5.7529719 ,
       6.02683214, 5.51664034, 5.32069784, 5.56555411, 5.05279953,
       5.45487226, 5.51999492, 4.18255401, 3.9760886 , 4.68121675,
       7.20984125, 3.67362078, 5.51435596, 4.38661114, 4.83287986,
       5.35823624, 6.00721538, 3.47124716, 4.1271407 , 5.61320015,
       6.76106472, 4.75949606, 3.83333853, 6.31806673, 4.83606146,
       5.01119873, 4.67932404, 3.49739733, 6.29670828, 3.97614971,
       3.86157915, 4.41897279, 5.64321894, 6.70246031, 5.29774828,
       5.00056648, 4.66893097, 6.03972104, 6.2192963 , 4.02202118,
       5.39408887, 4.48325014, 3.76080496, 5.75207749, 6.62676298,
       3.48625826, 4.73557146, 4.73619882, 3.80606942, 5.5483494 ,
       4.03084535, 6.1688336 , 6.36630739, 5.89106018, 3.50309301,
       5.49754494, 6.35222345, 5.89070117, 5.07944135, 6.34756162,
       4.24516663, 4.28645756, 5.31373284, 5.67654173, 5.52035539,
       4.65830086, 3.81325495, 5.23049751, 5.11223518, 6.56507525,
       6.36987481, 3.31537297, 5.2947248 , 4.1604054 , 3.73603836,
       4.23923572, 4.08841595, 5.4639286 , 4.75471356, 3.82152861,
       5.55632021, 5.345255  , 4.2090748 , 4.23590923, 6.67054432,
       6.56590683, 4.12842877, 5.175856  , 5.46589704, 4.0599281 ,
       5.10402187, 1.74642022, 4.29299883, 6.24145862, 6.18993225,
       6.65383729, 3.914121  , 4.61659427, 5.52244195, 5.50438826,
       4.71522454, 4.73822912, 6.07401329, 7.07130042, 6.8432012 ,
       4.46972048, 6.76157963, 5.80262769, 4.05131099, 5.15413548,
       5.07529702, 4.10457243, 5.44131933, 6.94692285, 6.95691346,
       4.89935787, 5.66392656, 5.14970753, 3.90443769, 6.27175473,
       4.09263129, 6.69507688, 5.46785613, 7.16253868, 8.28627928,
       5.21425165, 4.87357915, 6.73214222, 5.61781848, 3.32157153,
       7.0378078 , 3.84682796, 5.56690568, 3.45300826, 5.33737125,
       5.02357253, 6.49114545, 4.78854596, 4.45693729, 6.42663744,
       5.33299937, 5.18221991, 6.44079977, 4.44523433, 5.76933747,
       5.57161419, 2.78399295, 5.66227395, 3.16437745, 5.12687918,
       6.83573863, 1.69288865, 3.1970847 , 4.58707124, 6.37378371,
       2.93932782, 3.48149344, 3.06063685, 4.58994416, 2.77787747,
       5.41211261, 3.82560486, 4.82511465, 6.98069791, 6.90988252,
       5.16075267, 4.6930231 , 5.20953103, 4.09499959, 4.73454647,
       5.7081874 , 5.60249328, 6.1282839 , 3.72868033, 4.94981425,
       3.65119629, 3.32590844, 5.82050136, 4.61501506, 3.48667682,
       4.827581  , 5.00125232, 3.72783798, 4.24211389, 5.16953174,
       4.6378086 , 3.18320487, 5.22139703, 4.65385773, 4.79708723,
       3.24358525, 4.35689155, 3.34482084, 4.45789143, 7.17083631,
       5.98577755, 3.69363614, 9.32339001, 4.71565151, 4.87691821,
       4.44224334, 6.75206463, 5.51207153, 5.71279212, 4.18485706,
       4.56554615, 4.89190192, 4.67320963, 5.38630963, 4.18332147,
       4.48841262, 6.82288508, 4.4049724 , 3.9403949 , 4.32608983,
       3.56228081, 4.26008192, 6.47864337, 5.21044872, 4.36075935,
       4.5738405 , 4.74744032, 5.18077771, 4.62721795, 3.64011408,
       4.84253447, 5.2045651 , 5.46635848, 5.15568127, 5.4811373 ,
       4.35035417, 4.31222993, 4.73109363, 5.68451096, 6.25335029,
       4.30415196, 4.37919477, 3.93788694, 5.15765792, 4.43900956,
       5.67203518, 5.14567833, 4.43690011, 6.42806296, 3.97340652,
       4.02419726, 5.12028201, 6.16882721, 1.96854076, 5.95961789,
       5.58581627, 4.97733922, 5.51684775, 5.29938844, 5.14320004,
       6.09878703, 6.44343638, 5.01975082, 5.26182283, 7.05299578,
       3.72019985, 5.50855921, 6.6721422 , 6.25856241, 3.92194975,
       6.21527304, 5.51197523, 5.64497376, 6.43962262, 5.58534836,
       4.60582848, 5.90221965, 3.21651999, 3.4406949 , 5.25971154,
       6.16727146, 6.28780318, 6.63945667, 3.69940328, 5.06415007,
       4.9444965 , 4.84442851, 5.59947643, 6.08877617, 4.22873403,
       4.9449837 , 4.87047489, 5.52368359, 3.83301033, 5.30312573,
       3.99270419, 6.17665936, 5.05985436, 5.57196478, 3.79733533,
       6.56106592, 4.68510482, 4.2911485 , 4.81257191, 4.92475589,
       5.00122499, 3.8506351 , 3.46564821, 3.74173637, 5.23132117,
       5.38671076, 4.24518009, 3.89341689, 4.46578313, 4.53771057,
       2.27413113, 6.15915897, 4.88658834, 5.79486628, 5.65514922,
       6.11583968, 4.19668012, 3.62712033, 6.64395666, 4.99157044,
       4.90680283, 2.624961  , 6.28551158, 5.49147283, 6.2376747 ,
       2.84377369, 5.7748246 , 5.13507625, 4.8332793 , 5.45336338,
       4.38521203, 5.15691456, 3.68466944, 5.38286533, 3.50117905,
       4.65800198, 4.63202977, 3.36000531, 4.06047477, 5.34256573,
       5.54375106, 4.77162229, 6.87013368, 4.58308469, 4.45210857,
       3.83931149, 4.85887843, 5.14150617, 5.43189708, 5.71373   ,
       6.16715547, 4.32857656, 5.49077546, 4.37657769, 5.07751694,
       5.83676761, 6.85548825, 4.40392224, 5.86750511, 5.37778542,
       4.73716037, 4.64725335, 6.0692453 , 4.46771096, 5.06048313,
       5.57696489, 6.11937938, 5.28408639, 5.09215945, 6.03077574,
       3.45948004, 4.69832214, 5.93068014, 2.57569297, 4.6208725 ,
       3.38550265, 5.60769279, 2.88161015, 4.69615068, 4.356657  ,
       5.25015528, 4.6541994 , 3.30808627, 5.51467235, 2.61656249,
       6.41169732, 5.84381109, 5.29996911, 4.1643926 , 2.73544171,
       6.04801319, 6.05422796, 3.91931721, 6.43793038, 6.79078456,
       4.17128134, 4.58726338, 6.1427472 , 4.77299851, 5.96526468,
       4.82971617, 5.25804801, 6.54437323, 4.71727948, 4.11889157,
       4.62829932, 5.26907105, 3.61670639, 5.17509653, 3.58928764,
       3.82399176, 3.65770997, 5.47104049, 5.42411451, 7.47928948,
       4.75815385, 4.13878558, 5.24280248, 4.41087043, 5.8009795 ,
       4.19056947, 3.4979853 , 4.62436837, 6.04889922, 5.98009068])

In [170]: len(s1)
Out[170]: 1000

In [171]: np.append?

In [172]: bimodal = np.concatenate([s1, s2])

In [173]: f, ax = plt.subplots()

In [174]: ax.hist(bimodal, bins=30)
Out[174]:
(array([  9.,   7.,  23.,  26.,  45.,  69.,  93., 116., 127., 123., 106.,
         88.,  72.,  52.,  31.,   6.,   2.,   2.,   1.,   2.,   3.,  20.,
         72., 157., 234., 230., 161.,  89.,  21.,  13.]),
 array([-2.78566389, -2.47488092, -2.16409795, -1.85331497, -1.542532  ,
        -1.23174903, -0.92096605, -0.61018308, -0.29940011,  0.01138287,
         0.32216584,  0.63294881,  0.94373179,  1.25451476,  1.56529773,
         1.8760807 ,  2.18686368,  2.49764665,  2.80842962,  3.1192126 ,
         3.42999557,  3.74077854,  4.05156152,  4.36234449,  4.67312746,
         4.98391043,  5.29469341,  5.60547638,  5.91625935,  6.22704233,
         6.5378253 ]),
 <a list of 30 Patch objects>)

In [175]: s1.mean()
Out[175]: -0.03287121205741785

In [176]: s1.std()
Out[176]: 0.9738509821218679

In [177]: s2.mean()
Out[177]: 5.015644894385297

In [178]: s2.std()
Out[178]: 0.49506402115106907

In [179]: bimodal.mean()
Out[179]: 2.4913868411639397

In [180]: bimodal.std()
Out[180]: 2.6398135880137206

In [181]: import request
---------------------------------------------------------------------------
ModuleNotFoundError                       Traceback (most recent call last)
<ipython-input-181-e392607f0c42> in <module>
----> 1 import request

ModuleNotFoundError: No module named 'request'
> <ipython-input-181-e392607f0c42>(1)<module>()
----> 1 import request

ipdb> c

In [182]: import requests

In [183]: requests
Out[183]: <module 'requests' from '/usr/local/lib/python3.6/dist-packages/requests/__init__.py'>

In [184]: requests?
Type:        module
String form: <module 'requests' from '/usr/local/lib/python3.6/dist-packages/requests/__init__.py'>
File:        /usr/local/lib/python3.6/dist-packages/requests/__init__.py
Docstring:
Requests HTTP Library
~~~~~~~~~~~~~~~~~~~~~

Requests is an HTTP library, written in Python, for human beings.
Basic GET usage:

   >>> import requests
   >>> r = requests.get('https://www.python.org')
   >>> r.status_code
   200
   >>> b'Python is a programming language' in r.content
   True

... or POST:

   >>> payload = dict(key1='value1', key2='value2')
   >>> r = requests.post('https://httpbin.org/post', data=payload)
   >>> print(r.text)
   {
     ...
     "form": {
       "key1": "value1",
       "key2": "value2"
     },
     ...
   }

The other HTTP methods are supported - see `requests.api`. Full documentation
is at <https://requests.readthedocs.io>.

:copyright: (c) 2017 by Kenneth Reitz.
:license: Apache 2.0, see LICENSE for more details.

In [185]: f, ax = plt.subplot()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-185-4fde1743248d> in <module>
----> 1 f, ax = plt.subplot()

TypeError: 'AxesSubplot' object is not iterable
> <ipython-input-185-4fde1743248d>(1)<module>()
----> 1 f, ax = plt.subplot()

ipdb> c

In [186]: f, ax = plt.subplots()

In [187]: plt.subplot?

In [188]: plt.subplots?

In [189]: plt.close('all')

In [190]: counts, binedges = np.histogram(bimodal, bins=30)

In [191]: counts
Out[191]:
array([  9,   7,  23,  26,  45,  69,  93, 116, 127, 123, 106,  88,  72,
        52,  31,   6,   2,   2,   1,   2,   3,  20,  72, 157, 234, 230,
       161,  89,  21,  13])

In [192]: counts.max()
Out[192]: 234

In [193]: counts.argmax()
Out[193]: 24

In [194]: import scipy.stats as stats

In [195]: stats
Out[195]: <module 'scipy.stats' from '/usr/local/lib/python3.6/dist-packages/scipy/stats/__init__.py'>

In [196]: rv = stats.norm(loc=2, scale=10)

In [197]: len(rv)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-197-782a4633d294> in <module>
----> 1 len(rv)

TypeError: object of type 'rv_frozen' has no len()
> <ipython-input-197-782a4633d294>(1)<module>()
----> 1 len(rv)

ipdb> c

In [198]: type(rv)
Out[198]: scipy.stats._distn_infrastructure.rv_frozen

In [199]: s = rv.rvs(50)

In [200]: s
Out[200]:
array([ -3.2710605 ,   1.77199031,   1.42442069,  -6.00193026,
         4.94434768, -11.09303053,   1.78275952,   4.31216885,
         1.57346785,  -1.22892248, -11.44686808,  -1.52131201,
         3.26014533,  10.23188365,   7.93751728,  -4.68654615,
         7.77834998,  -1.84808936,  -0.89925129,  -3.86564044,
        -4.89064813,   9.85947079, -15.06084577,   4.08011159,
         1.81138562,  11.97170682,  21.43699955,   9.25438247,
        16.03054458,  -0.94868494,   9.44484937,  -2.82208155,
        -0.79654686,   8.59246337,   4.0111066 , -11.69284361,
         9.91651508,  10.52264014,   7.0973798 ,   4.68485782,
        15.88463195,   0.5815058 ,   1.29854797,  12.38602968,
        13.46973205,   0.80592011,  17.30379314,   1.29607924,
         4.94338548,   2.34835455])

In [201]: f, ax = plt.subplots()

In [202]: ax.hist(s, bins='auto')
Out[202]:
(array([ 4.,  3.,  9., 17., 10.,  5.,  2.]),
 array([-15.06084577,  -9.84686787,  -4.63288997,   0.58108794,
          5.79506584,  11.00904374,  16.22302164,  21.43699955]),
 <a list of 7 Patch objects>)

In [203]: stats.ttest_1samp?

In [204]: t, p = stats.ttest_1samp(s, 0)

In [205]: t
Out[205]: 2.949864365882107

In [206]: p
Out[206]: 0.004863117324939956

In [207]: s.mean()
Out[207]: 3.239502855419059

In [208]: stats.ttest_1samp?

In [209]: stats.ttest_rel?

In [210]: stats.ttest_ind?

In [211]: t, p = stats.ttest_1samp(s, 0)

In [212]: len(s)
Out[212]: 50

In [213]: s = rv.rvs(500)

In [214]: f, ax = plt.subplots()

In [215]: ax.hist(s, bins='auto')
Out[215]:
(array([ 3.,  3., 13., 13., 24., 46., 52., 73., 69., 52., 63., 48., 20.,
        16.,  4.,  1.]),
 array([-28.826472  , -25.13889628, -21.45132056, -17.76374484,
        -14.07616912, -10.3885934 ,  -6.70101768,  -3.01344196,
          0.67413376,   4.36170948,   8.0492852 ,  11.73686092,
         15.42443664,  19.11201236,  22.79958808,  26.4871638 ,
         30.17473952]),
 <a list of 16 Patch objects>)

In [216]: t, p = stats.ttest_1samp(s, 0)

In [217]: p
Out[217]: 7.781396328558117e-05

In [218]: s.mean()
Out[218]: 1.8267724629234807

In [219]: s1 = stats.norm.rvs(loc=0, scale=1, size=1000)

In [220]: s2 = stats.norm.rvs(loc=0.5, scale=1, size=500)

In [221]: f, ax = plt.subplots()

In [222]: ax.hist(s1, bins='auto')
Out[222]:
(array([  1.,   1.,   2.,   3.,   8.,   7.,  12.,  23.,  47.,  69.,  85.,
         84., 103., 117., 102.,  77.,  91.,  55.,  46.,  26.,  21.,  10.,
          4.,   6.]),
 array([-3.64234112, -3.36982465, -3.09730818, -2.82479171, -2.55227524,
        -2.27975877, -2.0072423 , -1.73472583, -1.46220936, -1.1896929 ,
        -0.91717643, -0.64465996, -0.37214349, -0.09962702,  0.17288945,
         0.44540592,  0.71792239,  0.99043886,  1.26295533,  1.5354718 ,
         1.80798827,  2.08050474,  2.35302121,  2.62553768,  2.89805415]),
 <a list of 24 Patch objects>)

In [223]: ax.hist(s2, bins='auto')
Out[223]:
(array([ 2.,  7., 10., 29., 34., 40., 65., 65., 60., 58., 61., 39., 20.,
         6.,  4.]),
 array([-2.28457792, -1.93349996, -1.582422  , -1.23134404, -0.88026608,
        -0.52918812, -0.17811017,  0.17296779,  0.52404575,  0.87512371,
         1.22620167,  1.57727963,  1.92835758,  2.27943554,  2.6305135 ,
         2.98159146]),
 <a list of 15 Patch objects>)

In [224]: stats.ttest_ind?

In [225]: t, tp = stats.ttest_ind(s1, s2, equal_var=False)

In [226]: tp
Out[226]: 6.150265239425605e-17

In [227]: d, kp = stats.ks_2samp(s1, s2)

In [228]: kp
Out[228]: 6.162848009694244e-13

In [229]: u, up = stats.mannwhitneyu(s1, s2)

In [230]: up
Out[230]: 4.9653746259581856e-17

In [231]: stats.kstest?

In [232]: bimodal
Out[232]:
array([ 0.02644269, -2.01967486, -0.35531208, ...,  4.69251464,
        5.25136124,  5.6245197 ])

In [233]: f, ax = plt.subplots()

In [234]: ax.hist(bimodal, bins=30)
Out[234]:
(array([  9.,   7.,  23.,  26.,  45.,  69.,  93., 116., 127., 123., 106.,
         88.,  72.,  52.,  31.,   6.,   2.,   2.,   1.,   2.,   3.,  20.,
         72., 157., 234., 230., 161.,  89.,  21.,  13.]),
 array([-2.78566389, -2.47488092, -2.16409795, -1.85331497, -1.542532  ,
        -1.23174903, -0.92096605, -0.61018308, -0.29940011,  0.01138287,
         0.32216584,  0.63294881,  0.94373179,  1.25451476,  1.56529773,
         1.8760807 ,  2.18686368,  2.49764665,  2.80842962,  3.1192126 ,
         3.42999557,  3.74077854,  4.05156152,  4.36234449,  4.67312746,
         4.98391043,  5.29469341,  5.60547638,  5.91625935,  6.22704233,
         6.5378253 ]),
 <a list of 30 Patch objects>)

In [235]: stats.kstest?

In [236]: d, p = stats.kstest(bimodal, 'norm', args=(bimodal.mean(), bimodal.std()))

In [237]: p
Out[237]: 1.4501395795693025e-84

In [238]: import statsmodels

In [239]: statsmodels/
  File "<ipython-input-239-b5b779e7cbc0>", line 1
    statsmodels/
                ^
SyntaxError: invalid syntax


In [240]: statsmodels?
Type:        module
String form: <module 'statsmodels' from '/usr/local/lib/python3.6/dist-packages/statsmodels/__init__.py'>
File:        /usr/local/lib/python3.6/dist-packages/statsmodels/__init__.py
Docstring:   <no docstring>

In [241]: df = pd.DataFrame()

In [242]: df.dropna?

In [243]: pwd
Out[243]: '/home/mspacek/SciPyCourse2021/notes/09_pandas'

In [244]: cd ..
/home/mspacek/SciPyCourse2021/notes

In [245]: cd 10_stats/
/home/mspacek/SciPyCourse2021/notes/10_stats

In [246]: ls
10_stats.md  10_stats.pdf  KS_vs_MWU.txt  stats.csv  stats.csv.py  stats.png

In [247]: pd.read_csv
Out[247]: <function pandas.io.parsers.read_csv(filepath_or_buffer:Union[str, pathlib.Path, IO[~AnyStr]], sep=',', delimiter=None, header='infer', names=None, index_col=None, usecols=None, squeeze=False, prefix=None, mangle_dupe_cols=True, dtype=None, engine=None, converters=None, true_values=None, false_values=None, skipinitialspace=False, skiprows=None, skipfooter=0, nrows=None, na_values=None, keep_default_na=True, na_filter=True, verbose=False, skip_blank_lines=True, parse_dates=False, infer_datetime_format=False, keep_date_col=False, date_parser=None, dayfirst=False, cache_dates=True, iterator=False, chunksize=None, compression='infer', thousands=None, decimal:str='.', lineterminator=None, quotechar='"', quoting=0, doublequote=True, escapechar=None, comment=None, encoding=None, dialect=None, error_bad_lines=True, warn_bad_lines=True, delim_whitespace=False, low_memory=True, memory_map=False, float_precision=None)>

In [248]: df = pd.read_csv('stats.csv')

In [249]: df
Out[249]:
      control  treatment
0    0.675131  -0.680471
1   -0.158436  -1.185001
2    0.604462  -0.258454
3   -0.120994  -1.133002
4    0.355281   1.664425
..        ...        ...
595       NaN  -1.470002
596       NaN  -3.203882
597       NaN  -2.743236
598       NaN   3.742266
599       NaN  -1.796751

[600 rows x 2 columns]

In [250]: df.dropna()
Out[250]:
      control  treatment
0    0.675131  -0.680471
1   -0.158436  -1.185001
2    0.604462  -0.258454
3   -0.120994  -1.133002
4    0.355281   1.664425
..        ...        ...
495  0.650257   2.008577
496 -0.514232  -2.201475
497  0.681779   1.900845
498 -0.465943  -1.898758
499 -0.566754  -3.804355

[500 rows x 2 columns]

In [251]: df['control']
Out[251]:
0      0.675131
1     -0.158436
2      0.604462
3     -0.120994
4      0.355281
         ...
595         NaN
596         NaN
597         NaN
598         NaN
599         NaN
Name: control, Length: 600, dtype: float64

In [252]: df['control'].dropna()
Out[252]:
0      0.675131
1     -0.158436
2      0.604462
3     -0.120994
4      0.355281
         ...
495    0.650257
496   -0.514232
497    0.681779
498   -0.465943
499   -0.566754
Name: control, Length: 500, dtype: float64

In [253]: np.array(df['control'].dropna())
Out[253]:
array([ 6.75130984e-01, -1.58435780e-01,  6.04461529e-01, -1.20993687e-01,
        3.55281281e-01,  1.94462573e-01,  2.82313992e-01,  5.47550363e-01,
       -7.04686313e-01,  2.38139075e-01, -9.53855799e-02, -2.09826336e-01,
        3.37974923e-02, -6.93066537e-01,  4.31875684e-01, -2.29840528e-01,
        4.68202401e-01,  3.98265305e-01,  6.03289969e-01, -7.39247478e-01,
       -4.67725154e-02, -8.48417695e-01,  1.22518454e-01,  1.65342357e-01,
       -3.36212473e-01, -5.15651979e-02, -9.79860621e-01,  1.79870971e-01,
        3.18006585e-01, -3.07220701e-01,  3.61583027e-01, -6.91123259e-01,
        1.70160081e-02,  4.06283614e-03,  4.36911245e-01,  4.04220977e-01,
        4.51984520e-01,  5.10144467e-01,  3.40727958e-01, -1.96687634e-01,
        8.14729689e-01, -5.87873950e-01, -5.84859353e-02, -2.21903153e-01,
        1.55662182e-02,  2.88662705e-02, -2.35390988e-02,  1.28035846e-01,
       -1.93001439e-01,  9.42036073e-01,  4.13695302e-01,  2.11621988e-01,
       -5.26340623e-01, -1.82161069e-02, -3.38980050e-01,  6.50612620e-02,
        3.21809105e-01, -8.24384989e-01, -5.03679068e-02, -5.06932399e-01,
        7.26611599e-01, -3.78767392e-01,  5.66074391e-01,  6.26190511e-01,
       -2.12629771e-01, -1.31410191e-01, -3.00185847e-01,  6.47495006e-01,
        2.67139689e-01,  1.49568179e-01, -2.04654984e-01,  2.89764010e-01,
       -1.94556302e-01,  1.42994009e-01,  3.72985169e-01, -1.64539471e-01,
        3.27707171e-02, -3.64876361e-01, -3.78092956e-01,  3.77675926e-01,
        1.94393337e-01,  4.55300329e-01, -1.77946543e-02, -6.37745651e-01,
       -6.24488716e-01,  7.03810016e-01, -4.19630715e-01,  1.60299908e+00,
       -7.12956650e-01, -1.34617640e+00, -1.97059666e-01, -3.45040517e-01,
       -4.88967676e-01,  9.16493946e-01,  3.07328850e-01,  5.04474189e-01,
        4.49326620e-01,  1.17099183e-01,  6.48028760e-02,  5.50585699e-02,
       -5.28374577e-01, -3.49943377e-02,  4.42731322e-01, -3.76792103e-01,
        7.15929470e-01, -2.76873801e-01, -3.75949488e-01, -7.46310554e-02,
        1.91184481e-01, -7.00322644e-03,  9.29943303e-04, -5.25463833e-01,
        1.77506268e-01, -4.05824938e-01,  1.05471103e-01,  5.89765037e-01,
        1.02961538e+00,  3.35818741e-01, -1.20969487e+00, -1.37413998e+00,
        1.20016362e-01,  7.68262085e-01,  2.58416264e-01, -7.63174982e-02,
        3.62232413e-01, -1.01608099e-02,  6.35132518e-01,  3.56440441e-01,
       -3.59590042e-01, -5.59717834e-01,  1.36722781e-01,  7.51942763e-02,
        5.75691669e-01, -4.98675172e-01,  5.54154261e-01, -7.81628461e-01,
        7.92405606e-03,  7.38007964e-01,  5.35878429e-01, -2.83474156e-01,
       -7.28655555e-01,  8.76536057e-01,  5.62473955e-01, -4.34830623e-01,
        4.55983118e-01, -4.70402587e-01, -2.09853661e-01, -2.14518840e-01,
       -2.93732415e-01, -8.08125627e-01,  6.54178888e-02, -4.83416202e-01,
       -4.76516226e-01, -2.18719194e-01,  1.81893768e-01, -1.41054907e-01,
       -5.10425286e-01, -4.85853359e-02, -1.60791100e-01, -9.26346812e-03,
       -7.90260587e-01,  2.62410634e-01, -3.01182726e-01,  4.10195657e-02,
       -7.51145948e-01,  1.44427727e+00, -2.73902262e-01,  1.97922539e-01,
        7.36383320e-01,  1.01380686e+00, -1.30437905e-01, -6.12776702e-02,
        3.19838911e-01,  2.37610498e-01,  8.70277307e-01, -5.64844937e-01,
       -1.94838144e-01, -8.43392332e-02, -3.98929970e-01,  6.74624474e-01,
        3.16294212e-01, -3.47287725e-02, -1.28708522e-01, -9.53707242e-02,
       -1.49636182e-01, -8.99217807e-01,  6.45913345e-01, -8.23083439e-01,
       -1.91290259e-01, -3.18199742e-02, -9.69833821e-01,  6.90976720e-01,
       -7.37745154e-02, -6.53478335e-01,  4.82732514e-01,  1.68494267e-01,
       -7.01766019e-02,  7.79863042e-01,  6.07824016e-01,  5.38141167e-01,
       -1.26198296e-01,  4.49703605e-01, -9.80822111e-01,  1.22427290e-02,
        2.57584364e-01,  4.12416024e-01,  1.16733468e+00,  1.32324358e+00,
       -1.43340207e-01, -3.93877324e-01,  9.72301712e-02,  9.48660127e-01,
        1.47081547e-01, -3.24360403e-01,  8.78677773e-01, -3.55244928e-01,
       -7.81452646e-01,  1.36822398e-01, -6.98203025e-01,  1.09621136e+00,
       -2.63656631e-01,  1.73992261e-01, -3.96705627e-01,  6.66413287e-02,
       -6.58857695e-01, -7.70707956e-01,  1.05807784e+00, -3.58357519e-01,
       -3.58020187e-01,  2.23613667e-01, -4.15649848e-01,  6.91095055e-01,
       -6.60754304e-01, -5.78541247e-01, -8.24345756e-03, -4.61221875e-01,
       -4.48163383e-02, -1.73873384e-01, -9.03641992e-01, -4.58784159e-01,
        5.31341256e-01,  3.11584378e-01, -5.73685408e-01,  1.59478723e-01,
       -8.00100983e-02, -5.43109627e-01, -6.09203854e-01, -1.10317387e+00,
        1.04024192e+00, -4.16470441e-01,  2.54301459e-01, -1.04648669e-02,
        4.30238113e-01,  4.55116668e-01, -3.19450236e-01,  1.04945475e+00,
       -9.89411362e-01, -7.24209651e-01,  7.87409443e-03,  2.23126425e-01,
       -7.11740242e-01,  1.05743718e+00, -6.50620747e-01, -1.92327606e-01,
       -1.56992729e-02, -5.76540529e-01, -5.11327390e-02, -5.77057935e-01,
        2.84445085e-01, -6.70314189e-02,  7.73344606e-02,  2.53827968e-01,
       -1.92560415e-01, -9.47623347e-02, -2.62765497e-01,  7.62490961e-01,
        1.23236404e-01,  6.21846231e-01, -1.07037108e-01,  1.03198357e-01,
       -6.88173310e-01,  3.92999033e-01, -2.05308310e-01,  2.64865032e-01,
        3.34488862e-01, -1.08313360e+00, -1.67685024e-01,  1.14817248e-01,
        2.14304000e-01, -7.69891670e-02, -9.89951072e-03, -1.23082724e-01,
        3.41552807e-01,  3.10373246e-01, -8.57793984e-02, -6.61458665e-01,
       -2.22494710e-01, -1.89426055e-01,  4.29191624e-01,  3.22661024e-02,
        8.10466614e-01, -1.29317595e+00, -2.90907482e-01, -4.72674465e-01,
        1.12306272e-01,  4.33392963e-01,  2.37848274e-01,  3.07782635e-01,
       -3.11089550e-01, -7.67989758e-01,  1.17786279e-01,  3.39527604e-01,
       -1.57732827e-01, -1.56299010e-01, -8.03449968e-01,  4.00185892e-01,
        4.97207860e-01, -1.31621114e-01,  4.57162263e-01,  5.68140613e-01,
        8.42145214e-01, -3.70353568e-01,  1.14918599e-01, -1.15259565e-01,
       -5.94878509e-01,  5.15884495e-01,  1.58839199e-01, -2.91593874e-02,
       -6.06615148e-01, -5.04504078e-01,  8.69601157e-01, -2.70939593e-01,
        8.61806501e-01, -4.07379829e-01, -1.93336413e-01,  1.23064886e-01,
       -3.69770835e-01, -8.79493262e-03,  1.06610025e+00,  1.50697277e-01,
       -1.26513843e+00, -5.23421232e-01,  8.75219337e-02,  5.21330036e-01,
       -4.80678333e-01, -3.60553974e-01,  1.19628354e-01, -9.90819279e-01,
        3.56367509e-01, -7.65279331e-01, -2.06988398e-01,  1.08298210e+00,
        4.87515430e-01,  1.71939379e-02, -4.03986129e-01, -2.63298740e-01,
        1.83983317e-01, -7.57340055e-01, -5.04240253e-01,  7.24000145e-01,
        8.48106294e-01, -3.92274166e-02, -3.14642956e-02,  4.54502498e-01,
       -5.32520775e-02,  4.19062505e-01,  1.54054778e-01,  2.57260518e-01,
        5.19666115e-01,  5.89879114e-01, -3.62042065e-01, -4.14599625e-01,
        2.95255371e-01,  3.75554824e-01, -3.19296427e-01, -2.37391680e-01,
        1.06167911e-01, -1.67790948e-01,  1.18610169e-01,  2.40760470e-01,
        2.87603250e-01, -5.61951231e-02,  9.92804602e-01, -1.73789033e-01,
       -6.35260304e-01,  6.34786596e-01, -6.25487270e-02, -3.92941525e-02,
       -4.80768402e-01,  2.75631915e-01, -1.73466873e-01, -1.19641496e+00,
        7.99781769e-01,  4.81581873e-01,  2.15332694e-01, -6.15848146e-01,
       -2.30511124e-01, -6.79717846e-01, -4.47422229e-01, -1.13590545e-01,
        7.51727944e-01, -1.86276049e-02, -5.20374399e-02, -6.43525481e-01,
        4.58543079e-02, -4.11629523e-01,  5.18815343e-01, -1.18638116e+00,
        5.22952363e-01,  2.37192905e-01,  5.08942152e-01,  2.24717011e-01,
        4.89468592e-01, -1.83645700e-01, -8.50077497e-03,  4.24614761e-01,
       -9.46961127e-01,  2.02679735e-01,  4.51633966e-01,  6.63177199e-01,
       -1.10984511e-01, -9.32998919e-02, -4.82941281e-01, -7.05781445e-01,
        7.79029392e-01,  1.80707526e-01,  6.64729558e-03,  6.10396673e-02,
        2.15587567e-01,  4.27733578e-02, -2.90264312e-01, -7.34797912e-02,
       -1.24698843e-01,  4.99181961e-02,  8.11412066e-01,  6.74537226e-01,
       -5.78561661e-01, -8.44454033e-01, -9.32244528e-02,  6.77273988e-01,
        2.20972151e-02, -5.80681067e-01,  6.41388651e-01,  7.82851489e-01,
       -5.38222734e-02, -2.16610484e-01, -2.90929542e-01,  2.95635979e-01,
       -5.18503455e-02, -4.86301986e-01,  8.04381214e-01,  3.61259784e-01,
       -3.56044307e-01,  2.19542354e-01,  1.73187510e-01, -9.60288112e-02,
       -1.90989101e-01, -5.63509031e-01,  1.10276025e+00,  6.70185507e-03,
       -1.36611007e-01,  2.23854011e-01, -6.28945739e-02,  1.34367838e-02,
        3.51257601e-01, -1.37713607e-01,  6.92686435e-01,  2.48516023e-01,
       -1.85328278e-01, -6.20191834e-01, -5.87462130e-01, -2.85950101e-01,
        1.45952092e-01, -3.01988040e-01,  3.56650442e-01, -4.77447240e-01,
       -2.32521972e-01, -4.90301385e-01,  1.66338688e-01, -7.33560015e-01,
        1.37015334e-01,  6.97682215e-01,  1.73194815e-01, -4.14559662e-01,
        1.02598365e-01,  8.15780546e-01, -1.91374938e-03, -6.42785256e-01,
        3.23792586e-01,  1.64089156e-01, -2.06873958e-01,  7.13647309e-01,
        6.81114221e-01,  8.64658089e-01, -5.72103467e-01,  6.50257139e-01,
       -5.14231879e-01,  6.81778665e-01, -4.65942930e-01, -5.66753809e-01])

In [254]: df['control'].dropna().values
Out[254]:
array([ 6.75130984e-01, -1.58435780e-01,  6.04461529e-01, -1.20993687e-01,
        3.55281281e-01,  1.94462573e-01,  2.82313992e-01,  5.47550363e-01,
       -7.04686313e-01,  2.38139075e-01, -9.53855799e-02, -2.09826336e-01,
        3.37974923e-02, -6.93066537e-01,  4.31875684e-01, -2.29840528e-01,
        4.68202401e-01,  3.98265305e-01,  6.03289969e-01, -7.39247478e-01,
       -4.67725154e-02, -8.48417695e-01,  1.22518454e-01,  1.65342357e-01,
       -3.36212473e-01, -5.15651979e-02, -9.79860621e-01,  1.79870971e-01,
        3.18006585e-01, -3.07220701e-01,  3.61583027e-01, -6.91123259e-01,
        1.70160081e-02,  4.06283614e-03,  4.36911245e-01,  4.04220977e-01,
        4.51984520e-01,  5.10144467e-01,  3.40727958e-01, -1.96687634e-01,
        8.14729689e-01, -5.87873950e-01, -5.84859353e-02, -2.21903153e-01,
        1.55662182e-02,  2.88662705e-02, -2.35390988e-02,  1.28035846e-01,
       -1.93001439e-01,  9.42036073e-01,  4.13695302e-01,  2.11621988e-01,
       -5.26340623e-01, -1.82161069e-02, -3.38980050e-01,  6.50612620e-02,
        3.21809105e-01, -8.24384989e-01, -5.03679068e-02, -5.06932399e-01,
        7.26611599e-01, -3.78767392e-01,  5.66074391e-01,  6.26190511e-01,
       -2.12629771e-01, -1.31410191e-01, -3.00185847e-01,  6.47495006e-01,
        2.67139689e-01,  1.49568179e-01, -2.04654984e-01,  2.89764010e-01,
       -1.94556302e-01,  1.42994009e-01,  3.72985169e-01, -1.64539471e-01,
        3.27707171e-02, -3.64876361e-01, -3.78092956e-01,  3.77675926e-01,
        1.94393337e-01,  4.55300329e-01, -1.77946543e-02, -6.37745651e-01,
       -6.24488716e-01,  7.03810016e-01, -4.19630715e-01,  1.60299908e+00,
       -7.12956650e-01, -1.34617640e+00, -1.97059666e-01, -3.45040517e-01,
       -4.88967676e-01,  9.16493946e-01,  3.07328850e-01,  5.04474189e-01,
        4.49326620e-01,  1.17099183e-01,  6.48028760e-02,  5.50585699e-02,
       -5.28374577e-01, -3.49943377e-02,  4.42731322e-01, -3.76792103e-01,
        7.15929470e-01, -2.76873801e-01, -3.75949488e-01, -7.46310554e-02,
        1.91184481e-01, -7.00322644e-03,  9.29943303e-04, -5.25463833e-01,
        1.77506268e-01, -4.05824938e-01,  1.05471103e-01,  5.89765037e-01,
        1.02961538e+00,  3.35818741e-01, -1.20969487e+00, -1.37413998e+00,
        1.20016362e-01,  7.68262085e-01,  2.58416264e-01, -7.63174982e-02,
        3.62232413e-01, -1.01608099e-02,  6.35132518e-01,  3.56440441e-01,
       -3.59590042e-01, -5.59717834e-01,  1.36722781e-01,  7.51942763e-02,
        5.75691669e-01, -4.98675172e-01,  5.54154261e-01, -7.81628461e-01,
        7.92405606e-03,  7.38007964e-01,  5.35878429e-01, -2.83474156e-01,
       -7.28655555e-01,  8.76536057e-01,  5.62473955e-01, -4.34830623e-01,
        4.55983118e-01, -4.70402587e-01, -2.09853661e-01, -2.14518840e-01,
       -2.93732415e-01, -8.08125627e-01,  6.54178888e-02, -4.83416202e-01,
       -4.76516226e-01, -2.18719194e-01,  1.81893768e-01, -1.41054907e-01,
       -5.10425286e-01, -4.85853359e-02, -1.60791100e-01, -9.26346812e-03,
       -7.90260587e-01,  2.62410634e-01, -3.01182726e-01,  4.10195657e-02,
       -7.51145948e-01,  1.44427727e+00, -2.73902262e-01,  1.97922539e-01,
        7.36383320e-01,  1.01380686e+00, -1.30437905e-01, -6.12776702e-02,
        3.19838911e-01,  2.37610498e-01,  8.70277307e-01, -5.64844937e-01,
       -1.94838144e-01, -8.43392332e-02, -3.98929970e-01,  6.74624474e-01,
        3.16294212e-01, -3.47287725e-02, -1.28708522e-01, -9.53707242e-02,
       -1.49636182e-01, -8.99217807e-01,  6.45913345e-01, -8.23083439e-01,
       -1.91290259e-01, -3.18199742e-02, -9.69833821e-01,  6.90976720e-01,
       -7.37745154e-02, -6.53478335e-01,  4.82732514e-01,  1.68494267e-01,
       -7.01766019e-02,  7.79863042e-01,  6.07824016e-01,  5.38141167e-01,
       -1.26198296e-01,  4.49703605e-01, -9.80822111e-01,  1.22427290e-02,
        2.57584364e-01,  4.12416024e-01,  1.16733468e+00,  1.32324358e+00,
       -1.43340207e-01, -3.93877324e-01,  9.72301712e-02,  9.48660127e-01,
        1.47081547e-01, -3.24360403e-01,  8.78677773e-01, -3.55244928e-01,
       -7.81452646e-01,  1.36822398e-01, -6.98203025e-01,  1.09621136e+00,
       -2.63656631e-01,  1.73992261e-01, -3.96705627e-01,  6.66413287e-02,
       -6.58857695e-01, -7.70707956e-01,  1.05807784e+00, -3.58357519e-01,
       -3.58020187e-01,  2.23613667e-01, -4.15649848e-01,  6.91095055e-01,
       -6.60754304e-01, -5.78541247e-01, -8.24345756e-03, -4.61221875e-01,
       -4.48163383e-02, -1.73873384e-01, -9.03641992e-01, -4.58784159e-01,
        5.31341256e-01,  3.11584378e-01, -5.73685408e-01,  1.59478723e-01,
       -8.00100983e-02, -5.43109627e-01, -6.09203854e-01, -1.10317387e+00,
        1.04024192e+00, -4.16470441e-01,  2.54301459e-01, -1.04648669e-02,
        4.30238113e-01,  4.55116668e-01, -3.19450236e-01,  1.04945475e+00,
       -9.89411362e-01, -7.24209651e-01,  7.87409443e-03,  2.23126425e-01,
       -7.11740242e-01,  1.05743718e+00, -6.50620747e-01, -1.92327606e-01,
       -1.56992729e-02, -5.76540529e-01, -5.11327390e-02, -5.77057935e-01,
        2.84445085e-01, -6.70314189e-02,  7.73344606e-02,  2.53827968e-01,
       -1.92560415e-01, -9.47623347e-02, -2.62765497e-01,  7.62490961e-01,
        1.23236404e-01,  6.21846231e-01, -1.07037108e-01,  1.03198357e-01,
       -6.88173310e-01,  3.92999033e-01, -2.05308310e-01,  2.64865032e-01,
        3.34488862e-01, -1.08313360e+00, -1.67685024e-01,  1.14817248e-01,
        2.14304000e-01, -7.69891670e-02, -9.89951072e-03, -1.23082724e-01,
        3.41552807e-01,  3.10373246e-01, -8.57793984e-02, -6.61458665e-01,
       -2.22494710e-01, -1.89426055e-01,  4.29191624e-01,  3.22661024e-02,
        8.10466614e-01, -1.29317595e+00, -2.90907482e-01, -4.72674465e-01,
        1.12306272e-01,  4.33392963e-01,  2.37848274e-01,  3.07782635e-01,
       -3.11089550e-01, -7.67989758e-01,  1.17786279e-01,  3.39527604e-01,
       -1.57732827e-01, -1.56299010e-01, -8.03449968e-01,  4.00185892e-01,
        4.97207860e-01, -1.31621114e-01,  4.57162263e-01,  5.68140613e-01,
        8.42145214e-01, -3.70353568e-01,  1.14918599e-01, -1.15259565e-01,
       -5.94878509e-01,  5.15884495e-01,  1.58839199e-01, -2.91593874e-02,
       -6.06615148e-01, -5.04504078e-01,  8.69601157e-01, -2.70939593e-01,
        8.61806501e-01, -4.07379829e-01, -1.93336413e-01,  1.23064886e-01,
       -3.69770835e-01, -8.79493262e-03,  1.06610025e+00,  1.50697277e-01,
       -1.26513843e+00, -5.23421232e-01,  8.75219337e-02,  5.21330036e-01,
       -4.80678333e-01, -3.60553974e-01,  1.19628354e-01, -9.90819279e-01,
        3.56367509e-01, -7.65279331e-01, -2.06988398e-01,  1.08298210e+00,
        4.87515430e-01,  1.71939379e-02, -4.03986129e-01, -2.63298740e-01,
        1.83983317e-01, -7.57340055e-01, -5.04240253e-01,  7.24000145e-01,
        8.48106294e-01, -3.92274166e-02, -3.14642956e-02,  4.54502498e-01,
       -5.32520775e-02,  4.19062505e-01,  1.54054778e-01,  2.57260518e-01,
        5.19666115e-01,  5.89879114e-01, -3.62042065e-01, -4.14599625e-01,
        2.95255371e-01,  3.75554824e-01, -3.19296427e-01, -2.37391680e-01,
        1.06167911e-01, -1.67790948e-01,  1.18610169e-01,  2.40760470e-01,
        2.87603250e-01, -5.61951231e-02,  9.92804602e-01, -1.73789033e-01,
       -6.35260304e-01,  6.34786596e-01, -6.25487270e-02, -3.92941525e-02,
       -4.80768402e-01,  2.75631915e-01, -1.73466873e-01, -1.19641496e+00,
        7.99781769e-01,  4.81581873e-01,  2.15332694e-01, -6.15848146e-01,
       -2.30511124e-01, -6.79717846e-01, -4.47422229e-01, -1.13590545e-01,
        7.51727944e-01, -1.86276049e-02, -5.20374399e-02, -6.43525481e-01,
        4.58543079e-02, -4.11629523e-01,  5.18815343e-01, -1.18638116e+00,
        5.22952363e-01,  2.37192905e-01,  5.08942152e-01,  2.24717011e-01,
        4.89468592e-01, -1.83645700e-01, -8.50077497e-03,  4.24614761e-01,
       -9.46961127e-01,  2.02679735e-01,  4.51633966e-01,  6.63177199e-01,
       -1.10984511e-01, -9.32998919e-02, -4.82941281e-01, -7.05781445e-01,
        7.79029392e-01,  1.80707526e-01,  6.64729558e-03,  6.10396673e-02,
        2.15587567e-01,  4.27733578e-02, -2.90264312e-01, -7.34797912e-02,
       -1.24698843e-01,  4.99181961e-02,  8.11412066e-01,  6.74537226e-01,
       -5.78561661e-01, -8.44454033e-01, -9.32244528e-02,  6.77273988e-01,
        2.20972151e-02, -5.80681067e-01,  6.41388651e-01,  7.82851489e-01,
       -5.38222734e-02, -2.16610484e-01, -2.90929542e-01,  2.95635979e-01,
       -5.18503455e-02, -4.86301986e-01,  8.04381214e-01,  3.61259784e-01,
       -3.56044307e-01,  2.19542354e-01,  1.73187510e-01, -9.60288112e-02,
       -1.90989101e-01, -5.63509031e-01,  1.10276025e+00,  6.70185507e-03,
       -1.36611007e-01,  2.23854011e-01, -6.28945739e-02,  1.34367838e-02,
        3.51257601e-01, -1.37713607e-01,  6.92686435e-01,  2.48516023e-01,
       -1.85328278e-01, -6.20191834e-01, -5.87462130e-01, -2.85950101e-01,
        1.45952092e-01, -3.01988040e-01,  3.56650442e-01, -4.77447240e-01,
       -2.32521972e-01, -4.90301385e-01,  1.66338688e-01, -7.33560015e-01,
        1.37015334e-01,  6.97682215e-01,  1.73194815e-01, -4.14559662e-01,
        1.02598365e-01,  8.15780546e-01, -1.91374938e-03, -6.42785256e-01,
        3.23792586e-01,  1.64089156e-01, -2.06873958e-01,  7.13647309e-01,
        6.81114221e-01,  8.64658089e-01, -5.72103467e-01,  6.50257139e-01,
       -5.14231879e-01,  6.81778665e-01, -4.65942930e-01, -5.66753809e-01])

In [255]: control = df['control'].dropna().values

In [256]: treatment = df['treatment'].dropna().values

In [257]: len(control)
Out[257]: 500

In [258]: len(treatment)
Out[258]: 600

In [259]: len(df)
Out[259]: 600

In [260]: f, ax = plt.subplots()

In [261]: ax.hist(control, bins='auto', label='Control')
Out[261]:
(array([ 5.,  4.,  8., 27., 39., 46., 59., 80., 61., 55., 42., 34., 22.,
        11.,  4.,  1.,  2.]),
 array([-1.37413998, -1.19901416, -1.02388833, -0.8487625 , -0.67363667,
        -0.49851085, -0.32338502, -0.14825919,  0.02686664,  0.20199246,
         0.37711829,  0.55224412,  0.72736994,  0.90249577,  1.0776216 ,
         1.25274743,  1.42787325,  1.60299908]),
 <a list of 17 Patch objects>)

In [262]: ax.hist(treatment, bins='auto', label='Treatment')
Out[262]:
(array([ 8., 35., 83., 90., 65., 43., 61., 80., 88., 35., 11.,  1.]),
 array([-4.74502333, -3.88412803, -3.02323274, -2.16233745, -1.30144216,
        -0.44054686,  0.42034843,  1.28124372,  2.14213902,  3.00303431,
         3.8639296 ,  4.7248249 ,  5.58572019]),
 <a list of 12 Patch objects>)

In [263]: ax.legend()
Out[263]: <matplotlib.legend.Legend at 0x7f6bb9d88588>

In [264]: ax.hist(control, bins='auto', label='Control')
Out[264]:
(array([ 5.,  4.,  8., 27., 39., 46., 59., 80., 61., 55., 42., 34., 22.,
        11.,  4.,  1.,  2.]),
 array([-1.37413998, -1.19901416, -1.02388833, -0.8487625 , -0.67363667,
        -0.49851085, -0.32338502, -0.14825919,  0.02686664,  0.20199246,
         0.37711829,  0.55224412,  0.72736994,  0.90249577,  1.0776216 ,
         1.25274743,  1.42787325,  1.60299908]),
 <a list of 17 Patch objects>)

In [265]: ax.legend()
Out[265]: <matplotlib.legend.Legend at 0x7f6b9b600198>

In [266]: stats.ttest_ind?

In [267]: t, p = stats.ttest_ind(control, treatment, equal_var=False)

In [268]: p
Out[268]: 0.8571390941091492

In [269]: stats.ks_2samp
Out[269]: <function scipy.stats.stats.ks_2samp(data1, data2, alternative='two-sided', mode='auto')>

In [270]: stats.ks_2samp?

In [271]: k, kp = stats.ks_2samp(control, treatment)

In [272]: kp
Out[272]: 2.1985209742376144e-41

In [273]: stats.kstest?

In [274]: d, p = stats.kstest(control, 'norm', args=(control.mean(), control.std()))

In [275]: p
Out[275]: 0.8501166305752712

In [276]: d, p = stats.kstest(treatment, 'norm', args=(treatment.mean(), treatment.std()))

In [277]: p
Out[277]: 4.010923227537854e-05
